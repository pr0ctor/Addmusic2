//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/Projects/Visual Studio/Addmusic2/Addmusic2/Addmusic2/Mml.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MmlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		POUND=1, DOLLAR=2, COMMAT=3, AMPER=4, BANG=5, PERCENT=6, STAR=7, LBRACE=8, 
		RBRACE=9, LPAREN=10, RPAREN=11, LBRACK=12, RBRACK=13, L2BRACK=14, R2BRACK=15, 
		DQUOTE=16, SQUOTE=17, SHARP=18, FLAT=19, DOT=20, TIE=21, GT=22, LT=23, 
		COMMA=24, FSLASH=25, QMARK=26, EQUAL=27, SEMICOLON=28, ReplacementText=29, 
		StringLiteral=30, PercentNumber=31, Note=32, Rest=33, Octave=34, Noise=35, 
		Tempo=36, Volume=37, Tune=38, Length=39, Quantization=40, GlobalVolume=41, 
		Pan=42, Vibrato=43, Tie=44, Question=45, Instrument=46, LoopName=47, RemoteCodeName=48, 
		StopRemoteCode=49, CallRemoteCode=50, CallPreviousLoop=51, LoadSample=52, 
		AmkV1=53, Amk=54, Amm=55, Am4=56, Samples=57, Instruments=58, Spc=59, 
		SpcAuthor=60, SpcGame=61, SpcComment=62, SpcTitle=63, SpcLength=64, Pad=65, 
		Path=66, Halvetempo=67, Option=68, Louder=69, Tempoimmunity=70, Dividetempo=71, 
		Smwvtable=72, Nspcvtable=73, Noloop=74, Amk109hotpatch=75, Channel=76, 
		SampleOptimization=77, N00=78, N01=79, N02=80, N03=81, N04=82, N05=83, 
		N06=84, N07=85, N08=86, N09=87, N7F=88, N80=89, N81=90, NFE=91, NDA=92, 
		NDB=93, NDC=94, NDD=95, NDE=96, NDF=97, NE0=98, NE1=99, NE2=100, NE3=101, 
		NE4=102, NE5=103, NE6=104, NE7=105, NE8=106, NE9=107, NEA=108, NEB=109, 
		NEC=110, NED=111, NEE=112, NEF=113, NF0=114, NF1=115, NF2=116, NF3=117, 
		NF4=118, NF5=119, NF6=120, NF7=121, NF8=122, NF9=123, NFA=124, NFB=125, 
		NFC=126, NFD=127, NUMBERS=128, UNUMBERS=129, HexDigits=130, HexNumber=131, 
		WHITESPACE=132, Comment=133;
	public const int
		RULE_song = 0, RULE_songElement = 1, RULE_specialDirective = 2, RULE_samples = 3, 
		RULE_samplesList = 4, RULE_instruments = 5, RULE_instrumentsList = 6, 
		RULE_spc = 7, RULE_spcList = 8, RULE_pad = 9, RULE_path = 10, RULE_halvetempo = 11, 
		RULE_option = 12, RULE_optionItem = 13, RULE_amk = 14, RULE_amm = 15, 
		RULE_am4 = 16, RULE_amkVersion = 17, RULE_soundChannel = 18, RULE_introEnd = 19, 
		RULE_channelContents = 20, RULE_atomics = 21, RULE_note = 22, RULE_rest = 23, 
		RULE_octave = 24, RULE_lowerOctave = 25, RULE_raiseOctave = 26, RULE_noiseNote = 27, 
		RULE_volumeCommand = 28, RULE_tuneCommand = 29, RULE_quantization = 30, 
		RULE_panCommand = 31, RULE_vibratoCommand = 32, RULE_pitchslide = 33, 
		RULE_triplet = 34, RULE_defaultLength = 35, RULE_globalVolumeCommand = 36, 
		RULE_tempoCommand = 37, RULE_instrumentCommand = 38, RULE_nakedTie = 39, 
		RULE_qmark = 40, RULE_loopers = 41, RULE_logicControls = 42, RULE_logicCalls = 43, 
		RULE_remoteLogicCalls = 44, RULE_superLoop = 45, RULE_superLoopContents = 46, 
		RULE_simpleLoop = 47, RULE_simpleLoopContents = 48, RULE_terminalSuperLoop = 49, 
		RULE_terminalSuperLoopContents = 50, RULE_terminalSimpleLoop = 51, RULE_terminalSimpleLoopContents = 52, 
		RULE_remoteCode = 53, RULE_remoteCodeContents = 54, RULE_callLoop = 55, 
		RULE_callRemoteCode = 56, RULE_stopRemoteCode = 57, RULE_callPreviousLoop = 58, 
		RULE_noloopCommand = 59, RULE_sampleLoadCommand = 60, RULE_replacements = 61, 
		RULE_globalHexCommands = 62, RULE_channelHexCommands = 63, RULE_daInstrument = 64, 
		RULE_dbPan = 65, RULE_dcPanFade = 66, RULE_ddPitchBlendCommand = 67, RULE_ddPitchBlendItems = 68, 
		RULE_deVibratoStart = 69, RULE_eaVibratoFade = 70, RULE_dfVibratoEnd = 71, 
		RULE_e0GlobalVolume = 72, RULE_e1GlobalVolumeFade = 73, RULE_e2Tempo = 74, 
		RULE_e3TempoFade = 75, RULE_e4GlobalTranspose = 76, RULE_e5Tremolo = 77, 
		RULE_e6SubloopStart = 78, RULE_e6SubloopEnd = 79, RULE_e7Volume = 80, 
		RULE_e8VolumeFade = 81, RULE_ebPitchEnvelopeRelease = 82, RULE_ecPitchEnvelopeAttack = 83, 
		RULE_edCustomADSROrGain = 84, RULE_eeTuneChannel = 85, RULE_efEcho1 = 86, 
		RULE_f0EchoOff = 87, RULE_f1Echo2 = 88, RULE_f2EchoFade = 89, RULE_f3SampleLoad = 90, 
		RULE_f4GlobalItems = 91, RULE_f4ChannelItems = 92, RULE_f5FIRFilter = 93, 
		RULE_f6DSPWrite = 94, RULE_f8EnableNoise = 95, RULE_f9DataSend = 96, RULE_faChannelItems = 97, 
		RULE_faGlobalItems = 98, RULE_fbItems = 99, RULE_fcItems = 100, RULE_fdTremoloOff = 101, 
		RULE_fePitchEnvelopeOff = 102, RULE_hexNumber = 103;
	public static readonly string[] ruleNames = {
		"song", "songElement", "specialDirective", "samples", "samplesList", "instruments", 
		"instrumentsList", "spc", "spcList", "pad", "path", "halvetempo", "option", 
		"optionItem", "amk", "amm", "am4", "amkVersion", "soundChannel", "introEnd", 
		"channelContents", "atomics", "note", "rest", "octave", "lowerOctave", 
		"raiseOctave", "noiseNote", "volumeCommand", "tuneCommand", "quantization", 
		"panCommand", "vibratoCommand", "pitchslide", "triplet", "defaultLength", 
		"globalVolumeCommand", "tempoCommand", "instrumentCommand", "nakedTie", 
		"qmark", "loopers", "logicControls", "logicCalls", "remoteLogicCalls", 
		"superLoop", "superLoopContents", "simpleLoop", "simpleLoopContents", 
		"terminalSuperLoop", "terminalSuperLoopContents", "terminalSimpleLoop", 
		"terminalSimpleLoopContents", "remoteCode", "remoteCodeContents", "callLoop", 
		"callRemoteCode", "stopRemoteCode", "callPreviousLoop", "noloopCommand", 
		"sampleLoadCommand", "replacements", "globalHexCommands", "channelHexCommands", 
		"daInstrument", "dbPan", "dcPanFade", "ddPitchBlendCommand", "ddPitchBlendItems", 
		"deVibratoStart", "eaVibratoFade", "dfVibratoEnd", "e0GlobalVolume", "e1GlobalVolumeFade", 
		"e2Tempo", "e3TempoFade", "e4GlobalTranspose", "e5Tremolo", "e6SubloopStart", 
		"e6SubloopEnd", "e7Volume", "e8VolumeFade", "ebPitchEnvelopeRelease", 
		"ecPitchEnvelopeAttack", "edCustomADSROrGain", "eeTuneChannel", "efEcho1", 
		"f0EchoOff", "f1Echo2", "f2EchoFade", "f3SampleLoad", "f4GlobalItems", 
		"f4ChannelItems", "f5FIRFilter", "f6DSPWrite", "f8EnableNoise", "f9DataSend", 
		"faChannelItems", "faGlobalItems", "fbItems", "fcItems", "fdTremoloOff", 
		"fePitchEnvelopeOff", "hexNumber"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", "'$'", "'@'", "'&'", "'!'", "'%'", "'*'", "'{'", "'}'", "'('", 
		"')'", "'['", "']'", "'[['", "']]'", "'\"'", "'''", "'+'", "'-'", "'.'", 
		"'^'", "'>'", "'<'", "','", "'/'", "'?'", "'='", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "POUND", "DOLLAR", "COMMAT", "AMPER", "BANG", "PERCENT", "STAR", 
		"LBRACE", "RBRACE", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "L2BRACK", 
		"R2BRACK", "DQUOTE", "SQUOTE", "SHARP", "FLAT", "DOT", "TIE", "GT", "LT", 
		"COMMA", "FSLASH", "QMARK", "EQUAL", "SEMICOLON", "ReplacementText", "StringLiteral", 
		"PercentNumber", "Note", "Rest", "Octave", "Noise", "Tempo", "Volume", 
		"Tune", "Length", "Quantization", "GlobalVolume", "Pan", "Vibrato", "Tie", 
		"Question", "Instrument", "LoopName", "RemoteCodeName", "StopRemoteCode", 
		"CallRemoteCode", "CallPreviousLoop", "LoadSample", "AmkV1", "Amk", "Amm", 
		"Am4", "Samples", "Instruments", "Spc", "SpcAuthor", "SpcGame", "SpcComment", 
		"SpcTitle", "SpcLength", "Pad", "Path", "Halvetempo", "Option", "Louder", 
		"Tempoimmunity", "Dividetempo", "Smwvtable", "Nspcvtable", "Noloop", "Amk109hotpatch", 
		"Channel", "SampleOptimization", "N00", "N01", "N02", "N03", "N04", "N05", 
		"N06", "N07", "N08", "N09", "N7F", "N80", "N81", "NFE", "NDA", "NDB", 
		"NDC", "NDD", "NDE", "NDF", "NE0", "NE1", "NE2", "NE3", "NE4", "NE5", 
		"NE6", "NE7", "NE8", "NE9", "NEA", "NEB", "NEC", "NED", "NEE", "NEF", 
		"NF0", "NF1", "NF2", "NF3", "NF4", "NF5", "NF6", "NF7", "NF8", "NF9", 
		"NFA", "NFB", "NFC", "NFD", "NUMBERS", "UNUMBERS", "HexDigits", "HexNumber", 
		"WHITESPACE", "Comment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Mml.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MmlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MmlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MmlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SongContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SongElementContext[] songElement() {
			return GetRuleContexts<SongElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SongElementContext songElement(int i) {
			return GetRuleContext<SongElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MmlParser.Eof, 0); }
		public SongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_song; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSong(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSong(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SongContext song() {
		SongContext _localctx = new SongContext(Context, State);
		EnterRule(_localctx, 0, RULE_song);
		int _la;
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FSLASH:
			case QMARK:
			case ReplacementText:
			case StringLiteral:
			case Tempo:
			case Length:
			case GlobalVolume:
			case Question:
			case RemoteCodeName:
			case Amk:
			case Amm:
			case Am4:
			case Samples:
			case Instruments:
			case Spc:
			case Pad:
			case Path:
			case Halvetempo:
			case Option:
			case Channel:
			case N00:
			case N01:
			case N02:
			case N03:
			case N04:
			case N05:
			case N06:
			case N07:
			case N08:
			case N09:
			case N7F:
			case N80:
			case N81:
			case NFE:
			case NDA:
			case NDB:
			case NDC:
			case NDD:
			case NDE:
			case NDF:
			case NE0:
			case NE1:
			case NE2:
			case NE3:
			case NE4:
			case NE5:
			case NE6:
			case NE7:
			case NE8:
			case NE9:
			case NEA:
			case NEB:
			case NEC:
			case NED:
			case NEE:
			case NEF:
			case NF0:
			case NF1:
			case NF2:
			case NF3:
			case NF4:
			case NF5:
			case NF6:
			case NF7:
			case NF8:
			case NF9:
			case NFA:
			case NFB:
			case NFC:
			case NFD:
			case HexNumber:
				EnterOuterAlt(_localctx, 1);
				{
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 208;
					songElement();
					}
					}
					State = 211;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & -6738872934250445L) != 0) || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & 4947802324991L) != 0) );
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213;
				Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SongElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecialDirectiveContext specialDirective() {
			return GetRuleContext<SpecialDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SoundChannelContext soundChannel() {
			return GetRuleContext<SoundChannelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoteCodeContext remoteCode() {
			return GetRuleContext<RemoteCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultLengthContext defaultLength() {
			return GetRuleContext<DefaultLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVolumeCommandContext globalVolumeCommand() {
			return GetRuleContext<GlobalVolumeCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempoCommandContext tempoCommand() {
			return GetRuleContext<TempoCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplacementsContext replacements() {
			return GetRuleContext<ReplacementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoloopCommandContext noloopCommand() {
			return GetRuleContext<NoloopCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MmlParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GlobalHexCommandsContext globalHexCommands() {
			return GetRuleContext<GlobalHexCommandsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntroEndContext introEnd() {
			return GetRuleContext<IntroEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QmarkContext qmark() {
			return GetRuleContext<QmarkContext>(0);
		}
		public SongElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_songElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSongElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSongElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSongElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SongElementContext songElement() {
		SongElementContext _localctx = new SongElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_songElement);
		try {
			State = 230;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216;
				specialDirective();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 217;
				soundChannel();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 218;
				remoteCode();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 219;
				defaultLength();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 220;
				globalVolumeCommand();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 221;
				tempoCommand();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 222;
				replacements();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 223;
				noloopCommand();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 224;
				Match(StringLiteral);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 225;
				globalHexCommands();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 226;
				hexNumber();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 227;
				introEnd();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 228;
				remoteCode();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 229;
				qmark();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AmkContext amk() {
			return GetRuleContext<AmkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpcContext spc() {
			return GetRuleContext<SpcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SamplesContext samples() {
			return GetRuleContext<SamplesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstrumentsContext instruments() {
			return GetRuleContext<InstrumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PadContext pad() {
			return GetRuleContext<PadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HalvetempoContext halvetempo() {
			return GetRuleContext<HalvetempoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option() {
			return GetRuleContext<OptionContext>(0);
		}
		public SpecialDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSpecialDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSpecialDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialDirectiveContext specialDirective() {
		SpecialDirectiveContext _localctx = new SpecialDirectiveContext(Context, State);
		EnterRule(_localctx, 4, RULE_specialDirective);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Amk:
			case Amm:
			case Am4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 232;
				amk();
				}
				break;
			case Spc:
				EnterOuterAlt(_localctx, 2);
				{
				State = 233;
				spc();
				}
				break;
			case Samples:
				EnterOuterAlt(_localctx, 3);
				{
				State = 234;
				samples();
				}
				break;
			case Instruments:
				EnterOuterAlt(_localctx, 4);
				{
				State = 235;
				instruments();
				}
				break;
			case Path:
				EnterOuterAlt(_localctx, 5);
				{
				State = 236;
				path();
				}
				break;
			case Pad:
				EnterOuterAlt(_localctx, 6);
				{
				State = 237;
				pad();
				}
				break;
			case Halvetempo:
				EnterOuterAlt(_localctx, 7);
				{
				State = 238;
				halvetempo();
				}
				break;
			case Option:
				EnterOuterAlt(_localctx, 8);
				{
				State = 239;
				option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SamplesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Samples() { return GetToken(MmlParser.Samples, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MmlParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SamplesListContext samplesList() {
			return GetRuleContext<SamplesListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MmlParser.RBRACE, 0); }
		public SamplesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_samples; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSamples(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSamples(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSamples(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SamplesContext samples() {
		SamplesContext _localctx = new SamplesContext(Context, State);
		EnterRule(_localctx, 6, RULE_samples);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(Samples);
			State = 243;
			Match(LBRACE);
			State = 244;
			samplesList();
			State = 245;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SamplesListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SampleOptimization() { return GetTokens(MmlParser.SampleOptimization); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SampleOptimization(int i) {
			return GetToken(MmlParser.SampleOptimization, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteral() { return GetTokens(MmlParser.StringLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral(int i) {
			return GetToken(MmlParser.StringLiteral, i);
		}
		public SamplesListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_samplesList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSamplesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSamplesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSamplesList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SamplesListContext samplesList() {
		SamplesListContext _localctx = new SamplesListContext(Context, State);
		EnterRule(_localctx, 8, RULE_samplesList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SampleOptimization) {
				{
				{
				State = 247;
				Match(SampleOptimization);
				}
				}
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==StringLiteral) {
				{
				{
				State = 253;
				Match(StringLiteral);
				}
				}
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstrumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instruments() { return GetToken(MmlParser.Instruments, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MmlParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MmlParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstrumentsListContext[] instrumentsList() {
			return GetRuleContexts<InstrumentsListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstrumentsListContext instrumentsList(int i) {
			return GetRuleContext<InstrumentsListContext>(i);
		}
		public InstrumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterInstruments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitInstruments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstrumentsContext instruments() {
		InstrumentsContext _localctx = new InstrumentsContext(Context, State);
		EnterRule(_localctx, 10, RULE_instruments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(Instruments);
			State = 260;
			Match(LBRACE);
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 4611686018427453473L) != 0)) {
				{
				{
				State = 261;
				instrumentsList();
				}
				}
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 267;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstrumentsListContext : ParserRuleContext {
		public InstrumentsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instrumentsList; } }
	 
		public InstrumentsListContext() { }
		public virtual void CopyFrom(InstrumentsListContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InstrumentListItemContext : InstrumentsListContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstrumentCommandContext instrumentCommand() {
			return GetRuleContext<InstrumentCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public InstrumentListItemContext(InstrumentsListContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterInstrumentListItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitInstrumentListItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstrumentListItem(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamedInstrumentListItemContext : InstrumentsListContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MmlParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public NamedInstrumentListItemContext(InstrumentsListContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterNamedInstrumentListItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitNamedInstrumentListItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedInstrumentListItem(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoiseInstrumentListItemContext : InstrumentsListContext {
		[System.Diagnostics.DebuggerNonUserCode] public NoiseNoteContext noiseNote() {
			return GetRuleContext<NoiseNoteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public NoiseInstrumentListItemContext(InstrumentsListContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterNoiseInstrumentListItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitNoiseInstrumentListItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoiseInstrumentListItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstrumentsListContext instrumentsList() {
		InstrumentsListContext _localctx = new InstrumentsListContext(Context, State);
		EnterRule(_localctx, 12, RULE_instrumentsList);
		try {
			int _alt;
			State = 287;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringLiteral:
				_localctx = new NamedInstrumentListItemContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 269;
				Match(StringLiteral);
				State = 271;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 270;
						hexNumber();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 273;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case Instrument:
			case NDA:
				_localctx = new InstrumentListItemContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 275;
				instrumentCommand();
				State = 277;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 276;
						hexNumber();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 279;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case Noise:
				_localctx = new NoiseInstrumentListItemContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 281;
				noiseNote();
				State = 283;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 282;
						hexNumber();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 285;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Spc() { return GetToken(MmlParser.Spc, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MmlParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MmlParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpcListContext[] spcList() {
			return GetRuleContexts<SpcListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpcListContext spcList(int i) {
			return GetRuleContext<SpcListContext>(i);
		}
		public SpcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSpc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSpc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpcContext spc() {
		SpcContext _localctx = new SpcContext(Context, State);
		EnterRule(_localctx, 14, RULE_spc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(Spc);
			State = 290;
			Match(LBRACE);
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & 31L) != 0)) {
				{
				{
				State = 291;
				spcList();
				}
				}
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 297;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpcListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SpcAuthor() { return GetToken(MmlParser.SpcAuthor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MmlParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SpcGame() { return GetToken(MmlParser.SpcGame, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SpcComment() { return GetToken(MmlParser.SpcComment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SpcTitle() { return GetToken(MmlParser.SpcTitle, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SpcLength() { return GetToken(MmlParser.SpcLength, 0); }
		public SpcListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spcList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSpcList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSpcList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpcList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpcListContext spcList() {
		SpcListContext _localctx = new SpcListContext(Context, State);
		EnterRule(_localctx, 16, RULE_spcList);
		try {
			State = 309;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SpcAuthor:
				EnterOuterAlt(_localctx, 1);
				{
				State = 299;
				Match(SpcAuthor);
				State = 300;
				Match(StringLiteral);
				}
				break;
			case SpcGame:
				EnterOuterAlt(_localctx, 2);
				{
				State = 301;
				Match(SpcGame);
				State = 302;
				Match(StringLiteral);
				}
				break;
			case SpcComment:
				EnterOuterAlt(_localctx, 3);
				{
				State = 303;
				Match(SpcComment);
				State = 304;
				Match(StringLiteral);
				}
				break;
			case SpcTitle:
				EnterOuterAlt(_localctx, 4);
				{
				State = 305;
				Match(SpcTitle);
				State = 306;
				Match(StringLiteral);
				}
				break;
			case SpcLength:
				EnterOuterAlt(_localctx, 5);
				{
				State = 307;
				Match(SpcLength);
				State = 308;
				Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pad() { return GetToken(MmlParser.Pad, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public PadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pad; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterPad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitPad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPad(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PadContext pad() {
		PadContext _localctx = new PadContext(Context, State);
		EnterRule(_localctx, 18, RULE_pad);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			Match(Pad);
			State = 312;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Path() { return GetToken(MmlParser.Path, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MmlParser.StringLiteral, 0); }
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		PathContext _localctx = new PathContext(Context, State);
		EnterRule(_localctx, 20, RULE_path);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(Path);
			State = 315;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HalvetempoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Halvetempo() { return GetToken(MmlParser.Halvetempo, 0); }
		public HalvetempoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_halvetempo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterHalvetempo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitHalvetempo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHalvetempo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HalvetempoContext halvetempo() {
		HalvetempoContext _localctx = new HalvetempoContext(Context, State);
		EnterRule(_localctx, 22, RULE_halvetempo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			Match(Halvetempo);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
	 
		public OptionContext() { }
		public virtual void CopyFrom(OptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionGroupContext : OptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Option() { return GetToken(MmlParser.Option, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MmlParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MmlParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] POUND() { return GetTokens(MmlParser.POUND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POUND(int i) {
			return GetToken(MmlParser.POUND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionItemContext[] optionItem() {
			return GetRuleContexts<OptionItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionItemContext optionItem(int i) {
			return GetRuleContext<OptionItemContext>(i);
		}
		public OptionGroupContext(OptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterOptionGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitOptionGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionGroup(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleOptionContext : OptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Option() { return GetToken(MmlParser.Option, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionItemContext optionItem() {
			return GetRuleContext<OptionItemContext>(0);
		}
		public SingleOptionContext(OptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSingleOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSingleOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 24, RULE_option);
		int _la;
		try {
			State = 331;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new OptionGroupContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 319;
				Match(Option);
				State = 320;
				Match(LBRACE);
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==POUND) {
					{
					{
					State = 321;
					Match(POUND);
					State = 322;
					optionItem();
					}
					}
					State = 327;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 328;
				Match(RBRACE);
				}
				break;
			case 2:
				_localctx = new SingleOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 329;
				Match(Option);
				State = 330;
				optionItem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tempoimmunity() { return GetToken(MmlParser.Tempoimmunity, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dividetempo() { return GetToken(MmlParser.Dividetempo, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Smwvtable() { return GetToken(MmlParser.Smwvtable, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Nspcvtable() { return GetToken(MmlParser.Nspcvtable, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Noloop() { return GetToken(MmlParser.Noloop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Amk109hotpatch() { return GetToken(MmlParser.Amk109hotpatch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MmlParser.StringLiteral, 0); }
		public OptionItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterOptionItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitOptionItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionItemContext optionItem() {
		OptionItemContext _localctx = new OptionItemContext(Context, State);
		EnterRule(_localctx, 26, RULE_optionItem);
		try {
			State = 343;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 333;
				Match(Tempoimmunity);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 334;
				Match(Dividetempo);
				State = 335;
				Match(NUMBERS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 336;
				Match(Smwvtable);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 337;
				Match(Nspcvtable);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 338;
				Match(Noloop);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 339;
				Match(Amk109hotpatch);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 340;
				Match(StringLiteral);
				State = 341;
				Match(NUMBERS);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 342;
				Match(StringLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmkContext : ParserRuleContext {
		public AmkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amk; } }
	 
		public AmkContext() { }
		public virtual void CopyFrom(AmkContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AmmVersionContext : AmkContext {
		[System.Diagnostics.DebuggerNonUserCode] public AmmContext amm() {
			return GetRuleContext<AmmContext>(0);
		}
		public AmmVersionContext(AmkContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterAmmVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitAmmVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmmVersion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Am4VersionContext : AmkContext {
		[System.Diagnostics.DebuggerNonUserCode] public Am4Context am4() {
			return GetRuleContext<Am4Context>(0);
		}
		public Am4VersionContext(AmkContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterAm4Version(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitAm4Version(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAm4Version(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GeneralAmkVersionContext : AmkContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Amk() { return GetToken(MmlParser.Amk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AmkVersionContext amkVersion() {
			return GetRuleContext<AmkVersionContext>(0);
		}
		public GeneralAmkVersionContext(AmkContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterGeneralAmkVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitGeneralAmkVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneralAmkVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmkContext amk() {
		AmkContext _localctx = new AmkContext(Context, State);
		EnterRule(_localctx, 28, RULE_amk);
		try {
			State = 349;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Amk:
				_localctx = new GeneralAmkVersionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 345;
				Match(Amk);
				State = 346;
				amkVersion();
				}
				break;
			case Amm:
				_localctx = new AmmVersionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 347;
				amm();
				}
				break;
			case Am4:
				_localctx = new Am4VersionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 348;
				am4();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Amm() { return GetToken(MmlParser.Amm, 0); }
		public AmmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterAmm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitAmm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmmContext amm() {
		AmmContext _localctx = new AmmContext(Context, State);
		EnterRule(_localctx, 30, RULE_amm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			Match(Amm);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Am4Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Am4() { return GetToken(MmlParser.Am4, 0); }
		public Am4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_am4; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterAm4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitAm4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAm4(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Am4Context am4() {
		Am4Context _localctx = new Am4Context(Context, State);
		EnterRule(_localctx, 32, RULE_am4);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			Match(Am4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmkVersionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AmkV1() { return GetToken(MmlParser.AmkV1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public AmkVersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amkVersion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterAmkVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitAmkVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmkVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmkVersionContext amkVersion() {
		AmkVersionContext _localctx = new AmkVersionContext(Context, State);
		EnterRule(_localctx, 34, RULE_amkVersion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			_la = TokenStream.LA(1);
			if ( !(_la==AmkV1 || _la==NUMBERS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoundChannelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Channel() { return GetToken(MmlParser.Channel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContentsContext[] channelContents() {
			return GetRuleContexts<ChannelContentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContentsContext channelContents(int i) {
			return GetRuleContext<ChannelContentsContext>(i);
		}
		public SoundChannelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soundChannel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSoundChannel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSoundChannel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoundChannel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoundChannelContext soundChannel() {
		SoundChannelContext _localctx = new SoundChannelContext(Context, State);
		EnterRule(_localctx, 36, RULE_soundChannel);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			Match(Channel);
			State = 361;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 358;
					channelContents();
					}
					} 
				}
				State = 363;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntroEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FSLASH() { return GetToken(MmlParser.FSLASH, 0); }
		public IntroEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_introEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterIntroEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitIntroEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntroEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntroEndContext introEnd() {
		IntroEndContext _localctx = new IntroEndContext(Context, State);
		EnterRule(_localctx, 38, RULE_introEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			Match(FSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelContentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicsContext atomics() {
			return GetRuleContext<AtomicsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopersContext loopers() {
			return GetRuleContext<LoopersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SampleLoadCommandContext sampleLoadCommand() {
			return GetRuleContext<SampleLoadCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelHexCommandsContext channelHexCommands() {
			return GetRuleContext<ChannelHexCommandsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public ChannelContentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelContents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterChannelContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitChannelContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelContents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChannelContentsContext channelContents() {
		ChannelContentsContext _localctx = new ChannelContentsContext(Context, State);
		EnterRule(_localctx, 40, RULE_channelContents);
		try {
			State = 371;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 366;
				atomics();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 367;
				loopers();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 368;
				sampleLoadCommand();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 369;
				channelHexCommands();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 370;
				hexNumber();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PitchslideContext pitchslide() {
			return GetRuleContext<PitchslideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoteContext note() {
			return GetRuleContext<NoteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestContext rest() {
			return GetRuleContext<RestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OctaveContext octave() {
			return GetRuleContext<OctaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LowerOctaveContext lowerOctave() {
			return GetRuleContext<LowerOctaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RaiseOctaveContext raiseOctave() {
			return GetRuleContext<RaiseOctaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoiseNoteContext noiseNote() {
			return GetRuleContext<NoiseNoteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TripletContext triplet() {
			return GetRuleContext<TripletContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VolumeCommandContext volumeCommand() {
			return GetRuleContext<VolumeCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TuneCommandContext tuneCommand() {
			return GetRuleContext<TuneCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstrumentCommandContext instrumentCommand() {
			return GetRuleContext<InstrumentCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuantizationContext quantization() {
			return GetRuleContext<QuantizationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PanCommandContext panCommand() {
			return GetRuleContext<PanCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VibratoCommandContext vibratoCommand() {
			return GetRuleContext<VibratoCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempoCommandContext tempoCommand() {
			return GetRuleContext<TempoCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntroEndContext introEnd() {
			return GetRuleContext<IntroEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NakedTieContext nakedTie() {
			return GetRuleContext<NakedTieContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QmarkContext qmark() {
			return GetRuleContext<QmarkContext>(0);
		}
		public AtomicsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomics; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterAtomics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitAtomics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicsContext atomics() {
		AtomicsContext _localctx = new AtomicsContext(Context, State);
		EnterRule(_localctx, 42, RULE_atomics);
		try {
			State = 391;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 373;
				pitchslide();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 374;
				note();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 375;
				rest();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 376;
				octave();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 377;
				lowerOctave();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 378;
				raiseOctave();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 379;
				noiseNote();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 380;
				triplet();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 381;
				volumeCommand();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 382;
				tuneCommand();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 383;
				instrumentCommand();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 384;
				quantization();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 385;
				panCommand();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 386;
				vibratoCommand();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 387;
				tempoCommand();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 388;
				introEnd();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 389;
				nakedTie();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 390;
				qmark();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Note() { return GetToken(MmlParser.Note, 0); }
		public NoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_note; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoteContext note() {
		NoteContext _localctx = new NoteContext(Context, State);
		EnterRule(_localctx, 44, RULE_note);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			Match(Note);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rest() { return GetToken(MmlParser.Rest, 0); }
		public RestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestContext rest() {
		RestContext _localctx = new RestContext(Context, State);
		EnterRule(_localctx, 46, RULE_rest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			Match(Rest);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OctaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Octave() { return GetToken(MmlParser.Octave, 0); }
		public OctaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_octave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOctave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OctaveContext octave() {
		OctaveContext _localctx = new OctaveContext(Context, State);
		EnterRule(_localctx, 48, RULE_octave);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			Match(Octave);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LowerOctaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MmlParser.LT, 0); }
		public LowerOctaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lowerOctave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterLowerOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitLowerOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLowerOctave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LowerOctaveContext lowerOctave() {
		LowerOctaveContext _localctx = new LowerOctaveContext(Context, State);
		EnterRule(_localctx, 50, RULE_lowerOctave);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			Match(LT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseOctaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MmlParser.GT, 0); }
		public RaiseOctaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseOctave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterRaiseOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitRaiseOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseOctave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseOctaveContext raiseOctave() {
		RaiseOctaveContext _localctx = new RaiseOctaveContext(Context, State);
		EnterRule(_localctx, 52, RULE_raiseOctave);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoiseNoteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Noise() { return GetToken(MmlParser.Noise, 0); }
		public NoiseNoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noiseNote; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterNoiseNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitNoiseNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoiseNote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoiseNoteContext noiseNote() {
		NoiseNoteContext _localctx = new NoiseNoteContext(Context, State);
		EnterRule(_localctx, 54, RULE_noiseNote);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			Match(Noise);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VolumeCommandContext : ParserRuleContext {
		public VolumeCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_volumeCommand; } }
	 
		public VolumeCommandContext() { }
		public virtual void CopyFrom(VolumeCommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HexVolumeContext : VolumeCommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public E7VolumeContext e7Volume() {
			return GetRuleContext<E7VolumeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public E8VolumeFadeContext e8VolumeFade() {
			return GetRuleContext<E8VolumeFadeContext>(0);
		}
		public HexVolumeContext(VolumeCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterHexVolume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitHexVolume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexVolume(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VolumeContext : VolumeCommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Volume() { return GetToken(MmlParser.Volume, 0); }
		public VolumeContext(VolumeCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterVolume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitVolume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVolume(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VolumeCommandContext volumeCommand() {
		VolumeCommandContext _localctx = new VolumeCommandContext(Context, State);
		EnterRule(_localctx, 56, RULE_volumeCommand);
		try {
			State = 410;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Volume:
				_localctx = new VolumeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 405;
				Match(Volume);
				}
				break;
			case NE7:
			case NE8:
				_localctx = new HexVolumeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 408;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NE7:
					{
					State = 406;
					e7Volume();
					}
					break;
				case NE8:
					{
					State = 407;
					e8VolumeFade();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TuneCommandContext : ParserRuleContext {
		public TuneCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuneCommand; } }
	 
		public TuneCommandContext() { }
		public virtual void CopyFrom(TuneCommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HexTuneContext : TuneCommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public EeTuneChannelContext eeTuneChannel() {
			return GetRuleContext<EeTuneChannelContext>(0);
		}
		public HexTuneContext(TuneCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterHexTune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitHexTune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexTune(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TuneContext : TuneCommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tune() { return GetToken(MmlParser.Tune, 0); }
		public TuneContext(TuneCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterTune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitTune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTune(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TuneCommandContext tuneCommand() {
		TuneCommandContext _localctx = new TuneCommandContext(Context, State);
		EnterRule(_localctx, 58, RULE_tuneCommand);
		try {
			State = 414;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Tune:
				_localctx = new TuneContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 412;
				Match(Tune);
				}
				break;
			case NEE:
				_localctx = new HexTuneContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 413;
				eeTuneChannel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuantizationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Quantization() { return GetToken(MmlParser.Quantization, 0); }
		public QuantizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantization; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterQuantization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitQuantization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuantizationContext quantization() {
		QuantizationContext _localctx = new QuantizationContext(Context, State);
		EnterRule(_localctx, 60, RULE_quantization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			Match(Quantization);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PanCommandContext : ParserRuleContext {
		public PanCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_panCommand; } }
	 
		public PanCommandContext() { }
		public virtual void CopyFrom(PanCommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HexPanContext : PanCommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public DbPanContext dbPan() {
			return GetRuleContext<DbPanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DcPanFadeContext dcPanFade() {
			return GetRuleContext<DcPanFadeContext>(0);
		}
		public HexPanContext(PanCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterHexPan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitHexPan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexPan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PanContext : PanCommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pan() { return GetToken(MmlParser.Pan, 0); }
		public PanContext(PanCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterPan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitPan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPan(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PanCommandContext panCommand() {
		PanCommandContext _localctx = new PanCommandContext(Context, State);
		EnterRule(_localctx, 62, RULE_panCommand);
		try {
			State = 423;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Pan:
				_localctx = new PanContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 418;
				Match(Pan);
				}
				break;
			case NDB:
			case NDC:
				_localctx = new HexPanContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 421;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NDB:
					{
					State = 419;
					dbPan();
					}
					break;
				case NDC:
					{
					State = 420;
					dcPanFade();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VibratoCommandContext : ParserRuleContext {
		public VibratoCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vibratoCommand; } }
	 
		public VibratoCommandContext() { }
		public virtual void CopyFrom(VibratoCommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VibratoContext : VibratoCommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Vibrato() { return GetToken(MmlParser.Vibrato, 0); }
		public VibratoContext(VibratoCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterVibrato(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitVibrato(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVibrato(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HexVibratoContext : VibratoCommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeVibratoStartContext deVibratoStart() {
			return GetRuleContext<DeVibratoStartContext>(0);
		}
		public HexVibratoContext(VibratoCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterHexVibrato(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitHexVibrato(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexVibrato(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VibratoCommandContext vibratoCommand() {
		VibratoCommandContext _localctx = new VibratoCommandContext(Context, State);
		EnterRule(_localctx, 64, RULE_vibratoCommand);
		try {
			State = 427;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Vibrato:
				_localctx = new VibratoContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 425;
				Match(Vibrato);
				}
				break;
			case NDE:
				_localctx = new HexVibratoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 426;
				deVibratoStart();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PitchslideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Note() { return GetTokens(MmlParser.Note); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Note(int i) {
			return GetToken(MmlParser.Note, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Rest() { return GetTokens(MmlParser.Rest); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rest(int i) {
			return GetToken(MmlParser.Rest, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AMPER() { return GetTokens(MmlParser.AMPER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPER(int i) {
			return GetToken(MmlParser.AMPER, i);
		}
		public PitchslideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pitchslide; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterPitchslide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitPitchslide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPitchslide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PitchslideContext pitchslide() {
		PitchslideContext _localctx = new PitchslideContext(Context, State);
		EnterRule(_localctx, 66, RULE_pitchslide);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			_la = TokenStream.LA(1);
			if ( !(_la==Note || _la==Rest) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 432;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 430;
				Match(AMPER);
				State = 431;
				_la = TokenStream.LA(1);
				if ( !(_la==Note || _la==Rest) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 434;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AMPER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TripletContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MmlParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MmlParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NoteContext[] note() {
			return GetRuleContexts<NoteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoteContext note(int i) {
			return GetRuleContext<NoteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestContext[] rest() {
			return GetRuleContexts<RestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestContext rest(int i) {
			return GetRuleContext<RestContext>(i);
		}
		public TripletContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triplet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterTriplet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitTriplet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TripletContext triplet() {
		TripletContext _localctx = new TripletContext(Context, State);
		EnterRule(_localctx, 68, RULE_triplet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			Match(LBRACE);
			State = 439;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Note:
				{
				State = 437;
				note();
				}
				break;
			case Rest:
				{
				State = 438;
				rest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 443;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Note:
				{
				State = 441;
				note();
				}
				break;
			case Rest:
				{
				State = 442;
				rest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 447;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Note:
				{
				State = 445;
				note();
				}
				break;
			case Rest:
				{
				State = 446;
				rest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 449;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultLengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Length() { return GetToken(MmlParser.Length, 0); }
		public DefaultLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultLength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterDefaultLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitDefaultLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultLengthContext defaultLength() {
		DefaultLengthContext _localctx = new DefaultLengthContext(Context, State);
		EnterRule(_localctx, 70, RULE_defaultLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			Match(Length);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVolumeCommandContext : ParserRuleContext {
		public GlobalVolumeCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVolumeCommand; } }
	 
		public GlobalVolumeCommandContext() { }
		public virtual void CopyFrom(GlobalVolumeCommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GlobalVolumeContext : GlobalVolumeCommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GlobalVolume() { return GetToken(MmlParser.GlobalVolume, 0); }
		public GlobalVolumeContext(GlobalVolumeCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterGlobalVolume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitGlobalVolume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVolume(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HexGlobalVolumeContext : GlobalVolumeCommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public E0GlobalVolumeContext e0GlobalVolume() {
			return GetRuleContext<E0GlobalVolumeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public E1GlobalVolumeFadeContext e1GlobalVolumeFade() {
			return GetRuleContext<E1GlobalVolumeFadeContext>(0);
		}
		public HexGlobalVolumeContext(GlobalVolumeCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterHexGlobalVolume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitHexGlobalVolume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexGlobalVolume(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVolumeCommandContext globalVolumeCommand() {
		GlobalVolumeCommandContext _localctx = new GlobalVolumeCommandContext(Context, State);
		EnterRule(_localctx, 72, RULE_globalVolumeCommand);
		try {
			State = 458;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GlobalVolume:
				_localctx = new GlobalVolumeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 453;
				Match(GlobalVolume);
				}
				break;
			case NE0:
			case NE1:
				_localctx = new HexGlobalVolumeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 456;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NE0:
					{
					State = 454;
					e0GlobalVolume();
					}
					break;
				case NE1:
					{
					State = 455;
					e1GlobalVolumeFade();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TempoCommandContext : ParserRuleContext {
		public TempoCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tempoCommand; } }
	 
		public TempoCommandContext() { }
		public virtual void CopyFrom(TempoCommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TempoContext : TempoCommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tempo() { return GetToken(MmlParser.Tempo, 0); }
		public TempoContext(TempoCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterTempo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitTempo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTempo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HexTempoContext : TempoCommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public E2TempoContext e2Tempo() {
			return GetRuleContext<E2TempoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public E3TempoFadeContext e3TempoFade() {
			return GetRuleContext<E3TempoFadeContext>(0);
		}
		public HexTempoContext(TempoCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterHexTempo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitHexTempo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexTempo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TempoCommandContext tempoCommand() {
		TempoCommandContext _localctx = new TempoCommandContext(Context, State);
		EnterRule(_localctx, 74, RULE_tempoCommand);
		try {
			State = 465;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Tempo:
				_localctx = new TempoContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 460;
				Match(Tempo);
				}
				break;
			case NE2:
			case NE3:
				_localctx = new HexTempoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 463;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NE2:
					{
					State = 461;
					e2Tempo();
					}
					break;
				case NE3:
					{
					State = 462;
					e3TempoFade();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstrumentCommandContext : ParserRuleContext {
		public InstrumentCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instrumentCommand; } }
	 
		public InstrumentCommandContext() { }
		public virtual void CopyFrom(InstrumentCommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HexInstrumentContext : InstrumentCommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public DaInstrumentContext daInstrument() {
			return GetRuleContext<DaInstrumentContext>(0);
		}
		public HexInstrumentContext(InstrumentCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterHexInstrument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitHexInstrument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexInstrument(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstrumentContext : InstrumentCommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instrument() { return GetToken(MmlParser.Instrument, 0); }
		public InstrumentContext(InstrumentCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterInstrument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitInstrument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstrument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstrumentCommandContext instrumentCommand() {
		InstrumentCommandContext _localctx = new InstrumentCommandContext(Context, State);
		EnterRule(_localctx, 76, RULE_instrumentCommand);
		try {
			State = 469;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Instrument:
				_localctx = new InstrumentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 467;
				Match(Instrument);
				}
				break;
			case NDA:
				_localctx = new HexInstrumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 468;
				daInstrument();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NakedTieContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tie() { return GetToken(MmlParser.Tie, 0); }
		public NakedTieContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nakedTie; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterNakedTie(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitNakedTie(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNakedTie(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NakedTieContext nakedTie() {
		NakedTieContext _localctx = new NakedTieContext(Context, State);
		EnterRule(_localctx, 78, RULE_nakedTie);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			Match(Tie);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QmarkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question() { return GetToken(MmlParser.Question, 0); }
		public QmarkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qmark; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterQmark(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitQmark(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQmark(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QmarkContext qmark() {
		QmarkContext _localctx = new QmarkContext(Context, State);
		EnterRule(_localctx, 80, RULE_qmark);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			Match(Question);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicControlsContext logicControls() {
			return GetRuleContext<LogicControlsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicCallsContext logicCalls() {
			return GetRuleContext<LogicCallsContext>(0);
		}
		public LoopersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterLoopers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitLoopers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopersContext loopers() {
		LoopersContext _localctx = new LoopersContext(Context, State);
		EnterRule(_localctx, 82, RULE_loopers);
		try {
			State = 477;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 475;
				logicControls();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 476;
				logicCalls();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicControlsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SuperLoopContext superLoop() {
			return GetRuleContext<SuperLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleLoopContext simpleLoop() {
			return GetRuleContext<SimpleLoopContext>(0);
		}
		public LogicControlsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicControls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterLogicControls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitLogicControls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicControls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicControlsContext logicControls() {
		LogicControlsContext _localctx = new LogicControlsContext(Context, State);
		EnterRule(_localctx, 84, RULE_logicControls);
		try {
			State = 481;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case L2BRACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 479;
				superLoop();
				}
				break;
			case LBRACK:
			case LoopName:
				EnterOuterAlt(_localctx, 2);
				{
				State = 480;
				simpleLoop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicCallsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallLoopContext callLoop() {
			return GetRuleContext<CallLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoteLogicCallsContext remoteLogicCalls() {
			return GetRuleContext<RemoteLogicCallsContext>(0);
		}
		public LogicCallsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicCalls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterLogicCalls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitLogicCalls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicCalls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicCallsContext logicCalls() {
		LogicCallsContext _localctx = new LogicCallsContext(Context, State);
		EnterRule(_localctx, 86, RULE_logicCalls);
		try {
			State = 485;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LoopName:
				EnterOuterAlt(_localctx, 1);
				{
				State = 483;
				callLoop();
				}
				break;
			case STAR:
			case StopRemoteCode:
			case CallRemoteCode:
				EnterOuterAlt(_localctx, 2);
				{
				State = 484;
				remoteLogicCalls();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoteLogicCallsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallRemoteCodeContext callRemoteCode() {
			return GetRuleContext<CallRemoteCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallPreviousLoopContext callPreviousLoop() {
			return GetRuleContext<CallPreviousLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopRemoteCodeContext stopRemoteCode() {
			return GetRuleContext<StopRemoteCodeContext>(0);
		}
		public RemoteLogicCallsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remoteLogicCalls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterRemoteLogicCalls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitRemoteLogicCalls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoteLogicCalls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoteLogicCallsContext remoteLogicCalls() {
		RemoteLogicCallsContext _localctx = new RemoteLogicCallsContext(Context, State);
		EnterRule(_localctx, 88, RULE_remoteLogicCalls);
		try {
			State = 490;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CallRemoteCode:
				EnterOuterAlt(_localctx, 1);
				{
				State = 487;
				callRemoteCode();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 488;
				callPreviousLoop();
				}
				break;
			case StopRemoteCode:
				EnterOuterAlt(_localctx, 3);
				{
				State = 489;
				stopRemoteCode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L2BRACK() { return GetToken(MmlParser.L2BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R2BRACK() { return GetToken(MmlParser.R2BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SuperLoopContentsContext[] superLoopContents() {
			return GetRuleContexts<SuperLoopContentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperLoopContentsContext superLoopContents(int i) {
			return GetRuleContext<SuperLoopContentsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public SuperLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSuperLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSuperLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperLoopContext superLoop() {
		SuperLoopContext _localctx = new SuperLoopContext(Context, State);
		EnterRule(_localctx, 90, RULE_superLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			Match(L2BRACK);
			State = 496;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1967571809079680L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 10133099161583615L) != 0)) {
				{
				{
				State = 493;
				superLoopContents();
				}
				}
				State = 498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 499;
			Match(R2BRACK);
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBERS) {
				{
				State = 500;
				Match(NUMBERS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperLoopContentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicsContext atomics() {
			return GetRuleContext<AtomicsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminalSimpleLoopContext terminalSimpleLoop() {
			return GetRuleContext<TerminalSimpleLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicCallsContext logicCalls() {
			return GetRuleContext<LogicCallsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public SuperLoopContentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superLoopContents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSuperLoopContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSuperLoopContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperLoopContents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperLoopContentsContext superLoopContents() {
		SuperLoopContentsContext _localctx = new SuperLoopContentsContext(Context, State);
		EnterRule(_localctx, 92, RULE_superLoopContents);
		try {
			State = 507;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 503;
				atomics();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 504;
				terminalSimpleLoop();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 505;
				logicCalls();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 506;
				hexNumber();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MmlParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MmlParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopName() { return GetToken(MmlParser.LoopName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleLoopContentsContext[] simpleLoopContents() {
			return GetRuleContexts<SimpleLoopContentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleLoopContentsContext simpleLoopContents(int i) {
			return GetRuleContext<SimpleLoopContentsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public SimpleLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSimpleLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSimpleLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleLoopContext simpleLoop() {
		SimpleLoopContext _localctx = new SimpleLoopContext(Context, State);
		EnterRule(_localctx, 94, RULE_simpleLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LoopName) {
				{
				State = 509;
				Match(LoopName);
				}
			}

			State = 512;
			Match(LBRACK);
			State = 516;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1826834320736640L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 10133099161583615L) != 0)) {
				{
				{
				State = 513;
				simpleLoopContents();
				}
				}
				State = 518;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 519;
			Match(RBRACK);
			State = 521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBERS) {
				{
				State = 520;
				Match(NUMBERS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleLoopContentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicsContext atomics() {
			return GetRuleContext<AtomicsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminalSuperLoopContext terminalSuperLoop() {
			return GetRuleContext<TerminalSuperLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoteLogicCallsContext remoteLogicCalls() {
			return GetRuleContext<RemoteLogicCallsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public SimpleLoopContentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleLoopContents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSimpleLoopContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSimpleLoopContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleLoopContents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleLoopContentsContext simpleLoopContents() {
		SimpleLoopContentsContext _localctx = new SimpleLoopContentsContext(Context, State);
		EnterRule(_localctx, 96, RULE_simpleLoopContents);
		try {
			State = 527;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 523;
				atomics();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 524;
				terminalSuperLoop();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 525;
				remoteLogicCalls();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 526;
				hexNumber();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalSuperLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L2BRACK() { return GetToken(MmlParser.L2BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R2BRACK() { return GetToken(MmlParser.R2BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TerminalSuperLoopContentsContext[] terminalSuperLoopContents() {
			return GetRuleContexts<TerminalSuperLoopContentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminalSuperLoopContentsContext terminalSuperLoopContents(int i) {
			return GetRuleContext<TerminalSuperLoopContentsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public TerminalSuperLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalSuperLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterTerminalSuperLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitTerminalSuperLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminalSuperLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalSuperLoopContext terminalSuperLoop() {
		TerminalSuperLoopContext _localctx = new TerminalSuperLoopContext(Context, State);
		EnterRule(_localctx, 98, RULE_terminalSuperLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			Match(L2BRACK);
			State = 533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1967571809075584L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 10133099161583615L) != 0)) {
				{
				{
				State = 530;
				terminalSuperLoopContents();
				}
				}
				State = 535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 536;
			Match(R2BRACK);
			State = 538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBERS) {
				{
				State = 537;
				Match(NUMBERS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalSuperLoopContentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicsContext atomics() {
			return GetRuleContext<AtomicsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicCallsContext logicCalls() {
			return GetRuleContext<LogicCallsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public TerminalSuperLoopContentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalSuperLoopContents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterTerminalSuperLoopContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitTerminalSuperLoopContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminalSuperLoopContents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalSuperLoopContentsContext terminalSuperLoopContents() {
		TerminalSuperLoopContentsContext _localctx = new TerminalSuperLoopContentsContext(Context, State);
		EnterRule(_localctx, 100, RULE_terminalSuperLoopContents);
		try {
			State = 543;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 540;
				atomics();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 541;
				logicCalls();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 542;
				hexNumber();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalSimpleLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MmlParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MmlParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopName() { return GetToken(MmlParser.LoopName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TerminalSimpleLoopContentsContext[] terminalSimpleLoopContents() {
			return GetRuleContexts<TerminalSimpleLoopContentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminalSimpleLoopContentsContext terminalSimpleLoopContents(int i) {
			return GetRuleContext<TerminalSimpleLoopContentsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public TerminalSimpleLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalSimpleLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterTerminalSimpleLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitTerminalSimpleLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminalSimpleLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalSimpleLoopContext terminalSimpleLoop() {
		TerminalSimpleLoopContext _localctx = new TerminalSimpleLoopContext(Context, State);
		EnterRule(_localctx, 102, RULE_terminalSimpleLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LoopName) {
				{
				State = 545;
				Match(LoopName);
				}
			}

			State = 548;
			Match(LBRACK);
			State = 552;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1826834320720256L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 10133099161583615L) != 0)) {
				{
				{
				State = 549;
				terminalSimpleLoopContents();
				}
				}
				State = 554;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 555;
			Match(RBRACK);
			State = 557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBERS) {
				{
				State = 556;
				Match(NUMBERS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalSimpleLoopContentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicsContext atomics() {
			return GetRuleContext<AtomicsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoteLogicCallsContext remoteLogicCalls() {
			return GetRuleContext<RemoteLogicCallsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public TerminalSimpleLoopContentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalSimpleLoopContents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterTerminalSimpleLoopContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitTerminalSimpleLoopContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminalSimpleLoopContents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalSimpleLoopContentsContext terminalSimpleLoopContents() {
		TerminalSimpleLoopContentsContext _localctx = new TerminalSimpleLoopContentsContext(Context, State);
		EnterRule(_localctx, 104, RULE_terminalSimpleLoopContents);
		try {
			State = 562;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 559;
				atomics();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 560;
				remoteLogicCalls();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 561;
				hexNumber();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoteCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RemoteCodeName() { return GetToken(MmlParser.RemoteCodeName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MmlParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MmlParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RemoteCodeContentsContext[] remoteCodeContents() {
			return GetRuleContexts<RemoteCodeContentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoteCodeContentsContext remoteCodeContents(int i) {
			return GetRuleContext<RemoteCodeContentsContext>(i);
		}
		public RemoteCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remoteCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterRemoteCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitRemoteCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoteCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoteCodeContext remoteCode() {
		RemoteCodeContext _localctx = new RemoteCodeContext(Context, State);
		EnterRule(_localctx, 106, RULE_remoteCode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564;
			Match(RemoteCodeName);
			State = 565;
			Match(LBRACK);
			State = 567;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 566;
				remoteCodeContents();
				}
				}
				State = 569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 14791879950336L) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 10133099161583615L) != 0) );
			State = 571;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoteCodeContentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OctaveContext octave() {
			return GetRuleContext<OctaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LowerOctaveContext lowerOctave() {
			return GetRuleContext<LowerOctaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RaiseOctaveContext raiseOctave() {
			return GetRuleContext<RaiseOctaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VolumeCommandContext volumeCommand() {
			return GetRuleContext<VolumeCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TuneCommandContext tuneCommand() {
			return GetRuleContext<TuneCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuantizationContext quantization() {
			return GetRuleContext<QuantizationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PanCommandContext panCommand() {
			return GetRuleContext<PanCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VibratoCommandContext vibratoCommand() {
			return GetRuleContext<VibratoCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempoCommandContext tempoCommand() {
			return GetRuleContext<TempoCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public RemoteCodeContentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remoteCodeContents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterRemoteCodeContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitRemoteCodeContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoteCodeContents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoteCodeContentsContext remoteCodeContents() {
		RemoteCodeContentsContext _localctx = new RemoteCodeContentsContext(Context, State);
		EnterRule(_localctx, 108, RULE_remoteCodeContents);
		try {
			State = 583;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 573;
				octave();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 574;
				lowerOctave();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 575;
				raiseOctave();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 576;
				volumeCommand();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 577;
				tuneCommand();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 578;
				quantization();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 579;
				panCommand();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 580;
				vibratoCommand();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 581;
				tempoCommand();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 582;
				hexNumber();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopName() { return GetToken(MmlParser.LoopName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public CallLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterCallLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitCallLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallLoopContext callLoop() {
		CallLoopContext _localctx = new CallLoopContext(Context, State);
		EnterRule(_localctx, 110, RULE_callLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			Match(LoopName);
			State = 587;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBERS) {
				{
				State = 586;
				Match(NUMBERS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallRemoteCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CallRemoteCode() { return GetToken(MmlParser.CallRemoteCode, 0); }
		public CallRemoteCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callRemoteCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterCallRemoteCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitCallRemoteCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallRemoteCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallRemoteCodeContext callRemoteCode() {
		CallRemoteCodeContext _localctx = new CallRemoteCodeContext(Context, State);
		EnterRule(_localctx, 112, RULE_callRemoteCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			Match(CallRemoteCode);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopRemoteCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StopRemoteCode() { return GetToken(MmlParser.StopRemoteCode, 0); }
		public StopRemoteCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopRemoteCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterStopRemoteCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitStopRemoteCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopRemoteCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopRemoteCodeContext stopRemoteCode() {
		StopRemoteCodeContext _localctx = new StopRemoteCodeContext(Context, State);
		EnterRule(_localctx, 114, RULE_stopRemoteCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			Match(StopRemoteCode);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallPreviousLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MmlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public CallPreviousLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callPreviousLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterCallPreviousLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitCallPreviousLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallPreviousLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallPreviousLoopContext callPreviousLoop() {
		CallPreviousLoopContext _localctx = new CallPreviousLoopContext(Context, State);
		EnterRule(_localctx, 116, RULE_callPreviousLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			Match(STAR);
			State = 595;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBERS) {
				{
				State = 594;
				Match(NUMBERS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoloopCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QMARK() { return GetToken(MmlParser.QMARK, 0); }
		public NoloopCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noloopCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterNoloopCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitNoloopCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoloopCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoloopCommandContext noloopCommand() {
		NoloopCommandContext _localctx = new NoloopCommandContext(Context, State);
		EnterRule(_localctx, 118, RULE_noloopCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			Match(QMARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SampleLoadCommandContext : ParserRuleContext {
		public SampleLoadCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sampleLoadCommand; } }
	 
		public SampleLoadCommandContext() { }
		public virtual void CopyFrom(SampleLoadCommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HexSampleLoadContext : SampleLoadCommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public F3SampleLoadContext f3SampleLoad() {
			return GetRuleContext<F3SampleLoadContext>(0);
		}
		public HexSampleLoadContext(SampleLoadCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterHexSampleLoad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitHexSampleLoad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexSampleLoad(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SampleLoadContext : SampleLoadCommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoadSample() { return GetToken(MmlParser.LoadSample, 0); }
		public SampleLoadContext(SampleLoadCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSampleLoad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSampleLoad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSampleLoad(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SampleLoadCommandContext sampleLoadCommand() {
		SampleLoadCommandContext _localctx = new SampleLoadCommandContext(Context, State);
		EnterRule(_localctx, 120, RULE_sampleLoadCommand);
		try {
			State = 601;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LoadSample:
				_localctx = new SampleLoadContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 599;
				Match(LoadSample);
				}
				break;
			case NF3:
				_localctx = new HexSampleLoadContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 600;
				f3SampleLoad();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplacementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReplacementText() { return GetToken(MmlParser.ReplacementText, 0); }
		public ReplacementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replacements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterReplacements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitReplacements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplacements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplacementsContext replacements() {
		ReplacementsContext _localctx = new ReplacementsContext(Context, State);
		EnterRule(_localctx, 122, RULE_replacements);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			Match(ReplacementText);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalHexCommandsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public F5FIRFilterContext f5FIRFilter() {
			return GetRuleContext<F5FIRFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public E4GlobalTransposeContext e4GlobalTranspose() {
			return GetRuleContext<E4GlobalTransposeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public F4GlobalItemsContext f4GlobalItems() {
			return GetRuleContext<F4GlobalItemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EfEcho1Context efEcho1() {
			return GetRuleContext<EfEcho1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public F1Echo2Context f1Echo2() {
			return GetRuleContext<F1Echo2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public F0EchoOffContext f0EchoOff() {
			return GetRuleContext<F0EchoOffContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public F2EchoFadeContext f2EchoFade() {
			return GetRuleContext<F2EchoFadeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public F6DSPWriteContext f6DSPWrite() {
			return GetRuleContext<F6DSPWriteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public F9DataSendContext f9DataSend() {
			return GetRuleContext<F9DataSendContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FaGlobalItemsContext faGlobalItems() {
			return GetRuleContext<FaGlobalItemsContext>(0);
		}
		public GlobalHexCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalHexCommands; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterGlobalHexCommands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitGlobalHexCommands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalHexCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalHexCommandsContext globalHexCommands() {
		GlobalHexCommandsContext _localctx = new GlobalHexCommandsContext(Context, State);
		EnterRule(_localctx, 124, RULE_globalHexCommands);
		try {
			State = 615;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NF5:
				EnterOuterAlt(_localctx, 1);
				{
				State = 605;
				f5FIRFilter();
				}
				break;
			case NE4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 606;
				e4GlobalTranspose();
				}
				break;
			case NF4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 607;
				f4GlobalItems();
				}
				break;
			case NEF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 608;
				efEcho1();
				}
				break;
			case NF1:
				EnterOuterAlt(_localctx, 5);
				{
				State = 609;
				f1Echo2();
				}
				break;
			case NF0:
				EnterOuterAlt(_localctx, 6);
				{
				State = 610;
				f0EchoOff();
				}
				break;
			case NF2:
				EnterOuterAlt(_localctx, 7);
				{
				State = 611;
				f2EchoFade();
				}
				break;
			case NF6:
				EnterOuterAlt(_localctx, 8);
				{
				State = 612;
				f6DSPWrite();
				}
				break;
			case NF9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 613;
				f9DataSend();
				}
				break;
			case NFA:
				EnterOuterAlt(_localctx, 10);
				{
				State = 614;
				faGlobalItems();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelHexCommandsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public E5TremoloContext e5Tremolo() {
			return GetRuleContext<E5TremoloContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FbItemsContext fbItems() {
			return GetRuleContext<FbItemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EaVibratoFadeContext eaVibratoFade() {
			return GetRuleContext<EaVibratoFadeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DfVibratoEndContext dfVibratoEnd() {
			return GetRuleContext<DfVibratoEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EbPitchEnvelopeReleaseContext ebPitchEnvelopeRelease() {
			return GetRuleContext<EbPitchEnvelopeReleaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EcPitchEnvelopeAttackContext ecPitchEnvelopeAttack() {
			return GetRuleContext<EcPitchEnvelopeAttackContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EdCustomADSROrGainContext edCustomADSROrGain() {
			return GetRuleContext<EdCustomADSROrGainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public F0EchoOffContext f0EchoOff() {
			return GetRuleContext<F0EchoOffContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public F2EchoFadeContext f2EchoFade() {
			return GetRuleContext<F2EchoFadeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public F4ChannelItemsContext f4ChannelItems() {
			return GetRuleContext<F4ChannelItemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public F6DSPWriteContext f6DSPWrite() {
			return GetRuleContext<F6DSPWriteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public F8EnableNoiseContext f8EnableNoise() {
			return GetRuleContext<F8EnableNoiseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public F9DataSendContext f9DataSend() {
			return GetRuleContext<F9DataSendContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FaChannelItemsContext faChannelItems() {
			return GetRuleContext<FaChannelItemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FcItemsContext fcItems() {
			return GetRuleContext<FcItemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FdTremoloOffContext fdTremoloOff() {
			return GetRuleContext<FdTremoloOffContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FePitchEnvelopeOffContext fePitchEnvelopeOff() {
			return GetRuleContext<FePitchEnvelopeOffContext>(0);
		}
		public ChannelHexCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelHexCommands; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterChannelHexCommands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitChannelHexCommands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelHexCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChannelHexCommandsContext channelHexCommands() {
		ChannelHexCommandsContext _localctx = new ChannelHexCommandsContext(Context, State);
		EnterRule(_localctx, 126, RULE_channelHexCommands);
		try {
			State = 635;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 617;
				e5Tremolo();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 618;
				fbItems();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 619;
				eaVibratoFade();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 620;
				dfVibratoEnd();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 621;
				ebPitchEnvelopeRelease();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 622;
				ecPitchEnvelopeAttack();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 623;
				edCustomADSROrGain();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 624;
				f0EchoOff();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 625;
				f2EchoFade();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 626;
				f4ChannelItems();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 627;
				f6DSPWrite();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 628;
				f8EnableNoise();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 629;
				f9DataSend();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 630;
				faChannelItems();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 631;
				fbItems();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 632;
				fcItems();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 633;
				fdTremoloOff();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 634;
				fePitchEnvelopeOff();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DaInstrumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDA() { return GetToken(MmlParser.NDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public DaInstrumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_daInstrument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterDaInstrument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitDaInstrument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDaInstrument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DaInstrumentContext daInstrument() {
		DaInstrumentContext _localctx = new DaInstrumentContext(Context, State);
		EnterRule(_localctx, 128, RULE_daInstrument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 637;
			Match(NDA);
			State = 638;
			Match(NUMBERS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DbPanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDB() { return GetToken(MmlParser.NDB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public DbPanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbPan; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterDbPan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitDbPan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDbPan(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DbPanContext dbPan() {
		DbPanContext _localctx = new DbPanContext(Context, State);
		EnterRule(_localctx, 130, RULE_dbPan);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640;
			Match(NDB);
			State = 641;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DcPanFadeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDC() { return GetToken(MmlParser.NDC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public DcPanFadeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcPanFade; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterDcPanFade(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitDcPanFade(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDcPanFade(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DcPanFadeContext dcPanFade() {
		DcPanFadeContext _localctx = new DcPanFadeContext(Context, State);
		EnterRule(_localctx, 132, RULE_dcPanFade);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 643;
			Match(NDC);
			State = 644;
			hexNumber();
			State = 645;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DdPitchBlendCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDD() { return GetToken(MmlParser.NDD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DdPitchBlendItemsContext ddPitchBlendItems() {
			return GetRuleContext<DdPitchBlendItemsContext>(0);
		}
		public DdPitchBlendCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddPitchBlendCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterDdPitchBlendCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitDdPitchBlendCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdPitchBlendCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DdPitchBlendCommandContext ddPitchBlendCommand() {
		DdPitchBlendCommandContext _localctx = new DdPitchBlendCommandContext(Context, State);
		EnterRule(_localctx, 134, RULE_ddPitchBlendCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647;
			Match(NDD);
			State = 648;
			hexNumber();
			State = 651;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case N00:
			case N01:
			case N02:
			case N03:
			case N04:
			case N05:
			case N06:
			case N07:
			case N08:
			case N09:
			case N7F:
			case N80:
			case N81:
			case NFE:
			case NDA:
			case NDB:
			case NDC:
			case NDD:
			case NDE:
			case NDF:
			case NE0:
			case NE1:
			case NE2:
			case NE3:
			case NE4:
			case NE5:
			case NE6:
			case NE7:
			case NE8:
			case NE9:
			case NEA:
			case NEB:
			case NEC:
			case NED:
			case NEE:
			case NEF:
			case NF0:
			case NF1:
			case NF2:
			case NF3:
			case NF4:
			case NF5:
			case NF6:
			case NF7:
			case NF8:
			case NF9:
			case NFA:
			case NFB:
			case NFC:
			case NFD:
			case HexNumber:
				{
				State = 649;
				hexNumber();
				}
				break;
			case GT:
			case LT:
			case Note:
			case Octave:
				{
				State = 650;
				ddPitchBlendItems();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DdPitchBlendItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NoteContext note() {
			return GetRuleContext<NoteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OctaveContext[] octave() {
			return GetRuleContexts<OctaveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OctaveContext octave(int i) {
			return GetRuleContext<OctaveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RaiseOctaveContext[] raiseOctave() {
			return GetRuleContexts<RaiseOctaveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RaiseOctaveContext raiseOctave(int i) {
			return GetRuleContext<RaiseOctaveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LowerOctaveContext[] lowerOctave() {
			return GetRuleContexts<LowerOctaveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LowerOctaveContext lowerOctave(int i) {
			return GetRuleContext<LowerOctaveContext>(i);
		}
		public DdPitchBlendItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddPitchBlendItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterDdPitchBlendItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitDdPitchBlendItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdPitchBlendItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DdPitchBlendItemsContext ddPitchBlendItems() {
		DdPitchBlendItemsContext _localctx = new DdPitchBlendItemsContext(Context, State);
		EnterRule(_localctx, 136, RULE_ddPitchBlendItems);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17192452096L) != 0)) {
				{
				State = 656;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Octave:
					{
					State = 653;
					octave();
					}
					break;
				case GT:
					{
					State = 654;
					raiseOctave();
					}
					break;
				case LT:
					{
					State = 655;
					lowerOctave();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 660;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 661;
			note();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeVibratoStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDE() { return GetToken(MmlParser.NDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public DeVibratoStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deVibratoStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterDeVibratoStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitDeVibratoStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeVibratoStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeVibratoStartContext deVibratoStart() {
		DeVibratoStartContext _localctx = new DeVibratoStartContext(Context, State);
		EnterRule(_localctx, 138, RULE_deVibratoStart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			Match(NDE);
			State = 664;
			hexNumber();
			State = 665;
			hexNumber();
			State = 666;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EaVibratoFadeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEA() { return GetToken(MmlParser.NEA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public EaVibratoFadeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eaVibratoFade; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterEaVibratoFade(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitEaVibratoFade(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEaVibratoFade(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EaVibratoFadeContext eaVibratoFade() {
		EaVibratoFadeContext _localctx = new EaVibratoFadeContext(Context, State);
		EnterRule(_localctx, 140, RULE_eaVibratoFade);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 668;
			Match(NEA);
			State = 669;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DfVibratoEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDF() { return GetToken(MmlParser.NDF, 0); }
		public DfVibratoEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dfVibratoEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterDfVibratoEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitDfVibratoEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDfVibratoEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DfVibratoEndContext dfVibratoEnd() {
		DfVibratoEndContext _localctx = new DfVibratoEndContext(Context, State);
		EnterRule(_localctx, 142, RULE_dfVibratoEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			Match(NDF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class E0GlobalVolumeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE0() { return GetToken(MmlParser.NE0, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public E0GlobalVolumeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_e0GlobalVolume; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterE0GlobalVolume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitE0GlobalVolume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitE0GlobalVolume(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public E0GlobalVolumeContext e0GlobalVolume() {
		E0GlobalVolumeContext _localctx = new E0GlobalVolumeContext(Context, State);
		EnterRule(_localctx, 144, RULE_e0GlobalVolume);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673;
			Match(NE0);
			State = 674;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class E1GlobalVolumeFadeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE1() { return GetToken(MmlParser.NE1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public E1GlobalVolumeFadeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_e1GlobalVolumeFade; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterE1GlobalVolumeFade(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitE1GlobalVolumeFade(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitE1GlobalVolumeFade(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public E1GlobalVolumeFadeContext e1GlobalVolumeFade() {
		E1GlobalVolumeFadeContext _localctx = new E1GlobalVolumeFadeContext(Context, State);
		EnterRule(_localctx, 146, RULE_e1GlobalVolumeFade);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676;
			Match(NE1);
			State = 677;
			hexNumber();
			State = 678;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class E2TempoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE2() { return GetToken(MmlParser.NE2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public E2TempoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_e2Tempo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterE2Tempo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitE2Tempo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitE2Tempo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public E2TempoContext e2Tempo() {
		E2TempoContext _localctx = new E2TempoContext(Context, State);
		EnterRule(_localctx, 148, RULE_e2Tempo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680;
			Match(NE2);
			State = 681;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class E3TempoFadeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE3() { return GetToken(MmlParser.NE3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public E3TempoFadeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_e3TempoFade; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterE3TempoFade(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitE3TempoFade(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitE3TempoFade(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public E3TempoFadeContext e3TempoFade() {
		E3TempoFadeContext _localctx = new E3TempoFadeContext(Context, State);
		EnterRule(_localctx, 150, RULE_e3TempoFade);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			Match(NE3);
			State = 684;
			hexNumber();
			State = 685;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class E4GlobalTransposeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE4() { return GetToken(MmlParser.NE4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public E4GlobalTransposeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_e4GlobalTranspose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterE4GlobalTranspose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitE4GlobalTranspose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitE4GlobalTranspose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public E4GlobalTransposeContext e4GlobalTranspose() {
		E4GlobalTransposeContext _localctx = new E4GlobalTransposeContext(Context, State);
		EnterRule(_localctx, 152, RULE_e4GlobalTranspose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687;
			Match(NE4);
			State = 688;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class E5TremoloContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE5() { return GetToken(MmlParser.NE5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public E5TremoloContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_e5Tremolo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterE5Tremolo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitE5Tremolo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitE5Tremolo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public E5TremoloContext e5Tremolo() {
		E5TremoloContext _localctx = new E5TremoloContext(Context, State);
		EnterRule(_localctx, 154, RULE_e5Tremolo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690;
			Match(NE5);
			State = 691;
			hexNumber();
			State = 692;
			hexNumber();
			State = 693;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class E6SubloopStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE6() { return GetToken(MmlParser.NE6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N00() { return GetToken(MmlParser.N00, 0); }
		public E6SubloopStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_e6SubloopStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterE6SubloopStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitE6SubloopStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitE6SubloopStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public E6SubloopStartContext e6SubloopStart() {
		E6SubloopStartContext _localctx = new E6SubloopStartContext(Context, State);
		EnterRule(_localctx, 156, RULE_e6SubloopStart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695;
			Match(NE6);
			State = 696;
			Match(N00);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class E6SubloopEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE6() { return GetToken(MmlParser.NE6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public E6SubloopEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_e6SubloopEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterE6SubloopEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitE6SubloopEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitE6SubloopEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public E6SubloopEndContext e6SubloopEnd() {
		E6SubloopEndContext _localctx = new E6SubloopEndContext(Context, State);
		EnterRule(_localctx, 158, RULE_e6SubloopEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			Match(NE6);
			State = 699;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class E7VolumeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE7() { return GetToken(MmlParser.NE7, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public E7VolumeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_e7Volume; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterE7Volume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitE7Volume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitE7Volume(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public E7VolumeContext e7Volume() {
		E7VolumeContext _localctx = new E7VolumeContext(Context, State);
		EnterRule(_localctx, 160, RULE_e7Volume);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701;
			Match(NE7);
			State = 702;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class E8VolumeFadeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE8() { return GetToken(MmlParser.NE8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public E8VolumeFadeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_e8VolumeFade; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterE8VolumeFade(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitE8VolumeFade(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitE8VolumeFade(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public E8VolumeFadeContext e8VolumeFade() {
		E8VolumeFadeContext _localctx = new E8VolumeFadeContext(Context, State);
		EnterRule(_localctx, 162, RULE_e8VolumeFade);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 704;
			Match(NE8);
			State = 705;
			hexNumber();
			State = 706;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbPitchEnvelopeReleaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEB() { return GetToken(MmlParser.NEB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public EbPitchEnvelopeReleaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebPitchEnvelopeRelease; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterEbPitchEnvelopeRelease(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitEbPitchEnvelopeRelease(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEbPitchEnvelopeRelease(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EbPitchEnvelopeReleaseContext ebPitchEnvelopeRelease() {
		EbPitchEnvelopeReleaseContext _localctx = new EbPitchEnvelopeReleaseContext(Context, State);
		EnterRule(_localctx, 164, RULE_ebPitchEnvelopeRelease);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708;
			Match(NEB);
			State = 709;
			hexNumber();
			State = 710;
			hexNumber();
			State = 711;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EcPitchEnvelopeAttackContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEC() { return GetToken(MmlParser.NEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public EcPitchEnvelopeAttackContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ecPitchEnvelopeAttack; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterEcPitchEnvelopeAttack(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitEcPitchEnvelopeAttack(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEcPitchEnvelopeAttack(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EcPitchEnvelopeAttackContext ecPitchEnvelopeAttack() {
		EcPitchEnvelopeAttackContext _localctx = new EcPitchEnvelopeAttackContext(Context, State);
		EnterRule(_localctx, 166, RULE_ecPitchEnvelopeAttack);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			Match(NEC);
			State = 714;
			hexNumber();
			State = 715;
			hexNumber();
			State = 716;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdCustomADSROrGainContext : ParserRuleContext {
		public EdCustomADSROrGainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edCustomADSROrGain; } }
	 
		public EdCustomADSROrGainContext() { }
		public virtual void CopyFrom(EdCustomADSROrGainContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EDCustomASDRContext : EdCustomADSROrGainContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NED() { return GetToken(MmlParser.NED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public EDCustomASDRContext(EdCustomADSROrGainContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterEDCustomASDR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitEDCustomASDR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEDCustomASDR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EDCustomGAINContext : EdCustomADSROrGainContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NED() { return GetToken(MmlParser.NED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N80() { return GetToken(MmlParser.N80, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public EDCustomGAINContext(EdCustomADSROrGainContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterEDCustomGAIN(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitEDCustomGAIN(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEDCustomGAIN(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdCustomADSROrGainContext edCustomADSROrGain() {
		EdCustomADSROrGainContext _localctx = new EdCustomADSROrGainContext(Context, State);
		EnterRule(_localctx, 168, RULE_edCustomADSROrGain);
		try {
			State = 725;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				_localctx = new EDCustomGAINContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 718;
				Match(NED);
				State = 719;
				Match(N80);
				State = 720;
				hexNumber();
				}
				break;
			case 2:
				_localctx = new EDCustomASDRContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 721;
				Match(NED);
				State = 722;
				hexNumber();
				State = 723;
				hexNumber();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EeTuneChannelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEE() { return GetToken(MmlParser.NEE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public EeTuneChannelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eeTuneChannel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterEeTuneChannel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitEeTuneChannel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEeTuneChannel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EeTuneChannelContext eeTuneChannel() {
		EeTuneChannelContext _localctx = new EeTuneChannelContext(Context, State);
		EnterRule(_localctx, 170, RULE_eeTuneChannel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 727;
			Match(NEE);
			State = 728;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EfEcho1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEF() { return GetToken(MmlParser.NEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public EfEcho1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_efEcho1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterEfEcho1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitEfEcho1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEfEcho1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EfEcho1Context efEcho1() {
		EfEcho1Context _localctx = new EfEcho1Context(Context, State);
		EnterRule(_localctx, 172, RULE_efEcho1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 730;
			Match(NEF);
			State = 731;
			hexNumber();
			State = 732;
			hexNumber();
			State = 733;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F0EchoOffContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF0() { return GetToken(MmlParser.NF0, 0); }
		public F0EchoOffContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f0EchoOff; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterF0EchoOff(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitF0EchoOff(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF0EchoOff(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F0EchoOffContext f0EchoOff() {
		F0EchoOffContext _localctx = new F0EchoOffContext(Context, State);
		EnterRule(_localctx, 174, RULE_f0EchoOff);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735;
			Match(NF0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F1Echo2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF1() { return GetToken(MmlParser.NF1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public F1Echo2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f1Echo2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterF1Echo2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitF1Echo2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF1Echo2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F1Echo2Context f1Echo2() {
		F1Echo2Context _localctx = new F1Echo2Context(Context, State);
		EnterRule(_localctx, 176, RULE_f1Echo2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737;
			Match(NF1);
			State = 738;
			hexNumber();
			State = 739;
			hexNumber();
			State = 740;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F2EchoFadeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF2() { return GetToken(MmlParser.NF2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public F2EchoFadeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f2EchoFade; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterF2EchoFade(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitF2EchoFade(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF2EchoFade(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F2EchoFadeContext f2EchoFade() {
		F2EchoFadeContext _localctx = new F2EchoFadeContext(Context, State);
		EnterRule(_localctx, 178, RULE_f2EchoFade);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 742;
			Match(NF2);
			State = 743;
			hexNumber();
			State = 744;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F3SampleLoadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF3() { return GetToken(MmlParser.NF3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public F3SampleLoadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f3SampleLoad; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterF3SampleLoad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitF3SampleLoad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF3SampleLoad(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F3SampleLoadContext f3SampleLoad() {
		F3SampleLoadContext _localctx = new F3SampleLoadContext(Context, State);
		EnterRule(_localctx, 180, RULE_f3SampleLoad);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 746;
			Match(NF3);
			State = 747;
			hexNumber();
			State = 748;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F4GlobalItemsContext : ParserRuleContext {
		public F4GlobalItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f4GlobalItems; } }
	 
		public F4GlobalItemsContext() { }
		public virtual void CopyFrom(F4GlobalItemsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class F4LightStaccatoContext : F4GlobalItemsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF4() { return GetToken(MmlParser.NF4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N02() { return GetToken(MmlParser.N02, 0); }
		public F4LightStaccatoContext(F4GlobalItemsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterF4LightStaccato(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitF4LightStaccato(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF4LightStaccato(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class F4EnableYoshiDrumsChannel5Context : F4GlobalItemsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF4() { return GetToken(MmlParser.NF4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N00() { return GetToken(MmlParser.N00, 0); }
		public F4EnableYoshiDrumsChannel5Context(F4GlobalItemsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterF4EnableYoshiDrumsChannel5(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitF4EnableYoshiDrumsChannel5(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF4EnableYoshiDrumsChannel5(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class F4NSPCVelocityTableContext : F4GlobalItemsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF4() { return GetToken(MmlParser.NF4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N08() { return GetToken(MmlParser.N08, 0); }
		public F4NSPCVelocityTableContext(F4GlobalItemsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterF4NSPCVelocityTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitF4NSPCVelocityTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF4NSPCVelocityTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class F4SNESSyncContext : F4GlobalItemsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF4() { return GetToken(MmlParser.NF4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N05() { return GetToken(MmlParser.N05, 0); }
		public F4SNESSyncContext(F4GlobalItemsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterF4SNESSync(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitF4SNESSync(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF4SNESSync(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class F4TempoHikeOffContext : F4GlobalItemsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF4() { return GetToken(MmlParser.NF4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N07() { return GetToken(MmlParser.N07, 0); }
		public F4TempoHikeOffContext(F4GlobalItemsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterF4TempoHikeOff(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitF4TempoHikeOff(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF4TempoHikeOff(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class F4ToggleLegatoContext : F4GlobalItemsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF4() { return GetToken(MmlParser.NF4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N01() { return GetToken(MmlParser.N01, 0); }
		public F4ToggleLegatoContext(F4GlobalItemsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterF4ToggleLegato(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitF4ToggleLegato(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF4ToggleLegato(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class F4EnableYoshiDrumsContext : F4GlobalItemsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF4() { return GetToken(MmlParser.NF4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N06() { return GetToken(MmlParser.N06, 0); }
		public F4EnableYoshiDrumsContext(F4GlobalItemsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterF4EnableYoshiDrums(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitF4EnableYoshiDrums(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF4EnableYoshiDrums(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F4GlobalItemsContext f4GlobalItems() {
		F4GlobalItemsContext _localctx = new F4GlobalItemsContext(Context, State);
		EnterRule(_localctx, 182, RULE_f4GlobalItems);
		try {
			State = 764;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				_localctx = new F4EnableYoshiDrumsChannel5Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 750;
				Match(NF4);
				State = 751;
				Match(N00);
				}
				break;
			case 2:
				_localctx = new F4ToggleLegatoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 752;
				Match(NF4);
				State = 753;
				Match(N01);
				}
				break;
			case 3:
				_localctx = new F4LightStaccatoContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 754;
				Match(NF4);
				State = 755;
				Match(N02);
				}
				break;
			case 4:
				_localctx = new F4SNESSyncContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 756;
				Match(NF4);
				State = 757;
				Match(N05);
				}
				break;
			case 5:
				_localctx = new F4EnableYoshiDrumsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 758;
				Match(NF4);
				State = 759;
				Match(N06);
				}
				break;
			case 6:
				_localctx = new F4TempoHikeOffContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 760;
				Match(NF4);
				State = 761;
				Match(N07);
				}
				break;
			case 7:
				_localctx = new F4NSPCVelocityTableContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 762;
				Match(NF4);
				State = 763;
				Match(N08);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F4ChannelItemsContext : ParserRuleContext {
		public F4ChannelItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f4ChannelItems; } }
	 
		public F4ChannelItemsContext() { }
		public virtual void CopyFrom(F4ChannelItemsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class F4RestoreInstrumentContext : F4ChannelItemsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF4() { return GetToken(MmlParser.NF4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N09() { return GetToken(MmlParser.N09, 0); }
		public F4RestoreInstrumentContext(F4ChannelItemsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterF4RestoreInstrument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitF4RestoreInstrument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF4RestoreInstrument(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class F4EchoToggleContext : F4ChannelItemsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF4() { return GetToken(MmlParser.NF4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N03() { return GetToken(MmlParser.N03, 0); }
		public F4EchoToggleContext(F4ChannelItemsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterF4EchoToggle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitF4EchoToggle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF4EchoToggle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F4ChannelItemsContext f4ChannelItems() {
		F4ChannelItemsContext _localctx = new F4ChannelItemsContext(Context, State);
		EnterRule(_localctx, 184, RULE_f4ChannelItems);
		try {
			State = 770;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				_localctx = new F4EchoToggleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 766;
				Match(NF4);
				State = 767;
				Match(N03);
				}
				break;
			case 2:
				_localctx = new F4RestoreInstrumentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 768;
				Match(NF4);
				State = 769;
				Match(N09);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F5FIRFilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF5() { return GetToken(MmlParser.NF5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public F5FIRFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f5FIRFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterF5FIRFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitF5FIRFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF5FIRFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F5FIRFilterContext f5FIRFilter() {
		F5FIRFilterContext _localctx = new F5FIRFilterContext(Context, State);
		EnterRule(_localctx, 186, RULE_f5FIRFilter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772;
			Match(NF5);
			State = 773;
			hexNumber();
			State = 774;
			hexNumber();
			State = 775;
			hexNumber();
			State = 776;
			hexNumber();
			State = 777;
			hexNumber();
			State = 778;
			hexNumber();
			State = 779;
			hexNumber();
			State = 780;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F6DSPWriteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF6() { return GetToken(MmlParser.NF6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public F6DSPWriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f6DSPWrite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterF6DSPWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitF6DSPWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF6DSPWrite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F6DSPWriteContext f6DSPWrite() {
		F6DSPWriteContext _localctx = new F6DSPWriteContext(Context, State);
		EnterRule(_localctx, 188, RULE_f6DSPWrite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 782;
			Match(NF6);
			State = 783;
			hexNumber();
			State = 784;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F8EnableNoiseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF8() { return GetToken(MmlParser.NF8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public F8EnableNoiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f8EnableNoise; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterF8EnableNoise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitF8EnableNoise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF8EnableNoise(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F8EnableNoiseContext f8EnableNoise() {
		F8EnableNoiseContext _localctx = new F8EnableNoiseContext(Context, State);
		EnterRule(_localctx, 190, RULE_f8EnableNoise);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 786;
			Match(NF8);
			State = 787;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F9DataSendContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF9() { return GetToken(MmlParser.NF9, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public F9DataSendContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f9DataSend; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterF9DataSend(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitF9DataSend(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF9DataSend(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F9DataSendContext f9DataSend() {
		F9DataSendContext _localctx = new F9DataSendContext(Context, State);
		EnterRule(_localctx, 192, RULE_f9DataSend);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789;
			Match(NF9);
			State = 790;
			hexNumber();
			State = 791;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FaChannelItemsContext : ParserRuleContext {
		public FaChannelItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_faChannelItems; } }
	 
		public FaChannelItemsContext() { }
		public virtual void CopyFrom(FaChannelItemsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FACurrentChannelGainContext : FaChannelItemsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFA() { return GetToken(MmlParser.NFA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N01() { return GetToken(MmlParser.N01, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public FACurrentChannelGainContext(FaChannelItemsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterFACurrentChannelGain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitFACurrentChannelGain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFACurrentChannelGain(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FAPitchModulationContext : FaChannelItemsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFA() { return GetToken(MmlParser.NFA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N00() { return GetToken(MmlParser.N00, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public FAPitchModulationContext(FaChannelItemsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterFAPitchModulation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitFAPitchModulation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFAPitchModulation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FASemitoneTuneContext : FaChannelItemsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFA() { return GetToken(MmlParser.NFA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N02() { return GetToken(MmlParser.N02, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public FASemitoneTuneContext(FaChannelItemsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterFASemitoneTune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitFASemitoneTune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFASemitoneTune(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FAAmplifyContext : FaChannelItemsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFA() { return GetToken(MmlParser.NFA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N03() { return GetToken(MmlParser.N03, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public FAAmplifyContext(FaChannelItemsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterFAAmplify(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitFAAmplify(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFAAmplify(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FaChannelItemsContext faChannelItems() {
		FaChannelItemsContext _localctx = new FaChannelItemsContext(Context, State);
		EnterRule(_localctx, 194, RULE_faChannelItems);
		try {
			State = 805;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				_localctx = new FAPitchModulationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 793;
				Match(NFA);
				State = 794;
				Match(N00);
				State = 795;
				hexNumber();
				}
				break;
			case 2:
				_localctx = new FACurrentChannelGainContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 796;
				Match(NFA);
				State = 797;
				Match(N01);
				State = 798;
				hexNumber();
				}
				break;
			case 3:
				_localctx = new FASemitoneTuneContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 799;
				Match(NFA);
				State = 800;
				Match(N02);
				State = 801;
				hexNumber();
				}
				break;
			case 4:
				_localctx = new FAAmplifyContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 802;
				Match(NFA);
				State = 803;
				Match(N03);
				State = 804;
				hexNumber();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FaGlobalItemsContext : ParserRuleContext {
		public FaGlobalItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_faGlobalItems; } }
	 
		public FaGlobalItemsContext() { }
		public virtual void CopyFrom(FaGlobalItemsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FAEchoBufferReserveContext : FaGlobalItemsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFA() { return GetToken(MmlParser.NFA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N04() { return GetToken(MmlParser.N04, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public FAEchoBufferReserveContext(FaGlobalItemsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterFAEchoBufferReserve(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitFAEchoBufferReserve(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFAEchoBufferReserve(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FAHotPatchPresetContext : FaGlobalItemsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFA() { return GetToken(MmlParser.NFA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N7F() { return GetToken(MmlParser.N7F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public FAHotPatchPresetContext(FaGlobalItemsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterFAHotPatchPreset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitFAHotPatchPreset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFAHotPatchPreset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FAHotPatchToggleBitsContext : FaGlobalItemsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFA() { return GetToken(MmlParser.NFA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFE() { return GetToken(MmlParser.NFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public FAHotPatchToggleBitsContext(FaGlobalItemsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterFAHotPatchToggleBits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitFAHotPatchToggleBits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFAHotPatchToggleBits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FaGlobalItemsContext faGlobalItems() {
		FaGlobalItemsContext _localctx = new FaGlobalItemsContext(Context, State);
		EnterRule(_localctx, 196, RULE_faGlobalItems);
		try {
			int _alt;
			State = 822;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				_localctx = new FAEchoBufferReserveContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 807;
				Match(NFA);
				State = 808;
				Match(N04);
				State = 809;
				hexNumber();
				}
				break;
			case 2:
				_localctx = new FAHotPatchPresetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 810;
				Match(NFA);
				State = 811;
				Match(N7F);
				State = 812;
				hexNumber();
				}
				break;
			case 3:
				_localctx = new FAHotPatchToggleBitsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 813;
				Match(NFA);
				State = 814;
				Match(NFE);
				State = 815;
				hexNumber();
				State = 819;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 816;
						hexNumber();
						}
						} 
					}
					State = 821;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbItemsContext : ParserRuleContext {
		public FbItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbItems; } }
	 
		public FbItemsContext() { }
		public virtual void CopyFrom(FbItemsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FBEnableArgeggioContext : FbItemsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFB() { return GetToken(MmlParser.NFB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public FBEnableArgeggioContext(FbItemsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterFBEnableArgeggio(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitFBEnableArgeggio(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFBEnableArgeggio(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FBTrillContext : FbItemsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFB() { return GetToken(MmlParser.NFB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N80() { return GetToken(MmlParser.N80, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public FBTrillContext(FbItemsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterFBTrill(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitFBTrill(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFBTrill(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FBGlissandoContext : FbItemsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFB() { return GetToken(MmlParser.NFB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N81() { return GetToken(MmlParser.N81, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public FBGlissandoContext(FbItemsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterFBGlissando(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitFBGlissando(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFBGlissando(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbItemsContext fbItems() {
		FbItemsContext _localctx = new FbItemsContext(Context, State);
		EnterRule(_localctx, 198, RULE_fbItems);
		try {
			State = 838;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				_localctx = new FBTrillContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 824;
				Match(NFB);
				State = 825;
				Match(N80);
				State = 826;
				hexNumber();
				State = 827;
				hexNumber();
				}
				break;
			case 2:
				_localctx = new FBGlissandoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 829;
				Match(NFB);
				State = 830;
				Match(N81);
				State = 831;
				hexNumber();
				State = 832;
				hexNumber();
				}
				break;
			case 3:
				_localctx = new FBEnableArgeggioContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 834;
				Match(NFB);
				State = 835;
				hexNumber();
				State = 836;
				hexNumber();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FcItemsContext : ParserRuleContext {
		public FcItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fcItems; } }
	 
		public FcItemsContext() { }
		public virtual void CopyFrom(FcItemsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FCHexRemoteCommandContext : FcItemsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFC() { return GetToken(MmlParser.NFC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		public FCHexRemoteCommandContext(FcItemsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterFCHexRemoteCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitFCHexRemoteCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFCHexRemoteCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FCHexRemoteGainContext : FcItemsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFC() { return GetToken(MmlParser.NFC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N01() { return GetToken(MmlParser.N01, 0); }
		public FCHexRemoteGainContext(FcItemsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterFCHexRemoteGain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitFCHexRemoteGain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFCHexRemoteGain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FcItemsContext fcItems() {
		FcItemsContext _localctx = new FcItemsContext(Context, State);
		EnterRule(_localctx, 200, RULE_fcItems);
		try {
			State = 852;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				_localctx = new FCHexRemoteGainContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 840;
				Match(NFC);
				State = 841;
				hexNumber();
				State = 842;
				Match(N01);
				State = 843;
				hexNumber();
				State = 844;
				hexNumber();
				}
				break;
			case 2:
				_localctx = new FCHexRemoteCommandContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 846;
				Match(NFC);
				State = 847;
				hexNumber();
				State = 848;
				hexNumber();
				State = 849;
				hexNumber();
				State = 850;
				hexNumber();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FdTremoloOffContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFD() { return GetToken(MmlParser.NFD, 0); }
		public FdTremoloOffContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fdTremoloOff; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterFdTremoloOff(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitFdTremoloOff(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFdTremoloOff(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FdTremoloOffContext fdTremoloOff() {
		FdTremoloOffContext _localctx = new FdTremoloOffContext(Context, State);
		EnterRule(_localctx, 202, RULE_fdTremoloOff);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 854;
			Match(NFD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FePitchEnvelopeOffContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFE() { return GetToken(MmlParser.NFE, 0); }
		public FePitchEnvelopeOffContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fePitchEnvelopeOff; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterFePitchEnvelopeOff(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitFePitchEnvelopeOff(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFePitchEnvelopeOff(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FePitchEnvelopeOffContext fePitchEnvelopeOff() {
		FePitchEnvelopeOffContext _localctx = new FePitchEnvelopeOffContext(Context, State);
		EnterRule(_localctx, 204, RULE_fePitchEnvelopeOff);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 856;
			Match(NFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N00() { return GetToken(MmlParser.N00, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N01() { return GetToken(MmlParser.N01, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N02() { return GetToken(MmlParser.N02, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N03() { return GetToken(MmlParser.N03, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N04() { return GetToken(MmlParser.N04, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N05() { return GetToken(MmlParser.N05, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N06() { return GetToken(MmlParser.N06, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N07() { return GetToken(MmlParser.N07, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N08() { return GetToken(MmlParser.N08, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N09() { return GetToken(MmlParser.N09, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N7F() { return GetToken(MmlParser.N7F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N80() { return GetToken(MmlParser.N80, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode N81() { return GetToken(MmlParser.N81, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFE() { return GetToken(MmlParser.NFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDA() { return GetToken(MmlParser.NDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDB() { return GetToken(MmlParser.NDB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDC() { return GetToken(MmlParser.NDC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDD() { return GetToken(MmlParser.NDD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDE() { return GetToken(MmlParser.NDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDF() { return GetToken(MmlParser.NDF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE0() { return GetToken(MmlParser.NE0, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE1() { return GetToken(MmlParser.NE1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE2() { return GetToken(MmlParser.NE2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE3() { return GetToken(MmlParser.NE3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE4() { return GetToken(MmlParser.NE4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE5() { return GetToken(MmlParser.NE5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE6() { return GetToken(MmlParser.NE6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE7() { return GetToken(MmlParser.NE7, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE8() { return GetToken(MmlParser.NE8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE9() { return GetToken(MmlParser.NE9, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEA() { return GetToken(MmlParser.NEA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEB() { return GetToken(MmlParser.NEB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEC() { return GetToken(MmlParser.NEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NED() { return GetToken(MmlParser.NED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEE() { return GetToken(MmlParser.NEE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEF() { return GetToken(MmlParser.NEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF0() { return GetToken(MmlParser.NF0, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF1() { return GetToken(MmlParser.NF1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF2() { return GetToken(MmlParser.NF2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF3() { return GetToken(MmlParser.NF3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF4() { return GetToken(MmlParser.NF4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF5() { return GetToken(MmlParser.NF5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF6() { return GetToken(MmlParser.NF6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF7() { return GetToken(MmlParser.NF7, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF8() { return GetToken(MmlParser.NF8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NF9() { return GetToken(MmlParser.NF9, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFA() { return GetToken(MmlParser.NFA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFB() { return GetToken(MmlParser.NFB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFC() { return GetToken(MmlParser.NFC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFD() { return GetToken(MmlParser.NFD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber() { return GetToken(MmlParser.HexNumber, 0); }
		public HexNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterHexNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitHexNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HexNumberContext hexNumber() {
		HexNumberContext _localctx = new HexNumberContext(Context, State);
		EnterRule(_localctx, 206, RULE_hexNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 858;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 10133099161583615L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,133,861,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,1,0,4,0,210,
		8,0,11,0,12,0,211,1,0,3,0,215,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,3,1,231,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,241,
		8,2,1,3,1,3,1,3,1,3,1,3,1,4,5,4,249,8,4,10,4,12,4,252,9,4,1,4,5,4,255,
		8,4,10,4,12,4,258,9,4,1,5,1,5,1,5,5,5,263,8,5,10,5,12,5,266,9,5,1,5,1,
		5,1,6,1,6,4,6,272,8,6,11,6,12,6,273,1,6,1,6,4,6,278,8,6,11,6,12,6,279,
		1,6,1,6,4,6,284,8,6,11,6,12,6,285,3,6,288,8,6,1,7,1,7,1,7,5,7,293,8,7,
		10,7,12,7,296,9,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,
		310,8,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,5,12,
		324,8,12,10,12,12,12,327,9,12,1,12,1,12,1,12,3,12,332,8,12,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,344,8,13,1,14,1,14,1,14,1,14,
		3,14,350,8,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,5,18,360,8,18,10,
		18,12,18,363,9,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,3,20,372,8,20,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,3,21,392,8,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,
		26,1,26,1,27,1,27,1,28,1,28,1,28,3,28,409,8,28,3,28,411,8,28,1,29,1,29,
		3,29,415,8,29,1,30,1,30,1,31,1,31,1,31,3,31,422,8,31,3,31,424,8,31,1,32,
		1,32,3,32,428,8,32,1,33,1,33,1,33,4,33,433,8,33,11,33,12,33,434,1,34,1,
		34,1,34,3,34,440,8,34,1,34,1,34,3,34,444,8,34,1,34,1,34,3,34,448,8,34,
		1,34,1,34,1,35,1,35,1,36,1,36,1,36,3,36,457,8,36,3,36,459,8,36,1,37,1,
		37,1,37,3,37,464,8,37,3,37,466,8,37,1,38,1,38,3,38,470,8,38,1,39,1,39,
		1,40,1,40,1,41,1,41,3,41,478,8,41,1,42,1,42,3,42,482,8,42,1,43,1,43,3,
		43,486,8,43,1,44,1,44,1,44,3,44,491,8,44,1,45,1,45,5,45,495,8,45,10,45,
		12,45,498,9,45,1,45,1,45,3,45,502,8,45,1,46,1,46,1,46,1,46,3,46,508,8,
		46,1,47,3,47,511,8,47,1,47,1,47,5,47,515,8,47,10,47,12,47,518,9,47,1,47,
		1,47,3,47,522,8,47,1,48,1,48,1,48,1,48,3,48,528,8,48,1,49,1,49,5,49,532,
		8,49,10,49,12,49,535,9,49,1,49,1,49,3,49,539,8,49,1,50,1,50,1,50,3,50,
		544,8,50,1,51,3,51,547,8,51,1,51,1,51,5,51,551,8,51,10,51,12,51,554,9,
		51,1,51,1,51,3,51,558,8,51,1,52,1,52,1,52,3,52,563,8,52,1,53,1,53,1,53,
		4,53,568,8,53,11,53,12,53,569,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,
		1,54,1,54,1,54,1,54,3,54,584,8,54,1,55,1,55,3,55,588,8,55,1,56,1,56,1,
		57,1,57,1,58,1,58,3,58,596,8,58,1,59,1,59,1,60,1,60,3,60,602,8,60,1,61,
		1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,616,8,62,1,
		63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,
		63,1,63,1,63,1,63,3,63,636,8,63,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,
		1,66,1,66,1,67,1,67,1,67,1,67,3,67,652,8,67,1,68,1,68,1,68,5,68,657,8,
		68,10,68,12,68,660,9,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,
		70,1,71,1,71,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,75,1,
		75,1,75,1,75,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,
		79,1,79,1,79,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,
		82,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,726,
		8,84,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,88,1,88,1,88,
		1,88,1,88,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,
		1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,765,8,91,1,92,1,
		92,1,92,1,92,3,92,771,8,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
		1,93,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,96,1,96,1,96,1,96,1,97,1,97,
		1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,806,8,97,1,98,1,
		98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,5,98,818,8,98,10,98,12,98,821,
		9,98,3,98,823,8,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,
		99,1,99,1,99,1,99,3,99,839,8,99,1,100,1,100,1,100,1,100,1,100,1,100,1,
		100,1,100,1,100,1,100,1,100,1,100,3,100,853,8,100,1,101,1,101,1,102,1,
		102,1,103,1,103,1,103,0,0,104,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
		78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
		120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
		156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
		192,194,196,198,200,202,204,206,0,3,2,0,53,53,128,128,1,0,32,33,2,0,78,
		127,131,131,924,0,214,1,0,0,0,2,230,1,0,0,0,4,240,1,0,0,0,6,242,1,0,0,
		0,8,250,1,0,0,0,10,259,1,0,0,0,12,287,1,0,0,0,14,289,1,0,0,0,16,309,1,
		0,0,0,18,311,1,0,0,0,20,314,1,0,0,0,22,317,1,0,0,0,24,331,1,0,0,0,26,343,
		1,0,0,0,28,349,1,0,0,0,30,351,1,0,0,0,32,353,1,0,0,0,34,355,1,0,0,0,36,
		357,1,0,0,0,38,364,1,0,0,0,40,371,1,0,0,0,42,391,1,0,0,0,44,393,1,0,0,
		0,46,395,1,0,0,0,48,397,1,0,0,0,50,399,1,0,0,0,52,401,1,0,0,0,54,403,1,
		0,0,0,56,410,1,0,0,0,58,414,1,0,0,0,60,416,1,0,0,0,62,423,1,0,0,0,64,427,
		1,0,0,0,66,429,1,0,0,0,68,436,1,0,0,0,70,451,1,0,0,0,72,458,1,0,0,0,74,
		465,1,0,0,0,76,469,1,0,0,0,78,471,1,0,0,0,80,473,1,0,0,0,82,477,1,0,0,
		0,84,481,1,0,0,0,86,485,1,0,0,0,88,490,1,0,0,0,90,492,1,0,0,0,92,507,1,
		0,0,0,94,510,1,0,0,0,96,527,1,0,0,0,98,529,1,0,0,0,100,543,1,0,0,0,102,
		546,1,0,0,0,104,562,1,0,0,0,106,564,1,0,0,0,108,583,1,0,0,0,110,585,1,
		0,0,0,112,589,1,0,0,0,114,591,1,0,0,0,116,593,1,0,0,0,118,597,1,0,0,0,
		120,601,1,0,0,0,122,603,1,0,0,0,124,615,1,0,0,0,126,635,1,0,0,0,128,637,
		1,0,0,0,130,640,1,0,0,0,132,643,1,0,0,0,134,647,1,0,0,0,136,658,1,0,0,
		0,138,663,1,0,0,0,140,668,1,0,0,0,142,671,1,0,0,0,144,673,1,0,0,0,146,
		676,1,0,0,0,148,680,1,0,0,0,150,683,1,0,0,0,152,687,1,0,0,0,154,690,1,
		0,0,0,156,695,1,0,0,0,158,698,1,0,0,0,160,701,1,0,0,0,162,704,1,0,0,0,
		164,708,1,0,0,0,166,713,1,0,0,0,168,725,1,0,0,0,170,727,1,0,0,0,172,730,
		1,0,0,0,174,735,1,0,0,0,176,737,1,0,0,0,178,742,1,0,0,0,180,746,1,0,0,
		0,182,764,1,0,0,0,184,770,1,0,0,0,186,772,1,0,0,0,188,782,1,0,0,0,190,
		786,1,0,0,0,192,789,1,0,0,0,194,805,1,0,0,0,196,822,1,0,0,0,198,838,1,
		0,0,0,200,852,1,0,0,0,202,854,1,0,0,0,204,856,1,0,0,0,206,858,1,0,0,0,
		208,210,3,2,1,0,209,208,1,0,0,0,210,211,1,0,0,0,211,209,1,0,0,0,211,212,
		1,0,0,0,212,215,1,0,0,0,213,215,5,0,0,1,214,209,1,0,0,0,214,213,1,0,0,
		0,215,1,1,0,0,0,216,231,3,4,2,0,217,231,3,36,18,0,218,231,3,106,53,0,219,
		231,3,70,35,0,220,231,3,72,36,0,221,231,3,74,37,0,222,231,3,122,61,0,223,
		231,3,118,59,0,224,231,5,30,0,0,225,231,3,124,62,0,226,231,3,206,103,0,
		227,231,3,38,19,0,228,231,3,106,53,0,229,231,3,80,40,0,230,216,1,0,0,0,
		230,217,1,0,0,0,230,218,1,0,0,0,230,219,1,0,0,0,230,220,1,0,0,0,230,221,
		1,0,0,0,230,222,1,0,0,0,230,223,1,0,0,0,230,224,1,0,0,0,230,225,1,0,0,
		0,230,226,1,0,0,0,230,227,1,0,0,0,230,228,1,0,0,0,230,229,1,0,0,0,231,
		3,1,0,0,0,232,241,3,28,14,0,233,241,3,14,7,0,234,241,3,6,3,0,235,241,3,
		10,5,0,236,241,3,20,10,0,237,241,3,18,9,0,238,241,3,22,11,0,239,241,3,
		24,12,0,240,232,1,0,0,0,240,233,1,0,0,0,240,234,1,0,0,0,240,235,1,0,0,
		0,240,236,1,0,0,0,240,237,1,0,0,0,240,238,1,0,0,0,240,239,1,0,0,0,241,
		5,1,0,0,0,242,243,5,57,0,0,243,244,5,8,0,0,244,245,3,8,4,0,245,246,5,9,
		0,0,246,7,1,0,0,0,247,249,5,77,0,0,248,247,1,0,0,0,249,252,1,0,0,0,250,
		248,1,0,0,0,250,251,1,0,0,0,251,256,1,0,0,0,252,250,1,0,0,0,253,255,5,
		30,0,0,254,253,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,
		257,9,1,0,0,0,258,256,1,0,0,0,259,260,5,58,0,0,260,264,5,8,0,0,261,263,
		3,12,6,0,262,261,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,
		0,265,267,1,0,0,0,266,264,1,0,0,0,267,268,5,9,0,0,268,11,1,0,0,0,269,271,
		5,30,0,0,270,272,3,206,103,0,271,270,1,0,0,0,272,273,1,0,0,0,273,271,1,
		0,0,0,273,274,1,0,0,0,274,288,1,0,0,0,275,277,3,76,38,0,276,278,3,206,
		103,0,277,276,1,0,0,0,278,279,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,
		280,288,1,0,0,0,281,283,3,54,27,0,282,284,3,206,103,0,283,282,1,0,0,0,
		284,285,1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,288,1,0,0,0,287,269,
		1,0,0,0,287,275,1,0,0,0,287,281,1,0,0,0,288,13,1,0,0,0,289,290,5,59,0,
		0,290,294,5,8,0,0,291,293,3,16,8,0,292,291,1,0,0,0,293,296,1,0,0,0,294,
		292,1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,296,294,1,0,0,0,297,298,5,
		9,0,0,298,15,1,0,0,0,299,300,5,60,0,0,300,310,5,30,0,0,301,302,5,61,0,
		0,302,310,5,30,0,0,303,304,5,62,0,0,304,310,5,30,0,0,305,306,5,63,0,0,
		306,310,5,30,0,0,307,308,5,64,0,0,308,310,5,30,0,0,309,299,1,0,0,0,309,
		301,1,0,0,0,309,303,1,0,0,0,309,305,1,0,0,0,309,307,1,0,0,0,310,17,1,0,
		0,0,311,312,5,65,0,0,312,313,3,206,103,0,313,19,1,0,0,0,314,315,5,66,0,
		0,315,316,5,30,0,0,316,21,1,0,0,0,317,318,5,67,0,0,318,23,1,0,0,0,319,
		320,5,68,0,0,320,325,5,8,0,0,321,322,5,1,0,0,322,324,3,26,13,0,323,321,
		1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,328,1,0,0,
		0,327,325,1,0,0,0,328,332,5,9,0,0,329,330,5,68,0,0,330,332,3,26,13,0,331,
		319,1,0,0,0,331,329,1,0,0,0,332,25,1,0,0,0,333,344,5,70,0,0,334,335,5,
		71,0,0,335,344,5,128,0,0,336,344,5,72,0,0,337,344,5,73,0,0,338,344,5,74,
		0,0,339,344,5,75,0,0,340,341,5,30,0,0,341,344,5,128,0,0,342,344,5,30,0,
		0,343,333,1,0,0,0,343,334,1,0,0,0,343,336,1,0,0,0,343,337,1,0,0,0,343,
		338,1,0,0,0,343,339,1,0,0,0,343,340,1,0,0,0,343,342,1,0,0,0,344,27,1,0,
		0,0,345,346,5,54,0,0,346,350,3,34,17,0,347,350,3,30,15,0,348,350,3,32,
		16,0,349,345,1,0,0,0,349,347,1,0,0,0,349,348,1,0,0,0,350,29,1,0,0,0,351,
		352,5,55,0,0,352,31,1,0,0,0,353,354,5,56,0,0,354,33,1,0,0,0,355,356,7,
		0,0,0,356,35,1,0,0,0,357,361,5,76,0,0,358,360,3,40,20,0,359,358,1,0,0,
		0,360,363,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,37,1,0,0,0,363,361,
		1,0,0,0,364,365,5,25,0,0,365,39,1,0,0,0,366,372,3,42,21,0,367,372,3,82,
		41,0,368,372,3,120,60,0,369,372,3,126,63,0,370,372,3,206,103,0,371,366,
		1,0,0,0,371,367,1,0,0,0,371,368,1,0,0,0,371,369,1,0,0,0,371,370,1,0,0,
		0,372,41,1,0,0,0,373,392,3,66,33,0,374,392,3,44,22,0,375,392,3,46,23,0,
		376,392,3,48,24,0,377,392,3,50,25,0,378,392,3,52,26,0,379,392,3,54,27,
		0,380,392,3,68,34,0,381,392,3,56,28,0,382,392,3,58,29,0,383,392,3,76,38,
		0,384,392,3,60,30,0,385,392,3,62,31,0,386,392,3,64,32,0,387,392,3,74,37,
		0,388,392,3,38,19,0,389,392,3,78,39,0,390,392,3,80,40,0,391,373,1,0,0,
		0,391,374,1,0,0,0,391,375,1,0,0,0,391,376,1,0,0,0,391,377,1,0,0,0,391,
		378,1,0,0,0,391,379,1,0,0,0,391,380,1,0,0,0,391,381,1,0,0,0,391,382,1,
		0,0,0,391,383,1,0,0,0,391,384,1,0,0,0,391,385,1,0,0,0,391,386,1,0,0,0,
		391,387,1,0,0,0,391,388,1,0,0,0,391,389,1,0,0,0,391,390,1,0,0,0,392,43,
		1,0,0,0,393,394,5,32,0,0,394,45,1,0,0,0,395,396,5,33,0,0,396,47,1,0,0,
		0,397,398,5,34,0,0,398,49,1,0,0,0,399,400,5,23,0,0,400,51,1,0,0,0,401,
		402,5,22,0,0,402,53,1,0,0,0,403,404,5,35,0,0,404,55,1,0,0,0,405,411,5,
		37,0,0,406,409,3,160,80,0,407,409,3,162,81,0,408,406,1,0,0,0,408,407,1,
		0,0,0,409,411,1,0,0,0,410,405,1,0,0,0,410,408,1,0,0,0,411,57,1,0,0,0,412,
		415,5,38,0,0,413,415,3,170,85,0,414,412,1,0,0,0,414,413,1,0,0,0,415,59,
		1,0,0,0,416,417,5,40,0,0,417,61,1,0,0,0,418,424,5,42,0,0,419,422,3,130,
		65,0,420,422,3,132,66,0,421,419,1,0,0,0,421,420,1,0,0,0,422,424,1,0,0,
		0,423,418,1,0,0,0,423,421,1,0,0,0,424,63,1,0,0,0,425,428,5,43,0,0,426,
		428,3,138,69,0,427,425,1,0,0,0,427,426,1,0,0,0,428,65,1,0,0,0,429,432,
		7,1,0,0,430,431,5,4,0,0,431,433,7,1,0,0,432,430,1,0,0,0,433,434,1,0,0,
		0,434,432,1,0,0,0,434,435,1,0,0,0,435,67,1,0,0,0,436,439,5,8,0,0,437,440,
		3,44,22,0,438,440,3,46,23,0,439,437,1,0,0,0,439,438,1,0,0,0,440,443,1,
		0,0,0,441,444,3,44,22,0,442,444,3,46,23,0,443,441,1,0,0,0,443,442,1,0,
		0,0,444,447,1,0,0,0,445,448,3,44,22,0,446,448,3,46,23,0,447,445,1,0,0,
		0,447,446,1,0,0,0,448,449,1,0,0,0,449,450,5,9,0,0,450,69,1,0,0,0,451,452,
		5,39,0,0,452,71,1,0,0,0,453,459,5,41,0,0,454,457,3,144,72,0,455,457,3,
		146,73,0,456,454,1,0,0,0,456,455,1,0,0,0,457,459,1,0,0,0,458,453,1,0,0,
		0,458,456,1,0,0,0,459,73,1,0,0,0,460,466,5,36,0,0,461,464,3,148,74,0,462,
		464,3,150,75,0,463,461,1,0,0,0,463,462,1,0,0,0,464,466,1,0,0,0,465,460,
		1,0,0,0,465,463,1,0,0,0,466,75,1,0,0,0,467,470,5,46,0,0,468,470,3,128,
		64,0,469,467,1,0,0,0,469,468,1,0,0,0,470,77,1,0,0,0,471,472,5,44,0,0,472,
		79,1,0,0,0,473,474,5,45,0,0,474,81,1,0,0,0,475,478,3,84,42,0,476,478,3,
		86,43,0,477,475,1,0,0,0,477,476,1,0,0,0,478,83,1,0,0,0,479,482,3,90,45,
		0,480,482,3,94,47,0,481,479,1,0,0,0,481,480,1,0,0,0,482,85,1,0,0,0,483,
		486,3,110,55,0,484,486,3,88,44,0,485,483,1,0,0,0,485,484,1,0,0,0,486,87,
		1,0,0,0,487,491,3,112,56,0,488,491,3,116,58,0,489,491,3,114,57,0,490,487,
		1,0,0,0,490,488,1,0,0,0,490,489,1,0,0,0,491,89,1,0,0,0,492,496,5,14,0,
		0,493,495,3,92,46,0,494,493,1,0,0,0,495,498,1,0,0,0,496,494,1,0,0,0,496,
		497,1,0,0,0,497,499,1,0,0,0,498,496,1,0,0,0,499,501,5,15,0,0,500,502,5,
		128,0,0,501,500,1,0,0,0,501,502,1,0,0,0,502,91,1,0,0,0,503,508,3,42,21,
		0,504,508,3,102,51,0,505,508,3,86,43,0,506,508,3,206,103,0,507,503,1,0,
		0,0,507,504,1,0,0,0,507,505,1,0,0,0,507,506,1,0,0,0,508,93,1,0,0,0,509,
		511,5,47,0,0,510,509,1,0,0,0,510,511,1,0,0,0,511,512,1,0,0,0,512,516,5,
		12,0,0,513,515,3,96,48,0,514,513,1,0,0,0,515,518,1,0,0,0,516,514,1,0,0,
		0,516,517,1,0,0,0,517,519,1,0,0,0,518,516,1,0,0,0,519,521,5,13,0,0,520,
		522,5,128,0,0,521,520,1,0,0,0,521,522,1,0,0,0,522,95,1,0,0,0,523,528,3,
		42,21,0,524,528,3,98,49,0,525,528,3,88,44,0,526,528,3,206,103,0,527,523,
		1,0,0,0,527,524,1,0,0,0,527,525,1,0,0,0,527,526,1,0,0,0,528,97,1,0,0,0,
		529,533,5,14,0,0,530,532,3,100,50,0,531,530,1,0,0,0,532,535,1,0,0,0,533,
		531,1,0,0,0,533,534,1,0,0,0,534,536,1,0,0,0,535,533,1,0,0,0,536,538,5,
		15,0,0,537,539,5,128,0,0,538,537,1,0,0,0,538,539,1,0,0,0,539,99,1,0,0,
		0,540,544,3,42,21,0,541,544,3,86,43,0,542,544,3,206,103,0,543,540,1,0,
		0,0,543,541,1,0,0,0,543,542,1,0,0,0,544,101,1,0,0,0,545,547,5,47,0,0,546,
		545,1,0,0,0,546,547,1,0,0,0,547,548,1,0,0,0,548,552,5,12,0,0,549,551,3,
		104,52,0,550,549,1,0,0,0,551,554,1,0,0,0,552,550,1,0,0,0,552,553,1,0,0,
		0,553,555,1,0,0,0,554,552,1,0,0,0,555,557,5,13,0,0,556,558,5,128,0,0,557,
		556,1,0,0,0,557,558,1,0,0,0,558,103,1,0,0,0,559,563,3,42,21,0,560,563,
		3,88,44,0,561,563,3,206,103,0,562,559,1,0,0,0,562,560,1,0,0,0,562,561,
		1,0,0,0,563,105,1,0,0,0,564,565,5,48,0,0,565,567,5,12,0,0,566,568,3,108,
		54,0,567,566,1,0,0,0,568,569,1,0,0,0,569,567,1,0,0,0,569,570,1,0,0,0,570,
		571,1,0,0,0,571,572,5,13,0,0,572,107,1,0,0,0,573,584,3,48,24,0,574,584,
		3,50,25,0,575,584,3,52,26,0,576,584,3,56,28,0,577,584,3,58,29,0,578,584,
		3,60,30,0,579,584,3,62,31,0,580,584,3,64,32,0,581,584,3,74,37,0,582,584,
		3,206,103,0,583,573,1,0,0,0,583,574,1,0,0,0,583,575,1,0,0,0,583,576,1,
		0,0,0,583,577,1,0,0,0,583,578,1,0,0,0,583,579,1,0,0,0,583,580,1,0,0,0,
		583,581,1,0,0,0,583,582,1,0,0,0,584,109,1,0,0,0,585,587,5,47,0,0,586,588,
		5,128,0,0,587,586,1,0,0,0,587,588,1,0,0,0,588,111,1,0,0,0,589,590,5,50,
		0,0,590,113,1,0,0,0,591,592,5,49,0,0,592,115,1,0,0,0,593,595,5,7,0,0,594,
		596,5,128,0,0,595,594,1,0,0,0,595,596,1,0,0,0,596,117,1,0,0,0,597,598,
		5,26,0,0,598,119,1,0,0,0,599,602,5,52,0,0,600,602,3,180,90,0,601,599,1,
		0,0,0,601,600,1,0,0,0,602,121,1,0,0,0,603,604,5,29,0,0,604,123,1,0,0,0,
		605,616,3,186,93,0,606,616,3,152,76,0,607,616,3,182,91,0,608,616,3,172,
		86,0,609,616,3,176,88,0,610,616,3,174,87,0,611,616,3,178,89,0,612,616,
		3,188,94,0,613,616,3,192,96,0,614,616,3,196,98,0,615,605,1,0,0,0,615,606,
		1,0,0,0,615,607,1,0,0,0,615,608,1,0,0,0,615,609,1,0,0,0,615,610,1,0,0,
		0,615,611,1,0,0,0,615,612,1,0,0,0,615,613,1,0,0,0,615,614,1,0,0,0,616,
		125,1,0,0,0,617,636,3,154,77,0,618,636,3,198,99,0,619,636,3,140,70,0,620,
		636,3,142,71,0,621,636,3,164,82,0,622,636,3,166,83,0,623,636,3,168,84,
		0,624,636,3,174,87,0,625,636,3,178,89,0,626,636,3,184,92,0,627,636,3,188,
		94,0,628,636,3,190,95,0,629,636,3,192,96,0,630,636,3,194,97,0,631,636,
		3,198,99,0,632,636,3,200,100,0,633,636,3,202,101,0,634,636,3,204,102,0,
		635,617,1,0,0,0,635,618,1,0,0,0,635,619,1,0,0,0,635,620,1,0,0,0,635,621,
		1,0,0,0,635,622,1,0,0,0,635,623,1,0,0,0,635,624,1,0,0,0,635,625,1,0,0,
		0,635,626,1,0,0,0,635,627,1,0,0,0,635,628,1,0,0,0,635,629,1,0,0,0,635,
		630,1,0,0,0,635,631,1,0,0,0,635,632,1,0,0,0,635,633,1,0,0,0,635,634,1,
		0,0,0,636,127,1,0,0,0,637,638,5,92,0,0,638,639,5,128,0,0,639,129,1,0,0,
		0,640,641,5,93,0,0,641,642,3,206,103,0,642,131,1,0,0,0,643,644,5,94,0,
		0,644,645,3,206,103,0,645,646,3,206,103,0,646,133,1,0,0,0,647,648,5,95,
		0,0,648,651,3,206,103,0,649,652,3,206,103,0,650,652,3,136,68,0,651,649,
		1,0,0,0,651,650,1,0,0,0,652,135,1,0,0,0,653,657,3,48,24,0,654,657,3,52,
		26,0,655,657,3,50,25,0,656,653,1,0,0,0,656,654,1,0,0,0,656,655,1,0,0,0,
		657,660,1,0,0,0,658,656,1,0,0,0,658,659,1,0,0,0,659,661,1,0,0,0,660,658,
		1,0,0,0,661,662,3,44,22,0,662,137,1,0,0,0,663,664,5,96,0,0,664,665,3,206,
		103,0,665,666,3,206,103,0,666,667,3,206,103,0,667,139,1,0,0,0,668,669,
		5,108,0,0,669,670,3,206,103,0,670,141,1,0,0,0,671,672,5,97,0,0,672,143,
		1,0,0,0,673,674,5,98,0,0,674,675,3,206,103,0,675,145,1,0,0,0,676,677,5,
		99,0,0,677,678,3,206,103,0,678,679,3,206,103,0,679,147,1,0,0,0,680,681,
		5,100,0,0,681,682,3,206,103,0,682,149,1,0,0,0,683,684,5,101,0,0,684,685,
		3,206,103,0,685,686,3,206,103,0,686,151,1,0,0,0,687,688,5,102,0,0,688,
		689,3,206,103,0,689,153,1,0,0,0,690,691,5,103,0,0,691,692,3,206,103,0,
		692,693,3,206,103,0,693,694,3,206,103,0,694,155,1,0,0,0,695,696,5,104,
		0,0,696,697,5,78,0,0,697,157,1,0,0,0,698,699,5,104,0,0,699,700,3,206,103,
		0,700,159,1,0,0,0,701,702,5,105,0,0,702,703,3,206,103,0,703,161,1,0,0,
		0,704,705,5,106,0,0,705,706,3,206,103,0,706,707,3,206,103,0,707,163,1,
		0,0,0,708,709,5,109,0,0,709,710,3,206,103,0,710,711,3,206,103,0,711,712,
		3,206,103,0,712,165,1,0,0,0,713,714,5,110,0,0,714,715,3,206,103,0,715,
		716,3,206,103,0,716,717,3,206,103,0,717,167,1,0,0,0,718,719,5,111,0,0,
		719,720,5,89,0,0,720,726,3,206,103,0,721,722,5,111,0,0,722,723,3,206,103,
		0,723,724,3,206,103,0,724,726,1,0,0,0,725,718,1,0,0,0,725,721,1,0,0,0,
		726,169,1,0,0,0,727,728,5,112,0,0,728,729,3,206,103,0,729,171,1,0,0,0,
		730,731,5,113,0,0,731,732,3,206,103,0,732,733,3,206,103,0,733,734,3,206,
		103,0,734,173,1,0,0,0,735,736,5,114,0,0,736,175,1,0,0,0,737,738,5,115,
		0,0,738,739,3,206,103,0,739,740,3,206,103,0,740,741,3,206,103,0,741,177,
		1,0,0,0,742,743,5,116,0,0,743,744,3,206,103,0,744,745,3,206,103,0,745,
		179,1,0,0,0,746,747,5,117,0,0,747,748,3,206,103,0,748,749,3,206,103,0,
		749,181,1,0,0,0,750,751,5,118,0,0,751,765,5,78,0,0,752,753,5,118,0,0,753,
		765,5,79,0,0,754,755,5,118,0,0,755,765,5,80,0,0,756,757,5,118,0,0,757,
		765,5,83,0,0,758,759,5,118,0,0,759,765,5,84,0,0,760,761,5,118,0,0,761,
		765,5,85,0,0,762,763,5,118,0,0,763,765,5,86,0,0,764,750,1,0,0,0,764,752,
		1,0,0,0,764,754,1,0,0,0,764,756,1,0,0,0,764,758,1,0,0,0,764,760,1,0,0,
		0,764,762,1,0,0,0,765,183,1,0,0,0,766,767,5,118,0,0,767,771,5,81,0,0,768,
		769,5,118,0,0,769,771,5,87,0,0,770,766,1,0,0,0,770,768,1,0,0,0,771,185,
		1,0,0,0,772,773,5,119,0,0,773,774,3,206,103,0,774,775,3,206,103,0,775,
		776,3,206,103,0,776,777,3,206,103,0,777,778,3,206,103,0,778,779,3,206,
		103,0,779,780,3,206,103,0,780,781,3,206,103,0,781,187,1,0,0,0,782,783,
		5,120,0,0,783,784,3,206,103,0,784,785,3,206,103,0,785,189,1,0,0,0,786,
		787,5,122,0,0,787,788,3,206,103,0,788,191,1,0,0,0,789,790,5,123,0,0,790,
		791,3,206,103,0,791,792,3,206,103,0,792,193,1,0,0,0,793,794,5,124,0,0,
		794,795,5,78,0,0,795,806,3,206,103,0,796,797,5,124,0,0,797,798,5,79,0,
		0,798,806,3,206,103,0,799,800,5,124,0,0,800,801,5,80,0,0,801,806,3,206,
		103,0,802,803,5,124,0,0,803,804,5,81,0,0,804,806,3,206,103,0,805,793,1,
		0,0,0,805,796,1,0,0,0,805,799,1,0,0,0,805,802,1,0,0,0,806,195,1,0,0,0,
		807,808,5,124,0,0,808,809,5,82,0,0,809,823,3,206,103,0,810,811,5,124,0,
		0,811,812,5,88,0,0,812,823,3,206,103,0,813,814,5,124,0,0,814,815,5,91,
		0,0,815,819,3,206,103,0,816,818,3,206,103,0,817,816,1,0,0,0,818,821,1,
		0,0,0,819,817,1,0,0,0,819,820,1,0,0,0,820,823,1,0,0,0,821,819,1,0,0,0,
		822,807,1,0,0,0,822,810,1,0,0,0,822,813,1,0,0,0,823,197,1,0,0,0,824,825,
		5,125,0,0,825,826,5,89,0,0,826,827,3,206,103,0,827,828,3,206,103,0,828,
		839,1,0,0,0,829,830,5,125,0,0,830,831,5,90,0,0,831,832,3,206,103,0,832,
		833,3,206,103,0,833,839,1,0,0,0,834,835,5,125,0,0,835,836,3,206,103,0,
		836,837,3,206,103,0,837,839,1,0,0,0,838,824,1,0,0,0,838,829,1,0,0,0,838,
		834,1,0,0,0,839,199,1,0,0,0,840,841,5,126,0,0,841,842,3,206,103,0,842,
		843,5,79,0,0,843,844,3,206,103,0,844,845,3,206,103,0,845,853,1,0,0,0,846,
		847,5,126,0,0,847,848,3,206,103,0,848,849,3,206,103,0,849,850,3,206,103,
		0,850,851,3,206,103,0,851,853,1,0,0,0,852,840,1,0,0,0,852,846,1,0,0,0,
		853,201,1,0,0,0,854,855,5,127,0,0,855,203,1,0,0,0,856,857,5,91,0,0,857,
		205,1,0,0,0,858,859,7,2,0,0,859,207,1,0,0,0,71,211,214,230,240,250,256,
		264,273,279,285,287,294,309,325,331,343,349,361,371,391,408,410,414,421,
		423,427,434,439,443,447,456,458,463,465,469,477,481,485,490,496,501,507,
		510,516,521,527,533,538,543,546,552,557,562,569,583,587,595,601,615,635,
		651,656,658,725,764,770,805,819,822,838,852
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
