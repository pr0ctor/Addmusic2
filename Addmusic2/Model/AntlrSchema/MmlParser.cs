//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/Projects/Visual Studio/Addmusic2/Addmusic2/Addmusic2/Mml.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MmlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		POUND=1, DOLLAR=2, COMMAT=3, AMPER=4, BANG=5, STAR=6, LBRACE=7, RBRACE=8, 
		LPAREN=9, RPAREN=10, LBRACK=11, RBRACK=12, L2BRACK=13, R2BRACK=14, DQUOTE=15, 
		SQUOTE=16, SHARP=17, FLAT=18, DOT=19, TIE=20, GT=21, LT=22, COMMA=23, 
		FSLASH=24, QMARK=25, EQUAL=26, SEMICOLON=27, NUMBERS=28, UNUMBERS=29, 
		NOTEDURATIONS=30, REMOTECODENUMBERS=31, ReplacementText=32, StringLiteral=33, 
		Note=34, Rest=35, Octave=36, Noise=37, Tempo=38, Volume=39, Tune=40, Length=41, 
		Quantization=42, GlobalVolume=43, Pan=44, Vibrato=45, Tie=46, Pitchslide=47, 
		LoopName=48, RemoteCodeName=49, StopRemoteCode=50, CallRemoteCode=51, 
		CallPreviousLoop=52, LoadSample=53, AmkV1=54, HexDigits=55, HexNumber=56, 
		Instrument=57, Amk=58, Samples=59, Instruments=60, Spc=61, SpcAuthor=62, 
		SpcGame=63, SpcComment=64, SpcTitle=65, SpcLength=66, Pad=67, Path=68, 
		Halvetempo=69, Option=70, Tempoimmunity=71, Dividetempo=72, Smwvtable=73, 
		Noloop=74, Amk109hotpatch=75, Channel=76, SampleOptimization=77, WHITESPACE=78, 
		Comment=79;
	public const int
		RULE_song = 0, RULE_songElement = 1, RULE_specialDirective = 2, RULE_samples = 3, 
		RULE_samplesList = 4, RULE_instruments = 5, RULE_instrumentsList = 6, 
		RULE_spc = 7, RULE_spcList = 8, RULE_pad = 9, RULE_path = 10, RULE_halvetempo = 11, 
		RULE_option = 12, RULE_optionItem = 13, RULE_amk = 14, RULE_amkVersion = 15, 
		RULE_soundChannel = 16, RULE_introEnd = 17, RULE_channelContents = 18, 
		RULE_atomics = 19, RULE_note = 20, RULE_rest = 21, RULE_octave = 22, RULE_lowerOctave = 23, 
		RULE_raiseOctave = 24, RULE_noiseNote = 25, RULE_volume = 26, RULE_tune = 27, 
		RULE_quantization = 28, RULE_pan = 29, RULE_vibrato = 30, RULE_pitchslide = 31, 
		RULE_triplet = 32, RULE_defaultLength = 33, RULE_globalVolume = 34, RULE_tempo = 35, 
		RULE_instrument = 36, RULE_nakedTie = 37, RULE_loopers = 38, RULE_logicControls = 39, 
		RULE_logicCalls = 40, RULE_remoteLogicCalls = 41, RULE_superLoop = 42, 
		RULE_simpleLoop = 43, RULE_terminalSuperLoop = 44, RULE_terminalSimpleLoop = 45, 
		RULE_remoteCode = 46, RULE_remoteCodeContents = 47, RULE_callLoop = 48, 
		RULE_callRemoteCode = 49, RULE_stopRemoteCode = 50, RULE_callPreviousLoop = 51, 
		RULE_noloopCommand = 52, RULE_sampleLoad = 53, RULE_replacements = 54, 
		RULE_hexNumber = 55;
	public static readonly string[] ruleNames = {
		"song", "songElement", "specialDirective", "samples", "samplesList", "instruments", 
		"instrumentsList", "spc", "spcList", "pad", "path", "halvetempo", "option", 
		"optionItem", "amk", "amkVersion", "soundChannel", "introEnd", "channelContents", 
		"atomics", "note", "rest", "octave", "lowerOctave", "raiseOctave", "noiseNote", 
		"volume", "tune", "quantization", "pan", "vibrato", "pitchslide", "triplet", 
		"defaultLength", "globalVolume", "tempo", "instrument", "nakedTie", "loopers", 
		"logicControls", "logicCalls", "remoteLogicCalls", "superLoop", "simpleLoop", 
		"terminalSuperLoop", "terminalSimpleLoop", "remoteCode", "remoteCodeContents", 
		"callLoop", "callRemoteCode", "stopRemoteCode", "callPreviousLoop", "noloopCommand", 
		"sampleLoad", "replacements", "hexNumber"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", "'$'", "'@'", "'&'", "'!'", "'*'", "'{'", "'}'", "'('", "')'", 
		"'['", "']'", "'[['", "']]'", "'\"'", "'''", "'+'", "'-'", "'.'", "'^'", 
		"'>'", "'<'", "','", "'/'", "'?'", "'='", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "POUND", "DOLLAR", "COMMAT", "AMPER", "BANG", "STAR", "LBRACE", 
		"RBRACE", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "L2BRACK", "R2BRACK", 
		"DQUOTE", "SQUOTE", "SHARP", "FLAT", "DOT", "TIE", "GT", "LT", "COMMA", 
		"FSLASH", "QMARK", "EQUAL", "SEMICOLON", "NUMBERS", "UNUMBERS", "NOTEDURATIONS", 
		"REMOTECODENUMBERS", "ReplacementText", "StringLiteral", "Note", "Rest", 
		"Octave", "Noise", "Tempo", "Volume", "Tune", "Length", "Quantization", 
		"GlobalVolume", "Pan", "Vibrato", "Tie", "Pitchslide", "LoopName", "RemoteCodeName", 
		"StopRemoteCode", "CallRemoteCode", "CallPreviousLoop", "LoadSample", 
		"AmkV1", "HexDigits", "HexNumber", "Instrument", "Amk", "Samples", "Instruments", 
		"Spc", "SpcAuthor", "SpcGame", "SpcComment", "SpcTitle", "SpcLength", 
		"Pad", "Path", "Halvetempo", "Option", "Tempoimmunity", "Dividetempo", 
		"Smwvtable", "Noloop", "Amk109hotpatch", "Channel", "SampleOptimization", 
		"WHITESPACE", "Comment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Mml.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MmlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MmlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MmlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SongContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SongElementContext[] songElement() {
			return GetRuleContexts<SongElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SongElementContext songElement(int i) {
			return GetRuleContext<SongElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MmlParser.Eof, 0); }
		public SongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_song; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSong(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSong(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SongContext song() {
		SongContext _localctx = new SongContext(Context, State);
		EnterRule(_localctx, 0, RULE_song);
		int _la;
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FSLASH:
			case QMARK:
			case ReplacementText:
			case StringLiteral:
			case Tempo:
			case Length:
			case GlobalVolume:
			case RemoteCodeName:
			case HexNumber:
			case Amk:
			case Samples:
			case Instruments:
			case Spc:
			case Pad:
			case Path:
			case Halvetempo:
			case Option:
			case Channel:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 112;
					songElement();
					}
					}
					State = 115;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & 4635803049935619L) != 0) );
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117;
				Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SongElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecialDirectiveContext specialDirective() {
			return GetRuleContext<SpecialDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SoundChannelContext soundChannel() {
			return GetRuleContext<SoundChannelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoteCodeContext remoteCode() {
			return GetRuleContext<RemoteCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultLengthContext defaultLength() {
			return GetRuleContext<DefaultLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVolumeContext globalVolume() {
			return GetRuleContext<GlobalVolumeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempoContext tempo() {
			return GetRuleContext<TempoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplacementsContext replacements() {
			return GetRuleContext<ReplacementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoloopCommandContext noloopCommand() {
			return GetRuleContext<NoloopCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MmlParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HexNumber() { return GetTokens(MmlParser.HexNumber); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber(int i) {
			return GetToken(MmlParser.HexNumber, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntroEndContext introEnd() {
			return GetRuleContext<IntroEndContext>(0);
		}
		public SongElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_songElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSongElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSongElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSongElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SongElementContext songElement() {
		SongElementContext _localctx = new SongElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_songElement);
		try {
			int _alt;
			State = 135;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Amk:
			case Samples:
			case Instruments:
			case Spc:
			case Pad:
			case Path:
			case Halvetempo:
			case Option:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120;
				specialDirective();
				}
				break;
			case Channel:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121;
				soundChannel();
				}
				break;
			case RemoteCodeName:
				EnterOuterAlt(_localctx, 3);
				{
				State = 122;
				remoteCode();
				}
				break;
			case Length:
				EnterOuterAlt(_localctx, 4);
				{
				State = 123;
				defaultLength();
				}
				break;
			case GlobalVolume:
				EnterOuterAlt(_localctx, 5);
				{
				State = 124;
				globalVolume();
				}
				break;
			case Tempo:
				EnterOuterAlt(_localctx, 6);
				{
				State = 125;
				tempo();
				}
				break;
			case ReplacementText:
				EnterOuterAlt(_localctx, 7);
				{
				State = 126;
				replacements();
				}
				break;
			case QMARK:
				EnterOuterAlt(_localctx, 8);
				{
				State = 127;
				noloopCommand();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 9);
				{
				State = 128;
				Match(StringLiteral);
				}
				break;
			case HexNumber:
				EnterOuterAlt(_localctx, 10);
				{
				State = 130;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 129;
						Match(HexNumber);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 132;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case FSLASH:
				EnterOuterAlt(_localctx, 11);
				{
				State = 134;
				introEnd();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AmkContext amk() {
			return GetRuleContext<AmkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpcContext spc() {
			return GetRuleContext<SpcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SamplesContext samples() {
			return GetRuleContext<SamplesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstrumentsContext instruments() {
			return GetRuleContext<InstrumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PadContext pad() {
			return GetRuleContext<PadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HalvetempoContext halvetempo() {
			return GetRuleContext<HalvetempoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option() {
			return GetRuleContext<OptionContext>(0);
		}
		public SpecialDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSpecialDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSpecialDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialDirectiveContext specialDirective() {
		SpecialDirectiveContext _localctx = new SpecialDirectiveContext(Context, State);
		EnterRule(_localctx, 4, RULE_specialDirective);
		try {
			State = 145;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Amk:
				EnterOuterAlt(_localctx, 1);
				{
				State = 137;
				amk();
				}
				break;
			case Spc:
				EnterOuterAlt(_localctx, 2);
				{
				State = 138;
				spc();
				}
				break;
			case Samples:
				EnterOuterAlt(_localctx, 3);
				{
				State = 139;
				samples();
				}
				break;
			case Instruments:
				EnterOuterAlt(_localctx, 4);
				{
				State = 140;
				instruments();
				}
				break;
			case Path:
				EnterOuterAlt(_localctx, 5);
				{
				State = 141;
				path();
				}
				break;
			case Pad:
				EnterOuterAlt(_localctx, 6);
				{
				State = 142;
				pad();
				}
				break;
			case Halvetempo:
				EnterOuterAlt(_localctx, 7);
				{
				State = 143;
				halvetempo();
				}
				break;
			case Option:
				EnterOuterAlt(_localctx, 8);
				{
				State = 144;
				option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SamplesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Samples() { return GetToken(MmlParser.Samples, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MmlParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SamplesListContext samplesList() {
			return GetRuleContext<SamplesListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MmlParser.RBRACE, 0); }
		public SamplesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_samples; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSamples(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSamples(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSamples(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SamplesContext samples() {
		SamplesContext _localctx = new SamplesContext(Context, State);
		EnterRule(_localctx, 6, RULE_samples);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(Samples);
			State = 148;
			Match(LBRACE);
			State = 149;
			samplesList();
			State = 150;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SamplesListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SampleOptimization() { return GetToken(MmlParser.SampleOptimization, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteral() { return GetTokens(MmlParser.StringLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral(int i) {
			return GetToken(MmlParser.StringLiteral, i);
		}
		public SamplesListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_samplesList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSamplesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSamplesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSamplesList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SamplesListContext samplesList() {
		SamplesListContext _localctx = new SamplesListContext(Context, State);
		EnterRule(_localctx, 8, RULE_samplesList);
		int _la;
		try {
			State = 165;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SampleOptimization:
				EnterOuterAlt(_localctx, 1);
				{
				State = 152;
				Match(SampleOptimization);
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==StringLiteral) {
					{
					{
					State = 153;
					Match(StringLiteral);
					}
					}
					State = 158;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RBRACE:
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==StringLiteral) {
					{
					{
					State = 159;
					Match(StringLiteral);
					}
					}
					State = 164;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstrumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instruments() { return GetToken(MmlParser.Instruments, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MmlParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MmlParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstrumentsListContext[] instrumentsList() {
			return GetRuleContexts<InstrumentsListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstrumentsListContext instrumentsList(int i) {
			return GetRuleContext<InstrumentsListContext>(i);
		}
		public InstrumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterInstruments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitInstruments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstrumentsContext instruments() {
		InstrumentsContext _localctx = new InstrumentsContext(Context, State);
		EnterRule(_localctx, 10, RULE_instruments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(Instruments);
			State = 168;
			Match(LBRACE);
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 144115334104743936L) != 0)) {
				{
				{
				State = 169;
				instrumentsList();
				}
				}
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 175;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstrumentsListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MmlParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HexNumber() { return GetTokens(MmlParser.HexNumber); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber(int i) {
			return GetToken(MmlParser.HexNumber, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instrument() { return GetToken(MmlParser.Instrument, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NoiseNoteContext noiseNote() {
			return GetRuleContext<NoiseNoteContext>(0);
		}
		public InstrumentsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instrumentsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterInstrumentsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitInstrumentsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstrumentsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstrumentsListContext instrumentsList() {
		InstrumentsListContext _localctx = new InstrumentsListContext(Context, State);
		EnterRule(_localctx, 12, RULE_instrumentsList);
		int _la;
		try {
			State = 195;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 177;
				Match(StringLiteral);
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 178;
					Match(HexNumber);
					}
					}
					State = 181;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==HexNumber );
				}
				break;
			case Instrument:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183;
				Match(Instrument);
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 184;
					Match(HexNumber);
					}
					}
					State = 187;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==HexNumber );
				}
				break;
			case Noise:
				EnterOuterAlt(_localctx, 3);
				{
				State = 189;
				noiseNote();
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 190;
					Match(HexNumber);
					}
					}
					State = 193;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==HexNumber );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Spc() { return GetToken(MmlParser.Spc, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MmlParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MmlParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpcListContext[] spcList() {
			return GetRuleContexts<SpcListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpcListContext spcList(int i) {
			return GetRuleContext<SpcListContext>(i);
		}
		public SpcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSpc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSpc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpcContext spc() {
		SpcContext _localctx = new SpcContext(Context, State);
		EnterRule(_localctx, 14, RULE_spc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(Spc);
			State = 198;
			Match(LBRACE);
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & 31L) != 0)) {
				{
				{
				State = 199;
				spcList();
				}
				}
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 205;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpcListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SpcAuthor() { return GetToken(MmlParser.SpcAuthor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MmlParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SpcGame() { return GetToken(MmlParser.SpcGame, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SpcComment() { return GetToken(MmlParser.SpcComment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SpcTitle() { return GetToken(MmlParser.SpcTitle, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SpcLength() { return GetToken(MmlParser.SpcLength, 0); }
		public SpcListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spcList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSpcList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSpcList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpcList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpcListContext spcList() {
		SpcListContext _localctx = new SpcListContext(Context, State);
		EnterRule(_localctx, 16, RULE_spcList);
		try {
			State = 217;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SpcAuthor:
				EnterOuterAlt(_localctx, 1);
				{
				State = 207;
				Match(SpcAuthor);
				State = 208;
				Match(StringLiteral);
				}
				break;
			case SpcGame:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209;
				Match(SpcGame);
				State = 210;
				Match(StringLiteral);
				}
				break;
			case SpcComment:
				EnterOuterAlt(_localctx, 3);
				{
				State = 211;
				Match(SpcComment);
				State = 212;
				Match(StringLiteral);
				}
				break;
			case SpcTitle:
				EnterOuterAlt(_localctx, 4);
				{
				State = 213;
				Match(SpcTitle);
				State = 214;
				Match(StringLiteral);
				}
				break;
			case SpcLength:
				EnterOuterAlt(_localctx, 5);
				{
				State = 215;
				Match(SpcLength);
				State = 216;
				Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pad() { return GetToken(MmlParser.Pad, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber() { return GetToken(MmlParser.HexNumber, 0); }
		public PadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pad; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterPad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitPad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPad(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PadContext pad() {
		PadContext _localctx = new PadContext(Context, State);
		EnterRule(_localctx, 18, RULE_pad);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(Pad);
			State = 220;
			Match(HexNumber);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Path() { return GetToken(MmlParser.Path, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MmlParser.StringLiteral, 0); }
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		PathContext _localctx = new PathContext(Context, State);
		EnterRule(_localctx, 20, RULE_path);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(Path);
			State = 223;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HalvetempoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Halvetempo() { return GetToken(MmlParser.Halvetempo, 0); }
		public HalvetempoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_halvetempo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterHalvetempo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitHalvetempo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHalvetempo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HalvetempoContext halvetempo() {
		HalvetempoContext _localctx = new HalvetempoContext(Context, State);
		EnterRule(_localctx, 22, RULE_halvetempo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(Halvetempo);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Option() { return GetToken(MmlParser.Option, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MmlParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MmlParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] POUND() { return GetTokens(MmlParser.POUND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POUND(int i) {
			return GetToken(MmlParser.POUND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionItemContext[] optionItem() {
			return GetRuleContexts<OptionItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionItemContext optionItem(int i) {
			return GetRuleContext<OptionItemContext>(i);
		}
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 24, RULE_option);
		int _la;
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 227;
				Match(Option);
				State = 228;
				Match(LBRACE);
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==POUND) {
					{
					{
					State = 229;
					Match(POUND);
					State = 230;
					optionItem();
					}
					}
					State = 235;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 236;
				Match(RBRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 237;
				Match(Option);
				State = 238;
				optionItem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tempoimmunity() { return GetToken(MmlParser.Tempoimmunity, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dividetempo() { return GetToken(MmlParser.Dividetempo, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Smwvtable() { return GetToken(MmlParser.Smwvtable, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Noloop() { return GetToken(MmlParser.Noloop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Amk109hotpatch() { return GetToken(MmlParser.Amk109hotpatch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MmlParser.StringLiteral, 0); }
		public OptionItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterOptionItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitOptionItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionItemContext optionItem() {
		OptionItemContext _localctx = new OptionItemContext(Context, State);
		EnterRule(_localctx, 26, RULE_optionItem);
		try {
			State = 250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 241;
				Match(Tempoimmunity);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 242;
				Match(Dividetempo);
				State = 243;
				Match(NUMBERS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 244;
				Match(Smwvtable);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 245;
				Match(Noloop);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 246;
				Match(Amk109hotpatch);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 247;
				Match(StringLiteral);
				State = 248;
				Match(NUMBERS);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 249;
				Match(StringLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Amk() { return GetToken(MmlParser.Amk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AmkVersionContext amkVersion() {
			return GetRuleContext<AmkVersionContext>(0);
		}
		public AmkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amk; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterAmk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitAmk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmkContext amk() {
		AmkContext _localctx = new AmkContext(Context, State);
		EnterRule(_localctx, 28, RULE_amk);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(Amk);
			State = 253;
			amkVersion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmkVersionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AmkV1() { return GetToken(MmlParser.AmkV1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public AmkVersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amkVersion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterAmkVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitAmkVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmkVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmkVersionContext amkVersion() {
		AmkVersionContext _localctx = new AmkVersionContext(Context, State);
		EnterRule(_localctx, 30, RULE_amkVersion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBERS || _la==AmkV1) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoundChannelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Channel() { return GetToken(MmlParser.Channel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContentsContext[] channelContents() {
			return GetRuleContexts<ChannelContentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContentsContext channelContents(int i) {
			return GetRuleContext<ChannelContentsContext>(i);
		}
		public SoundChannelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soundChannel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSoundChannel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSoundChannel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoundChannel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoundChannelContext soundChannel() {
		SoundChannelContext _localctx = new SoundChannelContext(Context, State);
		EnterRule(_localctx, 32, RULE_soundChannel);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			Match(Channel);
			State = 261;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 258;
					channelContents();
					}
					} 
				}
				State = 263;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntroEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FSLASH() { return GetToken(MmlParser.FSLASH, 0); }
		public IntroEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_introEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterIntroEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitIntroEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntroEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntroEndContext introEnd() {
		IntroEndContext _localctx = new IntroEndContext(Context, State);
		EnterRule(_localctx, 34, RULE_introEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			Match(FSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelContentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicsContext atomics() {
			return GetRuleContext<AtomicsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopersContext loopers() {
			return GetRuleContext<LoopersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SampleLoadContext sampleLoad() {
			return GetRuleContext<SampleLoadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber() { return GetToken(MmlParser.HexNumber, 0); }
		public ChannelContentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelContents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterChannelContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitChannelContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelContents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChannelContentsContext channelContents() {
		ChannelContentsContext _localctx = new ChannelContentsContext(Context, State);
		EnterRule(_localctx, 36, RULE_channelContents);
		try {
			State = 270;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
			case GT:
			case LT:
			case FSLASH:
			case Note:
			case Rest:
			case Octave:
			case Noise:
			case Tempo:
			case Volume:
			case Tune:
			case Quantization:
			case Pan:
			case Vibrato:
			case Tie:
			case Pitchslide:
			case Instrument:
				EnterOuterAlt(_localctx, 1);
				{
				State = 266;
				atomics();
				}
				break;
			case STAR:
			case LBRACK:
			case L2BRACK:
			case LoopName:
			case StopRemoteCode:
			case CallRemoteCode:
				EnterOuterAlt(_localctx, 2);
				{
				State = 267;
				loopers();
				}
				break;
			case LoadSample:
				EnterOuterAlt(_localctx, 3);
				{
				State = 268;
				sampleLoad();
				}
				break;
			case HexNumber:
				EnterOuterAlt(_localctx, 4);
				{
				State = 269;
				Match(HexNumber);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PitchslideContext pitchslide() {
			return GetRuleContext<PitchslideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoteContext note() {
			return GetRuleContext<NoteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestContext rest() {
			return GetRuleContext<RestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OctaveContext octave() {
			return GetRuleContext<OctaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LowerOctaveContext lowerOctave() {
			return GetRuleContext<LowerOctaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RaiseOctaveContext raiseOctave() {
			return GetRuleContext<RaiseOctaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoiseNoteContext noiseNote() {
			return GetRuleContext<NoiseNoteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TripletContext triplet() {
			return GetRuleContext<TripletContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VolumeContext volume() {
			return GetRuleContext<VolumeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TuneContext tune() {
			return GetRuleContext<TuneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstrumentContext instrument() {
			return GetRuleContext<InstrumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuantizationContext quantization() {
			return GetRuleContext<QuantizationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PanContext pan() {
			return GetRuleContext<PanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VibratoContext vibrato() {
			return GetRuleContext<VibratoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempoContext tempo() {
			return GetRuleContext<TempoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntroEndContext introEnd() {
			return GetRuleContext<IntroEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NakedTieContext nakedTie() {
			return GetRuleContext<NakedTieContext>(0);
		}
		public AtomicsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomics; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterAtomics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitAtomics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicsContext atomics() {
		AtomicsContext _localctx = new AtomicsContext(Context, State);
		EnterRule(_localctx, 38, RULE_atomics);
		try {
			State = 289;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Pitchslide:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272;
				pitchslide();
				}
				break;
			case Note:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273;
				note();
				}
				break;
			case Rest:
				EnterOuterAlt(_localctx, 3);
				{
				State = 274;
				rest();
				}
				break;
			case Octave:
				EnterOuterAlt(_localctx, 4);
				{
				State = 275;
				octave();
				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 276;
				lowerOctave();
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 277;
				raiseOctave();
				}
				break;
			case Noise:
				EnterOuterAlt(_localctx, 7);
				{
				State = 278;
				noiseNote();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 279;
				triplet();
				}
				break;
			case Volume:
				EnterOuterAlt(_localctx, 9);
				{
				State = 280;
				volume();
				}
				break;
			case Tune:
				EnterOuterAlt(_localctx, 10);
				{
				State = 281;
				tune();
				}
				break;
			case Instrument:
				EnterOuterAlt(_localctx, 11);
				{
				State = 282;
				instrument();
				}
				break;
			case Quantization:
				EnterOuterAlt(_localctx, 12);
				{
				State = 283;
				quantization();
				}
				break;
			case Pan:
				EnterOuterAlt(_localctx, 13);
				{
				State = 284;
				pan();
				}
				break;
			case Vibrato:
				EnterOuterAlt(_localctx, 14);
				{
				State = 285;
				vibrato();
				}
				break;
			case Tempo:
				EnterOuterAlt(_localctx, 15);
				{
				State = 286;
				tempo();
				}
				break;
			case FSLASH:
				EnterOuterAlt(_localctx, 16);
				{
				State = 287;
				introEnd();
				}
				break;
			case Tie:
				EnterOuterAlt(_localctx, 17);
				{
				State = 288;
				nakedTie();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Note() { return GetToken(MmlParser.Note, 0); }
		public NoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_note; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoteContext note() {
		NoteContext _localctx = new NoteContext(Context, State);
		EnterRule(_localctx, 40, RULE_note);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(Note);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rest() { return GetToken(MmlParser.Rest, 0); }
		public RestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestContext rest() {
		RestContext _localctx = new RestContext(Context, State);
		EnterRule(_localctx, 42, RULE_rest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			Match(Rest);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OctaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Octave() { return GetToken(MmlParser.Octave, 0); }
		public OctaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_octave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOctave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OctaveContext octave() {
		OctaveContext _localctx = new OctaveContext(Context, State);
		EnterRule(_localctx, 44, RULE_octave);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(Octave);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LowerOctaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MmlParser.LT, 0); }
		public LowerOctaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lowerOctave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterLowerOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitLowerOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLowerOctave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LowerOctaveContext lowerOctave() {
		LowerOctaveContext _localctx = new LowerOctaveContext(Context, State);
		EnterRule(_localctx, 46, RULE_lowerOctave);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			Match(LT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseOctaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MmlParser.GT, 0); }
		public RaiseOctaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseOctave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterRaiseOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitRaiseOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseOctave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseOctaveContext raiseOctave() {
		RaiseOctaveContext _localctx = new RaiseOctaveContext(Context, State);
		EnterRule(_localctx, 48, RULE_raiseOctave);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoiseNoteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Noise() { return GetToken(MmlParser.Noise, 0); }
		public NoiseNoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noiseNote; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterNoiseNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitNoiseNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoiseNote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoiseNoteContext noiseNote() {
		NoiseNoteContext _localctx = new NoiseNoteContext(Context, State);
		EnterRule(_localctx, 50, RULE_noiseNote);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(Noise);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VolumeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Volume() { return GetToken(MmlParser.Volume, 0); }
		public VolumeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_volume; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterVolume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitVolume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVolume(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VolumeContext volume() {
		VolumeContext _localctx = new VolumeContext(Context, State);
		EnterRule(_localctx, 52, RULE_volume);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			Match(Volume);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TuneContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tune() { return GetToken(MmlParser.Tune, 0); }
		public TuneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tune; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterTune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitTune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTune(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TuneContext tune() {
		TuneContext _localctx = new TuneContext(Context, State);
		EnterRule(_localctx, 54, RULE_tune);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			Match(Tune);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuantizationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Quantization() { return GetToken(MmlParser.Quantization, 0); }
		public QuantizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantization; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterQuantization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitQuantization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuantizationContext quantization() {
		QuantizationContext _localctx = new QuantizationContext(Context, State);
		EnterRule(_localctx, 56, RULE_quantization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			Match(Quantization);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pan() { return GetToken(MmlParser.Pan, 0); }
		public PanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pan; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterPan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitPan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPan(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PanContext pan() {
		PanContext _localctx = new PanContext(Context, State);
		EnterRule(_localctx, 58, RULE_pan);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(Pan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VibratoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Vibrato() { return GetToken(MmlParser.Vibrato, 0); }
		public VibratoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vibrato; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterVibrato(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitVibrato(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVibrato(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VibratoContext vibrato() {
		VibratoContext _localctx = new VibratoContext(Context, State);
		EnterRule(_localctx, 60, RULE_vibrato);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			Match(Vibrato);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PitchslideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pitchslide() { return GetToken(MmlParser.Pitchslide, 0); }
		public PitchslideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pitchslide; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterPitchslide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitPitchslide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPitchslide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PitchslideContext pitchslide() {
		PitchslideContext _localctx = new PitchslideContext(Context, State);
		EnterRule(_localctx, 62, RULE_pitchslide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			Match(Pitchslide);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TripletContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MmlParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MmlParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NoteContext[] note() {
			return GetRuleContexts<NoteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoteContext note(int i) {
			return GetRuleContext<NoteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestContext[] rest() {
			return GetRuleContexts<RestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestContext rest(int i) {
			return GetRuleContext<RestContext>(i);
		}
		public TripletContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triplet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterTriplet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitTriplet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TripletContext triplet() {
		TripletContext _localctx = new TripletContext(Context, State);
		EnterRule(_localctx, 64, RULE_triplet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			Match(LBRACE);
			State = 318;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Note:
				{
				State = 316;
				note();
				}
				break;
			case Rest:
				{
				State = 317;
				rest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 322;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Note:
				{
				State = 320;
				note();
				}
				break;
			case Rest:
				{
				State = 321;
				rest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Note:
				{
				State = 324;
				note();
				}
				break;
			case Rest:
				{
				State = 325;
				rest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 328;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultLengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Length() { return GetToken(MmlParser.Length, 0); }
		public DefaultLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultLength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterDefaultLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitDefaultLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultLengthContext defaultLength() {
		DefaultLengthContext _localctx = new DefaultLengthContext(Context, State);
		EnterRule(_localctx, 66, RULE_defaultLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			Match(Length);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVolumeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GlobalVolume() { return GetToken(MmlParser.GlobalVolume, 0); }
		public GlobalVolumeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVolume; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterGlobalVolume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitGlobalVolume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVolume(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVolumeContext globalVolume() {
		GlobalVolumeContext _localctx = new GlobalVolumeContext(Context, State);
		EnterRule(_localctx, 68, RULE_globalVolume);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			Match(GlobalVolume);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TempoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tempo() { return GetToken(MmlParser.Tempo, 0); }
		public TempoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tempo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterTempo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitTempo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTempo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TempoContext tempo() {
		TempoContext _localctx = new TempoContext(Context, State);
		EnterRule(_localctx, 70, RULE_tempo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			Match(Tempo);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstrumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instrument() { return GetToken(MmlParser.Instrument, 0); }
		public InstrumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instrument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterInstrument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitInstrument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstrument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstrumentContext instrument() {
		InstrumentContext _localctx = new InstrumentContext(Context, State);
		EnterRule(_localctx, 72, RULE_instrument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			Match(Instrument);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NakedTieContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tie() { return GetToken(MmlParser.Tie, 0); }
		public NakedTieContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nakedTie; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterNakedTie(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitNakedTie(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNakedTie(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NakedTieContext nakedTie() {
		NakedTieContext _localctx = new NakedTieContext(Context, State);
		EnterRule(_localctx, 74, RULE_nakedTie);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			Match(Tie);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicControlsContext logicControls() {
			return GetRuleContext<LogicControlsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicCallsContext logicCalls() {
			return GetRuleContext<LogicCallsContext>(0);
		}
		public LoopersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterLoopers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitLoopers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopersContext loopers() {
		LoopersContext _localctx = new LoopersContext(Context, State);
		EnterRule(_localctx, 76, RULE_loopers);
		try {
			State = 342;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 340;
				logicControls();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 341;
				logicCalls();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicControlsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SuperLoopContext superLoop() {
			return GetRuleContext<SuperLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleLoopContext simpleLoop() {
			return GetRuleContext<SimpleLoopContext>(0);
		}
		public LogicControlsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicControls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterLogicControls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitLogicControls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicControls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicControlsContext logicControls() {
		LogicControlsContext _localctx = new LogicControlsContext(Context, State);
		EnterRule(_localctx, 78, RULE_logicControls);
		try {
			State = 346;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case L2BRACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 344;
				superLoop();
				}
				break;
			case LBRACK:
			case LoopName:
				EnterOuterAlt(_localctx, 2);
				{
				State = 345;
				simpleLoop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicCallsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallLoopContext callLoop() {
			return GetRuleContext<CallLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoteLogicCallsContext remoteLogicCalls() {
			return GetRuleContext<RemoteLogicCallsContext>(0);
		}
		public LogicCallsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicCalls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterLogicCalls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitLogicCalls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicCalls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicCallsContext logicCalls() {
		LogicCallsContext _localctx = new LogicCallsContext(Context, State);
		EnterRule(_localctx, 80, RULE_logicCalls);
		try {
			State = 350;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LoopName:
				EnterOuterAlt(_localctx, 1);
				{
				State = 348;
				callLoop();
				}
				break;
			case STAR:
			case StopRemoteCode:
			case CallRemoteCode:
				EnterOuterAlt(_localctx, 2);
				{
				State = 349;
				remoteLogicCalls();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoteLogicCallsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallRemoteCodeContext callRemoteCode() {
			return GetRuleContext<CallRemoteCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallPreviousLoopContext callPreviousLoop() {
			return GetRuleContext<CallPreviousLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopRemoteCodeContext stopRemoteCode() {
			return GetRuleContext<StopRemoteCodeContext>(0);
		}
		public RemoteLogicCallsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remoteLogicCalls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterRemoteLogicCalls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitRemoteLogicCalls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoteLogicCalls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoteLogicCallsContext remoteLogicCalls() {
		RemoteLogicCallsContext _localctx = new RemoteLogicCallsContext(Context, State);
		EnterRule(_localctx, 82, RULE_remoteLogicCalls);
		try {
			State = 355;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CallRemoteCode:
				EnterOuterAlt(_localctx, 1);
				{
				State = 352;
				callRemoteCode();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 353;
				callPreviousLoop();
				}
				break;
			case StopRemoteCode:
				EnterOuterAlt(_localctx, 3);
				{
				State = 354;
				stopRemoteCode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L2BRACK() { return GetToken(MmlParser.L2BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R2BRACK() { return GetToken(MmlParser.R2BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicsContext[] atomics() {
			return GetRuleContexts<AtomicsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomicsContext atomics(int i) {
			return GetRuleContext<AtomicsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminalSimpleLoopContext[] terminalSimpleLoop() {
			return GetRuleContexts<TerminalSimpleLoopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminalSimpleLoopContext terminalSimpleLoop(int i) {
			return GetRuleContext<TerminalSimpleLoopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicCallsContext[] logicCalls() {
			return GetRuleContexts<LogicCallsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicCallsContext logicCalls(int i) {
			return GetRuleContext<LogicCallsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public SuperLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSuperLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSuperLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperLoopContext superLoop() {
		SuperLoopContext _localctx = new SuperLoopContext(Context, State);
		EnterRule(_localctx, 84, RULE_superLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			Match(L2BRACK);
			State = 364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 220102419514656960L) != 0)) {
				{
				State = 362;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 358;
					atomics();
					}
					break;
				case 2:
					{
					State = 359;
					terminalSimpleLoop();
					}
					break;
				case 3:
					{
					State = 360;
					logicCalls();
					}
					break;
				case 4:
					{
					State = 361;
					hexNumber();
					}
					break;
				}
				}
				State = 366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 367;
			Match(R2BRACK);
			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBERS) {
				{
				State = 368;
				Match(NUMBERS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MmlParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MmlParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopName() { return GetToken(MmlParser.LoopName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicsContext[] atomics() {
			return GetRuleContexts<AtomicsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomicsContext atomics(int i) {
			return GetRuleContext<AtomicsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminalSuperLoopContext[] terminalSuperLoop() {
			return GetRuleContexts<TerminalSuperLoopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminalSuperLoopContext terminalSuperLoop(int i) {
			return GetRuleContext<TerminalSuperLoopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoteLogicCallsContext[] remoteLogicCalls() {
			return GetRuleContexts<RemoteLogicCallsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoteLogicCallsContext remoteLogicCalls(int i) {
			return GetRuleContext<RemoteLogicCallsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public SimpleLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSimpleLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSimpleLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleLoopContext simpleLoop() {
		SimpleLoopContext _localctx = new SimpleLoopContext(Context, State);
		EnterRule(_localctx, 86, RULE_simpleLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LoopName) {
				{
				State = 371;
				Match(LoopName);
				}
			}

			State = 374;
			Match(LBRACK);
			State = 381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 219820944537952448L) != 0)) {
				{
				State = 379;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LBRACE:
				case GT:
				case LT:
				case FSLASH:
				case Note:
				case Rest:
				case Octave:
				case Noise:
				case Tempo:
				case Volume:
				case Tune:
				case Quantization:
				case Pan:
				case Vibrato:
				case Tie:
				case Pitchslide:
				case Instrument:
					{
					State = 375;
					atomics();
					}
					break;
				case L2BRACK:
					{
					State = 376;
					terminalSuperLoop();
					}
					break;
				case STAR:
				case StopRemoteCode:
				case CallRemoteCode:
					{
					State = 377;
					remoteLogicCalls();
					}
					break;
				case HexNumber:
					{
					State = 378;
					hexNumber();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 384;
			Match(RBRACK);
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBERS) {
				{
				State = 385;
				Match(NUMBERS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalSuperLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L2BRACK() { return GetToken(MmlParser.L2BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R2BRACK() { return GetToken(MmlParser.R2BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicsContext[] atomics() {
			return GetRuleContexts<AtomicsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomicsContext atomics(int i) {
			return GetRuleContext<AtomicsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicCallsContext[] logicCalls() {
			return GetRuleContexts<LogicCallsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicCallsContext logicCalls(int i) {
			return GetRuleContext<LogicCallsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public TerminalSuperLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalSuperLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterTerminalSuperLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitTerminalSuperLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminalSuperLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalSuperLoopContext terminalSuperLoop() {
		TerminalSuperLoopContext _localctx = new TerminalSuperLoopContext(Context, State);
		EnterRule(_localctx, 88, RULE_terminalSuperLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			Match(L2BRACK);
			State = 394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 220102419514654912L) != 0)) {
				{
				State = 392;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LBRACE:
				case GT:
				case LT:
				case FSLASH:
				case Note:
				case Rest:
				case Octave:
				case Noise:
				case Tempo:
				case Volume:
				case Tune:
				case Quantization:
				case Pan:
				case Vibrato:
				case Tie:
				case Pitchslide:
				case Instrument:
					{
					State = 389;
					atomics();
					}
					break;
				case STAR:
				case LoopName:
				case StopRemoteCode:
				case CallRemoteCode:
					{
					State = 390;
					logicCalls();
					}
					break;
				case HexNumber:
					{
					State = 391;
					hexNumber();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 397;
			Match(R2BRACK);
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBERS) {
				{
				State = 398;
				Match(NUMBERS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalSimpleLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MmlParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MmlParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopName() { return GetToken(MmlParser.LoopName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicsContext[] atomics() {
			return GetRuleContexts<AtomicsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomicsContext atomics(int i) {
			return GetRuleContext<AtomicsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoteLogicCallsContext[] remoteLogicCalls() {
			return GetRuleContexts<RemoteLogicCallsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoteLogicCallsContext remoteLogicCalls(int i) {
			return GetRuleContext<RemoteLogicCallsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext[] hexNumber() {
			return GetRuleContexts<HexNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber(int i) {
			return GetRuleContext<HexNumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public TerminalSimpleLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalSimpleLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterTerminalSimpleLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitTerminalSimpleLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminalSimpleLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalSimpleLoopContext terminalSimpleLoop() {
		TerminalSimpleLoopContext _localctx = new TerminalSimpleLoopContext(Context, State);
		EnterRule(_localctx, 90, RULE_terminalSimpleLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LoopName) {
				{
				State = 401;
				Match(LoopName);
				}
			}

			State = 404;
			Match(LBRACK);
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 219820944537944256L) != 0)) {
				{
				State = 408;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LBRACE:
				case GT:
				case LT:
				case FSLASH:
				case Note:
				case Rest:
				case Octave:
				case Noise:
				case Tempo:
				case Volume:
				case Tune:
				case Quantization:
				case Pan:
				case Vibrato:
				case Tie:
				case Pitchslide:
				case Instrument:
					{
					State = 405;
					atomics();
					}
					break;
				case STAR:
				case StopRemoteCode:
				case CallRemoteCode:
					{
					State = 406;
					remoteLogicCalls();
					}
					break;
				case HexNumber:
					{
					State = 407;
					hexNumber();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 413;
			Match(RBRACK);
			State = 415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBERS) {
				{
				State = 414;
				Match(NUMBERS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoteCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RemoteCodeName() { return GetToken(MmlParser.RemoteCodeName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MmlParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RemoteCodeContentsContext remoteCodeContents() {
			return GetRuleContext<RemoteCodeContentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MmlParser.RBRACK, 0); }
		public RemoteCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remoteCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterRemoteCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitRemoteCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoteCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoteCodeContext remoteCode() {
		RemoteCodeContext _localctx = new RemoteCodeContext(Context, State);
		EnterRule(_localctx, 92, RULE_remoteCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			Match(RemoteCodeName);
			State = 418;
			Match(LBRACK);
			State = 419;
			remoteCodeContents();
			State = 420;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoteCodeContentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VolumeContext volume() {
			return GetRuleContext<VolumeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HexNumber() { return GetTokens(MmlParser.HexNumber); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber(int i) {
			return GetToken(MmlParser.HexNumber, i);
		}
		public RemoteCodeContentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remoteCodeContents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterRemoteCodeContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitRemoteCodeContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoteCodeContents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoteCodeContentsContext remoteCodeContents() {
		RemoteCodeContentsContext _localctx = new RemoteCodeContentsContext(Context, State);
		EnterRule(_localctx, 94, RULE_remoteCodeContents);
		int _la;
		try {
			State = 433;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 422;
					Match(HexNumber);
					}
					}
					State = 425;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==HexNumber );
				State = 427;
				volume();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 428;
					Match(HexNumber);
					}
					}
					State = 431;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==HexNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopName() { return GetToken(MmlParser.LoopName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public CallLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterCallLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitCallLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallLoopContext callLoop() {
		CallLoopContext _localctx = new CallLoopContext(Context, State);
		EnterRule(_localctx, 96, RULE_callLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			Match(LoopName);
			State = 437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBERS) {
				{
				State = 436;
				Match(NUMBERS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallRemoteCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CallRemoteCode() { return GetToken(MmlParser.CallRemoteCode, 0); }
		public CallRemoteCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callRemoteCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterCallRemoteCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitCallRemoteCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallRemoteCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallRemoteCodeContext callRemoteCode() {
		CallRemoteCodeContext _localctx = new CallRemoteCodeContext(Context, State);
		EnterRule(_localctx, 98, RULE_callRemoteCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			Match(CallRemoteCode);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopRemoteCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StopRemoteCode() { return GetToken(MmlParser.StopRemoteCode, 0); }
		public StopRemoteCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopRemoteCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterStopRemoteCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitStopRemoteCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopRemoteCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopRemoteCodeContext stopRemoteCode() {
		StopRemoteCodeContext _localctx = new StopRemoteCodeContext(Context, State);
		EnterRule(_localctx, 100, RULE_stopRemoteCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			Match(StopRemoteCode);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallPreviousLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MmlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public CallPreviousLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callPreviousLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterCallPreviousLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitCallPreviousLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallPreviousLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallPreviousLoopContext callPreviousLoop() {
		CallPreviousLoopContext _localctx = new CallPreviousLoopContext(Context, State);
		EnterRule(_localctx, 102, RULE_callPreviousLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			Match(STAR);
			State = 445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBERS) {
				{
				State = 444;
				Match(NUMBERS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoloopCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QMARK() { return GetToken(MmlParser.QMARK, 0); }
		public NoloopCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noloopCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterNoloopCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitNoloopCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoloopCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoloopCommandContext noloopCommand() {
		NoloopCommandContext _localctx = new NoloopCommandContext(Context, State);
		EnterRule(_localctx, 104, RULE_noloopCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			Match(QMARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SampleLoadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoadSample() { return GetToken(MmlParser.LoadSample, 0); }
		public SampleLoadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sampleLoad; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSampleLoad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSampleLoad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSampleLoad(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SampleLoadContext sampleLoad() {
		SampleLoadContext _localctx = new SampleLoadContext(Context, State);
		EnterRule(_localctx, 106, RULE_sampleLoad);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			Match(LoadSample);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplacementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReplacementText() { return GetToken(MmlParser.ReplacementText, 0); }
		public ReplacementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replacements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterReplacements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitReplacements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplacements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplacementsContext replacements() {
		ReplacementsContext _localctx = new ReplacementsContext(Context, State);
		EnterRule(_localctx, 108, RULE_replacements);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			Match(ReplacementText);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber() { return GetToken(MmlParser.HexNumber, 0); }
		public HexNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterHexNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitHexNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HexNumberContext hexNumber() {
		HexNumberContext _localctx = new HexNumberContext(Context, State);
		EnterRule(_localctx, 110, RULE_hexNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			Match(HexNumber);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,79,456,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,4,0,114,
		8,0,11,0,12,0,115,1,0,3,0,119,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,4,1,131,8,1,11,1,12,1,132,1,1,3,1,136,8,1,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,3,2,146,8,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,5,4,155,8,4,10,4,12,4,
		158,9,4,1,4,5,4,161,8,4,10,4,12,4,164,9,4,3,4,166,8,4,1,5,1,5,1,5,5,5,
		171,8,5,10,5,12,5,174,9,5,1,5,1,5,1,6,1,6,4,6,180,8,6,11,6,12,6,181,1,
		6,1,6,4,6,186,8,6,11,6,12,6,187,1,6,1,6,4,6,192,8,6,11,6,12,6,193,3,6,
		196,8,6,1,7,1,7,1,7,5,7,201,8,7,10,7,12,7,204,9,7,1,7,1,7,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,218,8,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,
		1,11,1,12,1,12,1,12,1,12,5,12,232,8,12,10,12,12,12,235,9,12,1,12,1,12,
		1,12,3,12,240,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,251,
		8,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,5,16,260,8,16,10,16,12,16,263,
		9,16,1,17,1,17,1,18,1,18,1,18,1,18,3,18,271,8,18,1,19,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,290,
		8,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,
		1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,
		3,32,319,8,32,1,32,1,32,3,32,323,8,32,1,32,1,32,3,32,327,8,32,1,32,1,32,
		1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,3,38,343,8,
		38,1,39,1,39,3,39,347,8,39,1,40,1,40,3,40,351,8,40,1,41,1,41,1,41,3,41,
		356,8,41,1,42,1,42,1,42,1,42,1,42,5,42,363,8,42,10,42,12,42,366,9,42,1,
		42,1,42,3,42,370,8,42,1,43,3,43,373,8,43,1,43,1,43,1,43,1,43,1,43,5,43,
		380,8,43,10,43,12,43,383,9,43,1,43,1,43,3,43,387,8,43,1,44,1,44,1,44,1,
		44,5,44,393,8,44,10,44,12,44,396,9,44,1,44,1,44,3,44,400,8,44,1,45,3,45,
		403,8,45,1,45,1,45,1,45,1,45,5,45,409,8,45,10,45,12,45,412,9,45,1,45,1,
		45,3,45,416,8,45,1,46,1,46,1,46,1,46,1,46,1,47,4,47,424,8,47,11,47,12,
		47,425,1,47,1,47,4,47,430,8,47,11,47,12,47,431,3,47,434,8,47,1,48,1,48,
		3,48,438,8,48,1,49,1,49,1,50,1,50,1,51,1,51,3,51,446,8,51,1,52,1,52,1,
		53,1,53,1,54,1,54,1,55,1,55,1,55,0,0,56,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
		72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,0,1,
		2,0,28,28,54,54,494,0,118,1,0,0,0,2,135,1,0,0,0,4,145,1,0,0,0,6,147,1,
		0,0,0,8,165,1,0,0,0,10,167,1,0,0,0,12,195,1,0,0,0,14,197,1,0,0,0,16,217,
		1,0,0,0,18,219,1,0,0,0,20,222,1,0,0,0,22,225,1,0,0,0,24,239,1,0,0,0,26,
		250,1,0,0,0,28,252,1,0,0,0,30,255,1,0,0,0,32,257,1,0,0,0,34,264,1,0,0,
		0,36,270,1,0,0,0,38,289,1,0,0,0,40,291,1,0,0,0,42,293,1,0,0,0,44,295,1,
		0,0,0,46,297,1,0,0,0,48,299,1,0,0,0,50,301,1,0,0,0,52,303,1,0,0,0,54,305,
		1,0,0,0,56,307,1,0,0,0,58,309,1,0,0,0,60,311,1,0,0,0,62,313,1,0,0,0,64,
		315,1,0,0,0,66,330,1,0,0,0,68,332,1,0,0,0,70,334,1,0,0,0,72,336,1,0,0,
		0,74,338,1,0,0,0,76,342,1,0,0,0,78,346,1,0,0,0,80,350,1,0,0,0,82,355,1,
		0,0,0,84,357,1,0,0,0,86,372,1,0,0,0,88,388,1,0,0,0,90,402,1,0,0,0,92,417,
		1,0,0,0,94,433,1,0,0,0,96,435,1,0,0,0,98,439,1,0,0,0,100,441,1,0,0,0,102,
		443,1,0,0,0,104,447,1,0,0,0,106,449,1,0,0,0,108,451,1,0,0,0,110,453,1,
		0,0,0,112,114,3,2,1,0,113,112,1,0,0,0,114,115,1,0,0,0,115,113,1,0,0,0,
		115,116,1,0,0,0,116,119,1,0,0,0,117,119,5,0,0,1,118,113,1,0,0,0,118,117,
		1,0,0,0,119,1,1,0,0,0,120,136,3,4,2,0,121,136,3,32,16,0,122,136,3,92,46,
		0,123,136,3,66,33,0,124,136,3,68,34,0,125,136,3,70,35,0,126,136,3,108,
		54,0,127,136,3,104,52,0,128,136,5,33,0,0,129,131,5,56,0,0,130,129,1,0,
		0,0,131,132,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,136,1,0,0,0,134,
		136,3,34,17,0,135,120,1,0,0,0,135,121,1,0,0,0,135,122,1,0,0,0,135,123,
		1,0,0,0,135,124,1,0,0,0,135,125,1,0,0,0,135,126,1,0,0,0,135,127,1,0,0,
		0,135,128,1,0,0,0,135,130,1,0,0,0,135,134,1,0,0,0,136,3,1,0,0,0,137,146,
		3,28,14,0,138,146,3,14,7,0,139,146,3,6,3,0,140,146,3,10,5,0,141,146,3,
		20,10,0,142,146,3,18,9,0,143,146,3,22,11,0,144,146,3,24,12,0,145,137,1,
		0,0,0,145,138,1,0,0,0,145,139,1,0,0,0,145,140,1,0,0,0,145,141,1,0,0,0,
		145,142,1,0,0,0,145,143,1,0,0,0,145,144,1,0,0,0,146,5,1,0,0,0,147,148,
		5,59,0,0,148,149,5,7,0,0,149,150,3,8,4,0,150,151,5,8,0,0,151,7,1,0,0,0,
		152,156,5,77,0,0,153,155,5,33,0,0,154,153,1,0,0,0,155,158,1,0,0,0,156,
		154,1,0,0,0,156,157,1,0,0,0,157,166,1,0,0,0,158,156,1,0,0,0,159,161,5,
		33,0,0,160,159,1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,
		163,166,1,0,0,0,164,162,1,0,0,0,165,152,1,0,0,0,165,162,1,0,0,0,166,9,
		1,0,0,0,167,168,5,60,0,0,168,172,5,7,0,0,169,171,3,12,6,0,170,169,1,0,
		0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,175,1,0,0,0,174,
		172,1,0,0,0,175,176,5,8,0,0,176,11,1,0,0,0,177,179,5,33,0,0,178,180,5,
		56,0,0,179,178,1,0,0,0,180,181,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,
		182,196,1,0,0,0,183,185,5,57,0,0,184,186,5,56,0,0,185,184,1,0,0,0,186,
		187,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,196,1,0,0,0,189,191,3,
		50,25,0,190,192,5,56,0,0,191,190,1,0,0,0,192,193,1,0,0,0,193,191,1,0,0,
		0,193,194,1,0,0,0,194,196,1,0,0,0,195,177,1,0,0,0,195,183,1,0,0,0,195,
		189,1,0,0,0,196,13,1,0,0,0,197,198,5,61,0,0,198,202,5,7,0,0,199,201,3,
		16,8,0,200,199,1,0,0,0,201,204,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,
		203,205,1,0,0,0,204,202,1,0,0,0,205,206,5,8,0,0,206,15,1,0,0,0,207,208,
		5,62,0,0,208,218,5,33,0,0,209,210,5,63,0,0,210,218,5,33,0,0,211,212,5,
		64,0,0,212,218,5,33,0,0,213,214,5,65,0,0,214,218,5,33,0,0,215,216,5,66,
		0,0,216,218,5,33,0,0,217,207,1,0,0,0,217,209,1,0,0,0,217,211,1,0,0,0,217,
		213,1,0,0,0,217,215,1,0,0,0,218,17,1,0,0,0,219,220,5,67,0,0,220,221,5,
		56,0,0,221,19,1,0,0,0,222,223,5,68,0,0,223,224,5,33,0,0,224,21,1,0,0,0,
		225,226,5,69,0,0,226,23,1,0,0,0,227,228,5,70,0,0,228,233,5,7,0,0,229,230,
		5,1,0,0,230,232,3,26,13,0,231,229,1,0,0,0,232,235,1,0,0,0,233,231,1,0,
		0,0,233,234,1,0,0,0,234,236,1,0,0,0,235,233,1,0,0,0,236,240,5,8,0,0,237,
		238,5,70,0,0,238,240,3,26,13,0,239,227,1,0,0,0,239,237,1,0,0,0,240,25,
		1,0,0,0,241,251,5,71,0,0,242,243,5,72,0,0,243,251,5,28,0,0,244,251,5,73,
		0,0,245,251,5,74,0,0,246,251,5,75,0,0,247,248,5,33,0,0,248,251,5,28,0,
		0,249,251,5,33,0,0,250,241,1,0,0,0,250,242,1,0,0,0,250,244,1,0,0,0,250,
		245,1,0,0,0,250,246,1,0,0,0,250,247,1,0,0,0,250,249,1,0,0,0,251,27,1,0,
		0,0,252,253,5,58,0,0,253,254,3,30,15,0,254,29,1,0,0,0,255,256,7,0,0,0,
		256,31,1,0,0,0,257,261,5,76,0,0,258,260,3,36,18,0,259,258,1,0,0,0,260,
		263,1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,33,1,0,0,0,263,261,1,0,
		0,0,264,265,5,24,0,0,265,35,1,0,0,0,266,271,3,38,19,0,267,271,3,76,38,
		0,268,271,3,106,53,0,269,271,5,56,0,0,270,266,1,0,0,0,270,267,1,0,0,0,
		270,268,1,0,0,0,270,269,1,0,0,0,271,37,1,0,0,0,272,290,3,62,31,0,273,290,
		3,40,20,0,274,290,3,42,21,0,275,290,3,44,22,0,276,290,3,46,23,0,277,290,
		3,48,24,0,278,290,3,50,25,0,279,290,3,64,32,0,280,290,3,52,26,0,281,290,
		3,54,27,0,282,290,3,72,36,0,283,290,3,56,28,0,284,290,3,58,29,0,285,290,
		3,60,30,0,286,290,3,70,35,0,287,290,3,34,17,0,288,290,3,74,37,0,289,272,
		1,0,0,0,289,273,1,0,0,0,289,274,1,0,0,0,289,275,1,0,0,0,289,276,1,0,0,
		0,289,277,1,0,0,0,289,278,1,0,0,0,289,279,1,0,0,0,289,280,1,0,0,0,289,
		281,1,0,0,0,289,282,1,0,0,0,289,283,1,0,0,0,289,284,1,0,0,0,289,285,1,
		0,0,0,289,286,1,0,0,0,289,287,1,0,0,0,289,288,1,0,0,0,290,39,1,0,0,0,291,
		292,5,34,0,0,292,41,1,0,0,0,293,294,5,35,0,0,294,43,1,0,0,0,295,296,5,
		36,0,0,296,45,1,0,0,0,297,298,5,22,0,0,298,47,1,0,0,0,299,300,5,21,0,0,
		300,49,1,0,0,0,301,302,5,37,0,0,302,51,1,0,0,0,303,304,5,39,0,0,304,53,
		1,0,0,0,305,306,5,40,0,0,306,55,1,0,0,0,307,308,5,42,0,0,308,57,1,0,0,
		0,309,310,5,44,0,0,310,59,1,0,0,0,311,312,5,45,0,0,312,61,1,0,0,0,313,
		314,5,47,0,0,314,63,1,0,0,0,315,318,5,7,0,0,316,319,3,40,20,0,317,319,
		3,42,21,0,318,316,1,0,0,0,318,317,1,0,0,0,319,322,1,0,0,0,320,323,3,40,
		20,0,321,323,3,42,21,0,322,320,1,0,0,0,322,321,1,0,0,0,323,326,1,0,0,0,
		324,327,3,40,20,0,325,327,3,42,21,0,326,324,1,0,0,0,326,325,1,0,0,0,327,
		328,1,0,0,0,328,329,5,8,0,0,329,65,1,0,0,0,330,331,5,41,0,0,331,67,1,0,
		0,0,332,333,5,43,0,0,333,69,1,0,0,0,334,335,5,38,0,0,335,71,1,0,0,0,336,
		337,5,57,0,0,337,73,1,0,0,0,338,339,5,46,0,0,339,75,1,0,0,0,340,343,3,
		78,39,0,341,343,3,80,40,0,342,340,1,0,0,0,342,341,1,0,0,0,343,77,1,0,0,
		0,344,347,3,84,42,0,345,347,3,86,43,0,346,344,1,0,0,0,346,345,1,0,0,0,
		347,79,1,0,0,0,348,351,3,96,48,0,349,351,3,82,41,0,350,348,1,0,0,0,350,
		349,1,0,0,0,351,81,1,0,0,0,352,356,3,98,49,0,353,356,3,102,51,0,354,356,
		3,100,50,0,355,352,1,0,0,0,355,353,1,0,0,0,355,354,1,0,0,0,356,83,1,0,
		0,0,357,364,5,13,0,0,358,363,3,38,19,0,359,363,3,90,45,0,360,363,3,80,
		40,0,361,363,3,110,55,0,362,358,1,0,0,0,362,359,1,0,0,0,362,360,1,0,0,
		0,362,361,1,0,0,0,363,366,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,
		367,1,0,0,0,366,364,1,0,0,0,367,369,5,14,0,0,368,370,5,28,0,0,369,368,
		1,0,0,0,369,370,1,0,0,0,370,85,1,0,0,0,371,373,5,48,0,0,372,371,1,0,0,
		0,372,373,1,0,0,0,373,374,1,0,0,0,374,381,5,11,0,0,375,380,3,38,19,0,376,
		380,3,88,44,0,377,380,3,82,41,0,378,380,3,110,55,0,379,375,1,0,0,0,379,
		376,1,0,0,0,379,377,1,0,0,0,379,378,1,0,0,0,380,383,1,0,0,0,381,379,1,
		0,0,0,381,382,1,0,0,0,382,384,1,0,0,0,383,381,1,0,0,0,384,386,5,12,0,0,
		385,387,5,28,0,0,386,385,1,0,0,0,386,387,1,0,0,0,387,87,1,0,0,0,388,394,
		5,13,0,0,389,393,3,38,19,0,390,393,3,80,40,0,391,393,3,110,55,0,392,389,
		1,0,0,0,392,390,1,0,0,0,392,391,1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,
		0,394,395,1,0,0,0,395,397,1,0,0,0,396,394,1,0,0,0,397,399,5,14,0,0,398,
		400,5,28,0,0,399,398,1,0,0,0,399,400,1,0,0,0,400,89,1,0,0,0,401,403,5,
		48,0,0,402,401,1,0,0,0,402,403,1,0,0,0,403,404,1,0,0,0,404,410,5,11,0,
		0,405,409,3,38,19,0,406,409,3,82,41,0,407,409,3,110,55,0,408,405,1,0,0,
		0,408,406,1,0,0,0,408,407,1,0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,
		411,1,0,0,0,411,413,1,0,0,0,412,410,1,0,0,0,413,415,5,12,0,0,414,416,5,
		28,0,0,415,414,1,0,0,0,415,416,1,0,0,0,416,91,1,0,0,0,417,418,5,49,0,0,
		418,419,5,11,0,0,419,420,3,94,47,0,420,421,5,12,0,0,421,93,1,0,0,0,422,
		424,5,56,0,0,423,422,1,0,0,0,424,425,1,0,0,0,425,423,1,0,0,0,425,426,1,
		0,0,0,426,427,1,0,0,0,427,434,3,52,26,0,428,430,5,56,0,0,429,428,1,0,0,
		0,430,431,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,434,1,0,0,0,433,
		423,1,0,0,0,433,429,1,0,0,0,434,95,1,0,0,0,435,437,5,48,0,0,436,438,5,
		28,0,0,437,436,1,0,0,0,437,438,1,0,0,0,438,97,1,0,0,0,439,440,5,51,0,0,
		440,99,1,0,0,0,441,442,5,50,0,0,442,101,1,0,0,0,443,445,5,6,0,0,444,446,
		5,28,0,0,445,444,1,0,0,0,445,446,1,0,0,0,446,103,1,0,0,0,447,448,5,25,
		0,0,448,105,1,0,0,0,449,450,5,53,0,0,450,107,1,0,0,0,451,452,5,32,0,0,
		452,109,1,0,0,0,453,454,5,56,0,0,454,111,1,0,0,0,47,115,118,132,135,145,
		156,162,165,172,181,187,193,195,202,217,233,239,250,261,270,289,318,322,
		326,342,346,350,355,362,364,369,372,379,381,386,392,394,399,402,408,410,
		415,425,431,433,437,445
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
