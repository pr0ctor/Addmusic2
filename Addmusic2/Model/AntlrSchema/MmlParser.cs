//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/Projects/Visual Studio/Addmusic2/Addmusic2/Addmusic2/Mml.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MmlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		POUND=1, DOLLAR=2, COMMAT=3, AMPER=4, BANG=5, STAR=6, LBRACE=7, RBRACE=8, 
		LPAREN=9, RPAREN=10, LBRACK=11, RBRACK=12, L2BRACK=13, R2BRACK=14, DQUOTE=15, 
		SQUOTE=16, SHARP=17, FLAT=18, DOT=19, TIE=20, GT=21, LT=22, COMMA=23, 
		FSLASH=24, QMARK=25, EQUAL=26, SEMICOLON=27, NUMBERS=28, UNUMBERS=29, 
		REMOTECODENUMBERS=30, ReplacementText=31, StringLiteral=32, Note=33, Rest=34, 
		Octave=35, Noise=36, Tempo=37, Volume=38, Tune=39, Length=40, Quantization=41, 
		GlobalVolume=42, Pan=43, Vibrato=44, Tie=45, Question=46, LoopName=47, 
		RemoteCodeName=48, StopRemoteCode=49, CallRemoteCode=50, CallPreviousLoop=51, 
		LoadSample=52, AmkV1=53, HexDigits=54, HexNumber=55, Instrument=56, Amk=57, 
		Amm=58, Am4=59, Samples=60, Instruments=61, Spc=62, SpcAuthor=63, SpcGame=64, 
		SpcComment=65, SpcTitle=66, SpcLength=67, Pad=68, Path=69, Halvetempo=70, 
		Option=71, Tempoimmunity=72, Dividetempo=73, Smwvtable=74, Nspcvtable=75, 
		Noloop=76, Amk109hotpatch=77, Channel=78, SampleOptimization=79, WHITESPACE=80, 
		Comment=81;
	public const int
		RULE_song = 0, RULE_songElement = 1, RULE_specialDirective = 2, RULE_samples = 3, 
		RULE_samplesList = 4, RULE_instruments = 5, RULE_instrumentsList = 6, 
		RULE_spc = 7, RULE_spcList = 8, RULE_pad = 9, RULE_path = 10, RULE_halvetempo = 11, 
		RULE_option = 12, RULE_optionItem = 13, RULE_amk = 14, RULE_amm = 15, 
		RULE_am4 = 16, RULE_amkVersion = 17, RULE_soundChannel = 18, RULE_introEnd = 19, 
		RULE_channelContents = 20, RULE_atomics = 21, RULE_note = 22, RULE_rest = 23, 
		RULE_octave = 24, RULE_lowerOctave = 25, RULE_raiseOctave = 26, RULE_noiseNote = 27, 
		RULE_volume = 28, RULE_tune = 29, RULE_quantization = 30, RULE_pan = 31, 
		RULE_vibrato = 32, RULE_pitchslide = 33, RULE_triplet = 34, RULE_defaultLength = 35, 
		RULE_globalVolume = 36, RULE_tempo = 37, RULE_instrument = 38, RULE_nakedTie = 39, 
		RULE_qmark = 40, RULE_loopers = 41, RULE_logicControls = 42, RULE_logicCalls = 43, 
		RULE_remoteLogicCalls = 44, RULE_superLoop = 45, RULE_superLoopContents = 46, 
		RULE_simpleLoop = 47, RULE_simpleLoopContents = 48, RULE_terminalSuperLoop = 49, 
		RULE_terminalSuperLoopContents = 50, RULE_terminalSimpleLoop = 51, RULE_terminalSimpleLoopContents = 52, 
		RULE_remoteCode = 53, RULE_remoteCodeContents = 54, RULE_callLoop = 55, 
		RULE_callRemoteCode = 56, RULE_stopRemoteCode = 57, RULE_callPreviousLoop = 58, 
		RULE_noloopCommand = 59, RULE_sampleLoad = 60, RULE_replacements = 61, 
		RULE_hexNumber = 62;
	public static readonly string[] ruleNames = {
		"song", "songElement", "specialDirective", "samples", "samplesList", "instruments", 
		"instrumentsList", "spc", "spcList", "pad", "path", "halvetempo", "option", 
		"optionItem", "amk", "amm", "am4", "amkVersion", "soundChannel", "introEnd", 
		"channelContents", "atomics", "note", "rest", "octave", "lowerOctave", 
		"raiseOctave", "noiseNote", "volume", "tune", "quantization", "pan", "vibrato", 
		"pitchslide", "triplet", "defaultLength", "globalVolume", "tempo", "instrument", 
		"nakedTie", "qmark", "loopers", "logicControls", "logicCalls", "remoteLogicCalls", 
		"superLoop", "superLoopContents", "simpleLoop", "simpleLoopContents", 
		"terminalSuperLoop", "terminalSuperLoopContents", "terminalSimpleLoop", 
		"terminalSimpleLoopContents", "remoteCode", "remoteCodeContents", "callLoop", 
		"callRemoteCode", "stopRemoteCode", "callPreviousLoop", "noloopCommand", 
		"sampleLoad", "replacements", "hexNumber"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", "'$'", "'@'", "'&'", "'!'", "'*'", "'{'", "'}'", "'('", "')'", 
		"'['", "']'", "'[['", "']]'", "'\"'", "'''", "'+'", "'-'", "'.'", "'^'", 
		"'>'", "'<'", "','", "'/'", "'?'", "'='", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "POUND", "DOLLAR", "COMMAT", "AMPER", "BANG", "STAR", "LBRACE", 
		"RBRACE", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "L2BRACK", "R2BRACK", 
		"DQUOTE", "SQUOTE", "SHARP", "FLAT", "DOT", "TIE", "GT", "LT", "COMMA", 
		"FSLASH", "QMARK", "EQUAL", "SEMICOLON", "NUMBERS", "UNUMBERS", "REMOTECODENUMBERS", 
		"ReplacementText", "StringLiteral", "Note", "Rest", "Octave", "Noise", 
		"Tempo", "Volume", "Tune", "Length", "Quantization", "GlobalVolume", "Pan", 
		"Vibrato", "Tie", "Question", "LoopName", "RemoteCodeName", "StopRemoteCode", 
		"CallRemoteCode", "CallPreviousLoop", "LoadSample", "AmkV1", "HexDigits", 
		"HexNumber", "Instrument", "Amk", "Amm", "Am4", "Samples", "Instruments", 
		"Spc", "SpcAuthor", "SpcGame", "SpcComment", "SpcTitle", "SpcLength", 
		"Pad", "Path", "Halvetempo", "Option", "Tempoimmunity", "Dividetempo", 
		"Smwvtable", "Nspcvtable", "Noloop", "Amk109hotpatch", "Channel", "SampleOptimization", 
		"WHITESPACE", "Comment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Mml.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MmlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MmlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MmlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SongContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SongElementContext[] songElement() {
			return GetRuleContexts<SongElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SongElementContext songElement(int i) {
			return GetRuleContext<SongElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MmlParser.Eof, 0); }
		public SongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_song; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSong(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSong(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SongContext song() {
		SongContext _localctx = new SongContext(Context, State);
		EnterRule(_localctx, 0, RULE_song);
		int _la;
		try {
			State = 132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FSLASH:
			case QMARK:
			case ReplacementText:
			case StringLiteral:
			case Tempo:
			case Length:
			case GlobalVolume:
			case Question:
			case RemoteCodeName:
			case HexNumber:
			case Amk:
			case Amm:
			case Am4:
			case Samples:
			case Instruments:
			case Spc:
			case Pad:
			case Path:
			case Halvetempo:
			case Option:
			case Channel:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 126;
					songElement();
					}
					}
					State = 129;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & 18278824634818947L) != 0) );
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131;
				Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SongElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecialDirectiveContext specialDirective() {
			return GetRuleContext<SpecialDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SoundChannelContext soundChannel() {
			return GetRuleContext<SoundChannelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoteCodeContext remoteCode() {
			return GetRuleContext<RemoteCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultLengthContext defaultLength() {
			return GetRuleContext<DefaultLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVolumeContext globalVolume() {
			return GetRuleContext<GlobalVolumeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempoContext tempo() {
			return GetRuleContext<TempoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplacementsContext replacements() {
			return GetRuleContext<ReplacementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoloopCommandContext noloopCommand() {
			return GetRuleContext<NoloopCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MmlParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntroEndContext introEnd() {
			return GetRuleContext<IntroEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QmarkContext qmark() {
			return GetRuleContext<QmarkContext>(0);
		}
		public SongElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_songElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSongElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSongElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSongElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SongElementContext songElement() {
		SongElementContext _localctx = new SongElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_songElement);
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 134;
				specialDirective();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 135;
				soundChannel();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 136;
				remoteCode();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 137;
				defaultLength();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 138;
				globalVolume();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 139;
				tempo();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 140;
				replacements();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 141;
				noloopCommand();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 142;
				Match(StringLiteral);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 143;
				hexNumber();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 144;
				introEnd();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 145;
				remoteCode();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 146;
				qmark();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AmkContext amk() {
			return GetRuleContext<AmkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpcContext spc() {
			return GetRuleContext<SpcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SamplesContext samples() {
			return GetRuleContext<SamplesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstrumentsContext instruments() {
			return GetRuleContext<InstrumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PadContext pad() {
			return GetRuleContext<PadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HalvetempoContext halvetempo() {
			return GetRuleContext<HalvetempoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option() {
			return GetRuleContext<OptionContext>(0);
		}
		public SpecialDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSpecialDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSpecialDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialDirectiveContext specialDirective() {
		SpecialDirectiveContext _localctx = new SpecialDirectiveContext(Context, State);
		EnterRule(_localctx, 4, RULE_specialDirective);
		try {
			State = 157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Amk:
			case Amm:
			case Am4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 149;
				amk();
				}
				break;
			case Spc:
				EnterOuterAlt(_localctx, 2);
				{
				State = 150;
				spc();
				}
				break;
			case Samples:
				EnterOuterAlt(_localctx, 3);
				{
				State = 151;
				samples();
				}
				break;
			case Instruments:
				EnterOuterAlt(_localctx, 4);
				{
				State = 152;
				instruments();
				}
				break;
			case Path:
				EnterOuterAlt(_localctx, 5);
				{
				State = 153;
				path();
				}
				break;
			case Pad:
				EnterOuterAlt(_localctx, 6);
				{
				State = 154;
				pad();
				}
				break;
			case Halvetempo:
				EnterOuterAlt(_localctx, 7);
				{
				State = 155;
				halvetempo();
				}
				break;
			case Option:
				EnterOuterAlt(_localctx, 8);
				{
				State = 156;
				option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SamplesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Samples() { return GetToken(MmlParser.Samples, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MmlParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SamplesListContext samplesList() {
			return GetRuleContext<SamplesListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MmlParser.RBRACE, 0); }
		public SamplesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_samples; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSamples(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSamples(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSamples(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SamplesContext samples() {
		SamplesContext _localctx = new SamplesContext(Context, State);
		EnterRule(_localctx, 6, RULE_samples);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			Match(Samples);
			State = 160;
			Match(LBRACE);
			State = 161;
			samplesList();
			State = 162;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SamplesListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SampleOptimization() { return GetToken(MmlParser.SampleOptimization, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteral() { return GetTokens(MmlParser.StringLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral(int i) {
			return GetToken(MmlParser.StringLiteral, i);
		}
		public SamplesListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_samplesList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSamplesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSamplesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSamplesList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SamplesListContext samplesList() {
		SamplesListContext _localctx = new SamplesListContext(Context, State);
		EnterRule(_localctx, 8, RULE_samplesList);
		int _la;
		try {
			State = 177;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SampleOptimization:
				EnterOuterAlt(_localctx, 1);
				{
				State = 164;
				Match(SampleOptimization);
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==StringLiteral) {
					{
					{
					State = 165;
					Match(StringLiteral);
					}
					}
					State = 170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RBRACE:
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==StringLiteral) {
					{
					{
					State = 171;
					Match(StringLiteral);
					}
					}
					State = 176;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstrumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instruments() { return GetToken(MmlParser.Instruments, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MmlParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MmlParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstrumentsListContext[] instrumentsList() {
			return GetRuleContexts<InstrumentsListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstrumentsListContext instrumentsList(int i) {
			return GetRuleContext<InstrumentsListContext>(i);
		}
		public InstrumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterInstruments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitInstruments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstrumentsContext instruments() {
		InstrumentsContext _localctx = new InstrumentsContext(Context, State);
		EnterRule(_localctx, 10, RULE_instruments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(Instruments);
			State = 180;
			Match(LBRACE);
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 72057667052371968L) != 0)) {
				{
				{
				State = 181;
				instrumentsList();
				}
				}
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 187;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstrumentsListContext : ParserRuleContext {
		public InstrumentsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instrumentsList; } }
	 
		public InstrumentsListContext() { }
		public virtual void CopyFrom(InstrumentsListContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InstrumentListItemContext : InstrumentsListContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstrumentContext instrument() {
			return GetRuleContext<InstrumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HexNumber() { return GetTokens(MmlParser.HexNumber); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber(int i) {
			return GetToken(MmlParser.HexNumber, i);
		}
		public InstrumentListItemContext(InstrumentsListContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterInstrumentListItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitInstrumentListItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstrumentListItem(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NamedInstrumentListItemContext : InstrumentsListContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MmlParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HexNumber() { return GetTokens(MmlParser.HexNumber); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber(int i) {
			return GetToken(MmlParser.HexNumber, i);
		}
		public NamedInstrumentListItemContext(InstrumentsListContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterNamedInstrumentListItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitNamedInstrumentListItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedInstrumentListItem(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoiseInstrumentListItemContext : InstrumentsListContext {
		[System.Diagnostics.DebuggerNonUserCode] public NoiseNoteContext noiseNote() {
			return GetRuleContext<NoiseNoteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HexNumber() { return GetTokens(MmlParser.HexNumber); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber(int i) {
			return GetToken(MmlParser.HexNumber, i);
		}
		public NoiseInstrumentListItemContext(InstrumentsListContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterNoiseInstrumentListItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitNoiseInstrumentListItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoiseInstrumentListItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstrumentsListContext instrumentsList() {
		InstrumentsListContext _localctx = new InstrumentsListContext(Context, State);
		EnterRule(_localctx, 12, RULE_instrumentsList);
		int _la;
		try {
			State = 207;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringLiteral:
				_localctx = new NamedInstrumentListItemContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 189;
				Match(StringLiteral);
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 190;
					Match(HexNumber);
					}
					}
					State = 193;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==HexNumber );
				}
				break;
			case Instrument:
				_localctx = new InstrumentListItemContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 195;
				instrument();
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 196;
					Match(HexNumber);
					}
					}
					State = 199;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==HexNumber );
				}
				break;
			case Noise:
				_localctx = new NoiseInstrumentListItemContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 201;
				noiseNote();
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 202;
					Match(HexNumber);
					}
					}
					State = 205;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==HexNumber );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Spc() { return GetToken(MmlParser.Spc, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MmlParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MmlParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpcListContext[] spcList() {
			return GetRuleContexts<SpcListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpcListContext spcList(int i) {
			return GetRuleContext<SpcListContext>(i);
		}
		public SpcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSpc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSpc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpcContext spc() {
		SpcContext _localctx = new SpcContext(Context, State);
		EnterRule(_localctx, 14, RULE_spc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(Spc);
			State = 210;
			Match(LBRACE);
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & 31L) != 0)) {
				{
				{
				State = 211;
				spcList();
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 217;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpcListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SpcAuthor() { return GetToken(MmlParser.SpcAuthor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MmlParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SpcGame() { return GetToken(MmlParser.SpcGame, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SpcComment() { return GetToken(MmlParser.SpcComment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SpcTitle() { return GetToken(MmlParser.SpcTitle, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SpcLength() { return GetToken(MmlParser.SpcLength, 0); }
		public SpcListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spcList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSpcList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSpcList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpcList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpcListContext spcList() {
		SpcListContext _localctx = new SpcListContext(Context, State);
		EnterRule(_localctx, 16, RULE_spcList);
		try {
			State = 229;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SpcAuthor:
				EnterOuterAlt(_localctx, 1);
				{
				State = 219;
				Match(SpcAuthor);
				State = 220;
				Match(StringLiteral);
				}
				break;
			case SpcGame:
				EnterOuterAlt(_localctx, 2);
				{
				State = 221;
				Match(SpcGame);
				State = 222;
				Match(StringLiteral);
				}
				break;
			case SpcComment:
				EnterOuterAlt(_localctx, 3);
				{
				State = 223;
				Match(SpcComment);
				State = 224;
				Match(StringLiteral);
				}
				break;
			case SpcTitle:
				EnterOuterAlt(_localctx, 4);
				{
				State = 225;
				Match(SpcTitle);
				State = 226;
				Match(StringLiteral);
				}
				break;
			case SpcLength:
				EnterOuterAlt(_localctx, 5);
				{
				State = 227;
				Match(SpcLength);
				State = 228;
				Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pad() { return GetToken(MmlParser.Pad, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber() { return GetToken(MmlParser.HexNumber, 0); }
		public PadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pad; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterPad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitPad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPad(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PadContext pad() {
		PadContext _localctx = new PadContext(Context, State);
		EnterRule(_localctx, 18, RULE_pad);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(Pad);
			State = 232;
			Match(HexNumber);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Path() { return GetToken(MmlParser.Path, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MmlParser.StringLiteral, 0); }
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		PathContext _localctx = new PathContext(Context, State);
		EnterRule(_localctx, 20, RULE_path);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(Path);
			State = 235;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HalvetempoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Halvetempo() { return GetToken(MmlParser.Halvetempo, 0); }
		public HalvetempoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_halvetempo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterHalvetempo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitHalvetempo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHalvetempo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HalvetempoContext halvetempo() {
		HalvetempoContext _localctx = new HalvetempoContext(Context, State);
		EnterRule(_localctx, 22, RULE_halvetempo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(Halvetempo);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
	 
		public OptionContext() { }
		public virtual void CopyFrom(OptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionGroupContext : OptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Option() { return GetToken(MmlParser.Option, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MmlParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MmlParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] POUND() { return GetTokens(MmlParser.POUND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POUND(int i) {
			return GetToken(MmlParser.POUND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionItemContext[] optionItem() {
			return GetRuleContexts<OptionItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionItemContext optionItem(int i) {
			return GetRuleContext<OptionItemContext>(i);
		}
		public OptionGroupContext(OptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterOptionGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitOptionGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionGroup(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleOptionContext : OptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Option() { return GetToken(MmlParser.Option, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionItemContext optionItem() {
			return GetRuleContext<OptionItemContext>(0);
		}
		public SingleOptionContext(OptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSingleOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSingleOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 24, RULE_option);
		int _la;
		try {
			State = 251;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new OptionGroupContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 239;
				Match(Option);
				State = 240;
				Match(LBRACE);
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==POUND) {
					{
					{
					State = 241;
					Match(POUND);
					State = 242;
					optionItem();
					}
					}
					State = 247;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 248;
				Match(RBRACE);
				}
				break;
			case 2:
				_localctx = new SingleOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 249;
				Match(Option);
				State = 250;
				optionItem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tempoimmunity() { return GetToken(MmlParser.Tempoimmunity, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dividetempo() { return GetToken(MmlParser.Dividetempo, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Smwvtable() { return GetToken(MmlParser.Smwvtable, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Nspcvtable() { return GetToken(MmlParser.Nspcvtable, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Noloop() { return GetToken(MmlParser.Noloop, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Amk109hotpatch() { return GetToken(MmlParser.Amk109hotpatch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(MmlParser.StringLiteral, 0); }
		public OptionItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterOptionItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitOptionItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionItemContext optionItem() {
		OptionItemContext _localctx = new OptionItemContext(Context, State);
		EnterRule(_localctx, 26, RULE_optionItem);
		try {
			State = 263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 253;
				Match(Tempoimmunity);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 254;
				Match(Dividetempo);
				State = 255;
				Match(NUMBERS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 256;
				Match(Smwvtable);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 257;
				Match(Nspcvtable);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 258;
				Match(Noloop);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 259;
				Match(Amk109hotpatch);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 260;
				Match(StringLiteral);
				State = 261;
				Match(NUMBERS);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 262;
				Match(StringLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmkContext : ParserRuleContext {
		public AmkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amk; } }
	 
		public AmkContext() { }
		public virtual void CopyFrom(AmkContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AmmVersionContext : AmkContext {
		[System.Diagnostics.DebuggerNonUserCode] public AmmContext amm() {
			return GetRuleContext<AmmContext>(0);
		}
		public AmmVersionContext(AmkContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterAmmVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitAmmVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmmVersion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Am4VersionContext : AmkContext {
		[System.Diagnostics.DebuggerNonUserCode] public Am4Context am4() {
			return GetRuleContext<Am4Context>(0);
		}
		public Am4VersionContext(AmkContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterAm4Version(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitAm4Version(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAm4Version(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GeneralAmkVersionContext : AmkContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Amk() { return GetToken(MmlParser.Amk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AmkVersionContext amkVersion() {
			return GetRuleContext<AmkVersionContext>(0);
		}
		public GeneralAmkVersionContext(AmkContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterGeneralAmkVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitGeneralAmkVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneralAmkVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmkContext amk() {
		AmkContext _localctx = new AmkContext(Context, State);
		EnterRule(_localctx, 28, RULE_amk);
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Amk:
				_localctx = new GeneralAmkVersionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 265;
				Match(Amk);
				State = 266;
				amkVersion();
				}
				break;
			case Amm:
				_localctx = new AmmVersionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 267;
				amm();
				}
				break;
			case Am4:
				_localctx = new Am4VersionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 268;
				am4();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Amm() { return GetToken(MmlParser.Amm, 0); }
		public AmmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterAmm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitAmm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmmContext amm() {
		AmmContext _localctx = new AmmContext(Context, State);
		EnterRule(_localctx, 30, RULE_amm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			Match(Amm);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Am4Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Am4() { return GetToken(MmlParser.Am4, 0); }
		public Am4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_am4; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterAm4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitAm4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAm4(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Am4Context am4() {
		Am4Context _localctx = new Am4Context(Context, State);
		EnterRule(_localctx, 32, RULE_am4);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(Am4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmkVersionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AmkV1() { return GetToken(MmlParser.AmkV1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public AmkVersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amkVersion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterAmkVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitAmkVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmkVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmkVersionContext amkVersion() {
		AmkVersionContext _localctx = new AmkVersionContext(Context, State);
		EnterRule(_localctx, 34, RULE_amkVersion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBERS || _la==AmkV1) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoundChannelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Channel() { return GetToken(MmlParser.Channel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContentsContext[] channelContents() {
			return GetRuleContexts<ChannelContentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContentsContext channelContents(int i) {
			return GetRuleContext<ChannelContentsContext>(i);
		}
		public SoundChannelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soundChannel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSoundChannel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSoundChannel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoundChannel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoundChannelContext soundChannel() {
		SoundChannelContext _localctx = new SoundChannelContext(Context, State);
		EnterRule(_localctx, 36, RULE_soundChannel);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(Channel);
			State = 281;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 278;
					channelContents();
					}
					} 
				}
				State = 283;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntroEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FSLASH() { return GetToken(MmlParser.FSLASH, 0); }
		public IntroEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_introEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterIntroEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitIntroEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntroEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntroEndContext introEnd() {
		IntroEndContext _localctx = new IntroEndContext(Context, State);
		EnterRule(_localctx, 38, RULE_introEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			Match(FSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelContentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicsContext atomics() {
			return GetRuleContext<AtomicsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopersContext loopers() {
			return GetRuleContext<LoopersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SampleLoadContext sampleLoad() {
			return GetRuleContext<SampleLoadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber() { return GetToken(MmlParser.HexNumber, 0); }
		public ChannelContentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelContents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterChannelContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitChannelContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelContents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChannelContentsContext channelContents() {
		ChannelContentsContext _localctx = new ChannelContentsContext(Context, State);
		EnterRule(_localctx, 40, RULE_channelContents);
		try {
			State = 290;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
			case GT:
			case LT:
			case FSLASH:
			case Note:
			case Rest:
			case Octave:
			case Noise:
			case Tempo:
			case Volume:
			case Tune:
			case Quantization:
			case Pan:
			case Vibrato:
			case Tie:
			case Question:
			case Instrument:
				EnterOuterAlt(_localctx, 1);
				{
				State = 286;
				atomics();
				}
				break;
			case STAR:
			case LBRACK:
			case L2BRACK:
			case LoopName:
			case StopRemoteCode:
			case CallRemoteCode:
				EnterOuterAlt(_localctx, 2);
				{
				State = 287;
				loopers();
				}
				break;
			case LoadSample:
				EnterOuterAlt(_localctx, 3);
				{
				State = 288;
				sampleLoad();
				}
				break;
			case HexNumber:
				EnterOuterAlt(_localctx, 4);
				{
				State = 289;
				Match(HexNumber);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PitchslideContext pitchslide() {
			return GetRuleContext<PitchslideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoteContext note() {
			return GetRuleContext<NoteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestContext rest() {
			return GetRuleContext<RestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OctaveContext octave() {
			return GetRuleContext<OctaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LowerOctaveContext lowerOctave() {
			return GetRuleContext<LowerOctaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RaiseOctaveContext raiseOctave() {
			return GetRuleContext<RaiseOctaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoiseNoteContext noiseNote() {
			return GetRuleContext<NoiseNoteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TripletContext triplet() {
			return GetRuleContext<TripletContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VolumeContext volume() {
			return GetRuleContext<VolumeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TuneContext tune() {
			return GetRuleContext<TuneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstrumentContext instrument() {
			return GetRuleContext<InstrumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuantizationContext quantization() {
			return GetRuleContext<QuantizationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PanContext pan() {
			return GetRuleContext<PanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VibratoContext vibrato() {
			return GetRuleContext<VibratoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempoContext tempo() {
			return GetRuleContext<TempoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntroEndContext introEnd() {
			return GetRuleContext<IntroEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NakedTieContext nakedTie() {
			return GetRuleContext<NakedTieContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QmarkContext qmark() {
			return GetRuleContext<QmarkContext>(0);
		}
		public AtomicsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomics; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterAtomics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitAtomics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicsContext atomics() {
		AtomicsContext _localctx = new AtomicsContext(Context, State);
		EnterRule(_localctx, 42, RULE_atomics);
		try {
			State = 310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292;
				pitchslide();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293;
				note();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 294;
				rest();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 295;
				octave();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 296;
				lowerOctave();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 297;
				raiseOctave();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 298;
				noiseNote();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 299;
				triplet();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 300;
				volume();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 301;
				tune();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 302;
				instrument();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 303;
				quantization();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 304;
				pan();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 305;
				vibrato();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 306;
				tempo();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 307;
				introEnd();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 308;
				nakedTie();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 309;
				qmark();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Note() { return GetToken(MmlParser.Note, 0); }
		public NoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_note; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoteContext note() {
		NoteContext _localctx = new NoteContext(Context, State);
		EnterRule(_localctx, 44, RULE_note);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(Note);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rest() { return GetToken(MmlParser.Rest, 0); }
		public RestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestContext rest() {
		RestContext _localctx = new RestContext(Context, State);
		EnterRule(_localctx, 46, RULE_rest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(Rest);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OctaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Octave() { return GetToken(MmlParser.Octave, 0); }
		public OctaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_octave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOctave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OctaveContext octave() {
		OctaveContext _localctx = new OctaveContext(Context, State);
		EnterRule(_localctx, 48, RULE_octave);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(Octave);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LowerOctaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MmlParser.LT, 0); }
		public LowerOctaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lowerOctave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterLowerOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitLowerOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLowerOctave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LowerOctaveContext lowerOctave() {
		LowerOctaveContext _localctx = new LowerOctaveContext(Context, State);
		EnterRule(_localctx, 50, RULE_lowerOctave);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			Match(LT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseOctaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MmlParser.GT, 0); }
		public RaiseOctaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseOctave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterRaiseOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitRaiseOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseOctave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseOctaveContext raiseOctave() {
		RaiseOctaveContext _localctx = new RaiseOctaveContext(Context, State);
		EnterRule(_localctx, 52, RULE_raiseOctave);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoiseNoteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Noise() { return GetToken(MmlParser.Noise, 0); }
		public NoiseNoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noiseNote; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterNoiseNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitNoiseNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoiseNote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoiseNoteContext noiseNote() {
		NoiseNoteContext _localctx = new NoiseNoteContext(Context, State);
		EnterRule(_localctx, 54, RULE_noiseNote);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			Match(Noise);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VolumeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Volume() { return GetToken(MmlParser.Volume, 0); }
		public VolumeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_volume; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterVolume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitVolume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVolume(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VolumeContext volume() {
		VolumeContext _localctx = new VolumeContext(Context, State);
		EnterRule(_localctx, 56, RULE_volume);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			Match(Volume);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TuneContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tune() { return GetToken(MmlParser.Tune, 0); }
		public TuneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tune; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterTune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitTune(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTune(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TuneContext tune() {
		TuneContext _localctx = new TuneContext(Context, State);
		EnterRule(_localctx, 58, RULE_tune);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			Match(Tune);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuantizationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Quantization() { return GetToken(MmlParser.Quantization, 0); }
		public QuantizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantization; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterQuantization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitQuantization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuantizationContext quantization() {
		QuantizationContext _localctx = new QuantizationContext(Context, State);
		EnterRule(_localctx, 60, RULE_quantization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(Quantization);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pan() { return GetToken(MmlParser.Pan, 0); }
		public PanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pan; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterPan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitPan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPan(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PanContext pan() {
		PanContext _localctx = new PanContext(Context, State);
		EnterRule(_localctx, 62, RULE_pan);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			Match(Pan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VibratoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Vibrato() { return GetToken(MmlParser.Vibrato, 0); }
		public VibratoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vibrato; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterVibrato(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitVibrato(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVibrato(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VibratoContext vibrato() {
		VibratoContext _localctx = new VibratoContext(Context, State);
		EnterRule(_localctx, 64, RULE_vibrato);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			Match(Vibrato);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PitchslideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Note() { return GetTokens(MmlParser.Note); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Note(int i) {
			return GetToken(MmlParser.Note, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Rest() { return GetTokens(MmlParser.Rest); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rest(int i) {
			return GetToken(MmlParser.Rest, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AMPER() { return GetTokens(MmlParser.AMPER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPER(int i) {
			return GetToken(MmlParser.AMPER, i);
		}
		public PitchslideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pitchslide; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterPitchslide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitPitchslide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPitchslide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PitchslideContext pitchslide() {
		PitchslideContext _localctx = new PitchslideContext(Context, State);
		EnterRule(_localctx, 66, RULE_pitchslide);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			_la = TokenStream.LA(1);
			if ( !(_la==Note || _la==Rest) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 335;
				Match(AMPER);
				State = 336;
				_la = TokenStream.LA(1);
				if ( !(_la==Note || _la==Rest) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AMPER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TripletContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MmlParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MmlParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NoteContext[] note() {
			return GetRuleContexts<NoteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoteContext note(int i) {
			return GetRuleContext<NoteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestContext[] rest() {
			return GetRuleContexts<RestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestContext rest(int i) {
			return GetRuleContext<RestContext>(i);
		}
		public TripletContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triplet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterTriplet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitTriplet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriplet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TripletContext triplet() {
		TripletContext _localctx = new TripletContext(Context, State);
		EnterRule(_localctx, 68, RULE_triplet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			Match(LBRACE);
			State = 344;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Note:
				{
				State = 342;
				note();
				}
				break;
			case Rest:
				{
				State = 343;
				rest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 348;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Note:
				{
				State = 346;
				note();
				}
				break;
			case Rest:
				{
				State = 347;
				rest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 352;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Note:
				{
				State = 350;
				note();
				}
				break;
			case Rest:
				{
				State = 351;
				rest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 354;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultLengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Length() { return GetToken(MmlParser.Length, 0); }
		public DefaultLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultLength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterDefaultLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitDefaultLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultLengthContext defaultLength() {
		DefaultLengthContext _localctx = new DefaultLengthContext(Context, State);
		EnterRule(_localctx, 70, RULE_defaultLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			Match(Length);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVolumeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GlobalVolume() { return GetToken(MmlParser.GlobalVolume, 0); }
		public GlobalVolumeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVolume; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterGlobalVolume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitGlobalVolume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVolume(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVolumeContext globalVolume() {
		GlobalVolumeContext _localctx = new GlobalVolumeContext(Context, State);
		EnterRule(_localctx, 72, RULE_globalVolume);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			Match(GlobalVolume);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TempoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tempo() { return GetToken(MmlParser.Tempo, 0); }
		public TempoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tempo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterTempo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitTempo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTempo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TempoContext tempo() {
		TempoContext _localctx = new TempoContext(Context, State);
		EnterRule(_localctx, 74, RULE_tempo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			Match(Tempo);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstrumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instrument() { return GetToken(MmlParser.Instrument, 0); }
		public InstrumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instrument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterInstrument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitInstrument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstrument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstrumentContext instrument() {
		InstrumentContext _localctx = new InstrumentContext(Context, State);
		EnterRule(_localctx, 76, RULE_instrument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			Match(Instrument);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NakedTieContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tie() { return GetToken(MmlParser.Tie, 0); }
		public NakedTieContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nakedTie; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterNakedTie(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitNakedTie(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNakedTie(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NakedTieContext nakedTie() {
		NakedTieContext _localctx = new NakedTieContext(Context, State);
		EnterRule(_localctx, 78, RULE_nakedTie);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			Match(Tie);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QmarkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question() { return GetToken(MmlParser.Question, 0); }
		public QmarkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qmark; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterQmark(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitQmark(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQmark(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QmarkContext qmark() {
		QmarkContext _localctx = new QmarkContext(Context, State);
		EnterRule(_localctx, 80, RULE_qmark);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			Match(Question);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicControlsContext logicControls() {
			return GetRuleContext<LogicControlsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicCallsContext logicCalls() {
			return GetRuleContext<LogicCallsContext>(0);
		}
		public LoopersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterLoopers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitLoopers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopersContext loopers() {
		LoopersContext _localctx = new LoopersContext(Context, State);
		EnterRule(_localctx, 82, RULE_loopers);
		try {
			State = 370;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 368;
				logicControls();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 369;
				logicCalls();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicControlsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SuperLoopContext superLoop() {
			return GetRuleContext<SuperLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleLoopContext simpleLoop() {
			return GetRuleContext<SimpleLoopContext>(0);
		}
		public LogicControlsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicControls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterLogicControls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitLogicControls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicControls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicControlsContext logicControls() {
		LogicControlsContext _localctx = new LogicControlsContext(Context, State);
		EnterRule(_localctx, 84, RULE_logicControls);
		try {
			State = 374;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case L2BRACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 372;
				superLoop();
				}
				break;
			case LBRACK:
			case LoopName:
				EnterOuterAlt(_localctx, 2);
				{
				State = 373;
				simpleLoop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicCallsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallLoopContext callLoop() {
			return GetRuleContext<CallLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoteLogicCallsContext remoteLogicCalls() {
			return GetRuleContext<RemoteLogicCallsContext>(0);
		}
		public LogicCallsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicCalls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterLogicCalls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitLogicCalls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicCalls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicCallsContext logicCalls() {
		LogicCallsContext _localctx = new LogicCallsContext(Context, State);
		EnterRule(_localctx, 86, RULE_logicCalls);
		try {
			State = 378;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LoopName:
				EnterOuterAlt(_localctx, 1);
				{
				State = 376;
				callLoop();
				}
				break;
			case STAR:
			case StopRemoteCode:
			case CallRemoteCode:
				EnterOuterAlt(_localctx, 2);
				{
				State = 377;
				remoteLogicCalls();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoteLogicCallsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallRemoteCodeContext callRemoteCode() {
			return GetRuleContext<CallRemoteCodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallPreviousLoopContext callPreviousLoop() {
			return GetRuleContext<CallPreviousLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopRemoteCodeContext stopRemoteCode() {
			return GetRuleContext<StopRemoteCodeContext>(0);
		}
		public RemoteLogicCallsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remoteLogicCalls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterRemoteLogicCalls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitRemoteLogicCalls(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoteLogicCalls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoteLogicCallsContext remoteLogicCalls() {
		RemoteLogicCallsContext _localctx = new RemoteLogicCallsContext(Context, State);
		EnterRule(_localctx, 88, RULE_remoteLogicCalls);
		try {
			State = 383;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CallRemoteCode:
				EnterOuterAlt(_localctx, 1);
				{
				State = 380;
				callRemoteCode();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 381;
				callPreviousLoop();
				}
				break;
			case StopRemoteCode:
				EnterOuterAlt(_localctx, 3);
				{
				State = 382;
				stopRemoteCode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L2BRACK() { return GetToken(MmlParser.L2BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R2BRACK() { return GetToken(MmlParser.R2BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SuperLoopContentsContext[] superLoopContents() {
			return GetRuleContexts<SuperLoopContentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuperLoopContentsContext superLoopContents(int i) {
			return GetRuleContext<SuperLoopContentsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public SuperLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSuperLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSuperLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperLoopContext superLoop() {
		SuperLoopContext _localctx = new SuperLoopContext(Context, State);
		EnterRule(_localctx, 90, RULE_superLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			Match(L2BRACK);
			State = 389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 110051209768863936L) != 0)) {
				{
				{
				State = 386;
				superLoopContents();
				}
				}
				State = 391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 392;
			Match(R2BRACK);
			State = 394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBERS) {
				{
				State = 393;
				Match(NUMBERS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperLoopContentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicsContext atomics() {
			return GetRuleContext<AtomicsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminalSimpleLoopContext terminalSimpleLoop() {
			return GetRuleContext<TerminalSimpleLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicCallsContext logicCalls() {
			return GetRuleContext<LogicCallsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public SuperLoopContentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superLoopContents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSuperLoopContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSuperLoopContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperLoopContents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperLoopContentsContext superLoopContents() {
		SuperLoopContentsContext _localctx = new SuperLoopContentsContext(Context, State);
		EnterRule(_localctx, 92, RULE_superLoopContents);
		try {
			State = 400;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 396;
				atomics();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 397;
				terminalSimpleLoop();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 398;
				logicCalls();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 399;
				hexNumber();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MmlParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MmlParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopName() { return GetToken(MmlParser.LoopName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleLoopContentsContext[] simpleLoopContents() {
			return GetRuleContexts<SimpleLoopContentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleLoopContentsContext simpleLoopContents(int i) {
			return GetRuleContext<SimpleLoopContentsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public SimpleLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSimpleLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSimpleLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleLoopContext simpleLoop() {
		SimpleLoopContext _localctx = new SimpleLoopContext(Context, State);
		EnterRule(_localctx, 94, RULE_simpleLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LoopName) {
				{
				State = 402;
				Match(LoopName);
				}
			}

			State = 405;
			Match(LBRACK);
			State = 409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 109910472280514752L) != 0)) {
				{
				{
				State = 406;
				simpleLoopContents();
				}
				}
				State = 411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 412;
			Match(RBRACK);
			State = 414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBERS) {
				{
				State = 413;
				Match(NUMBERS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleLoopContentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicsContext atomics() {
			return GetRuleContext<AtomicsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminalSuperLoopContext terminalSuperLoop() {
			return GetRuleContext<TerminalSuperLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoteLogicCallsContext remoteLogicCalls() {
			return GetRuleContext<RemoteLogicCallsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public SimpleLoopContentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleLoopContents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSimpleLoopContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSimpleLoopContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleLoopContents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleLoopContentsContext simpleLoopContents() {
		SimpleLoopContentsContext _localctx = new SimpleLoopContentsContext(Context, State);
		EnterRule(_localctx, 96, RULE_simpleLoopContents);
		try {
			State = 420;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
			case GT:
			case LT:
			case FSLASH:
			case Note:
			case Rest:
			case Octave:
			case Noise:
			case Tempo:
			case Volume:
			case Tune:
			case Quantization:
			case Pan:
			case Vibrato:
			case Tie:
			case Question:
			case Instrument:
				EnterOuterAlt(_localctx, 1);
				{
				State = 416;
				atomics();
				}
				break;
			case L2BRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 417;
				terminalSuperLoop();
				}
				break;
			case STAR:
			case StopRemoteCode:
			case CallRemoteCode:
				EnterOuterAlt(_localctx, 3);
				{
				State = 418;
				remoteLogicCalls();
				}
				break;
			case HexNumber:
				EnterOuterAlt(_localctx, 4);
				{
				State = 419;
				hexNumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalSuperLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L2BRACK() { return GetToken(MmlParser.L2BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R2BRACK() { return GetToken(MmlParser.R2BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TerminalSuperLoopContentsContext[] terminalSuperLoopContents() {
			return GetRuleContexts<TerminalSuperLoopContentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminalSuperLoopContentsContext terminalSuperLoopContents(int i) {
			return GetRuleContext<TerminalSuperLoopContentsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public TerminalSuperLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalSuperLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterTerminalSuperLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitTerminalSuperLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminalSuperLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalSuperLoopContext terminalSuperLoop() {
		TerminalSuperLoopContext _localctx = new TerminalSuperLoopContext(Context, State);
		EnterRule(_localctx, 98, RULE_terminalSuperLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			Match(L2BRACK);
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 110051209768861888L) != 0)) {
				{
				{
				State = 423;
				terminalSuperLoopContents();
				}
				}
				State = 428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 429;
			Match(R2BRACK);
			State = 431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBERS) {
				{
				State = 430;
				Match(NUMBERS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalSuperLoopContentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicsContext atomics() {
			return GetRuleContext<AtomicsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicCallsContext logicCalls() {
			return GetRuleContext<LogicCallsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public TerminalSuperLoopContentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalSuperLoopContents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterTerminalSuperLoopContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitTerminalSuperLoopContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminalSuperLoopContents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalSuperLoopContentsContext terminalSuperLoopContents() {
		TerminalSuperLoopContentsContext _localctx = new TerminalSuperLoopContentsContext(Context, State);
		EnterRule(_localctx, 100, RULE_terminalSuperLoopContents);
		try {
			State = 436;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
			case GT:
			case LT:
			case FSLASH:
			case Note:
			case Rest:
			case Octave:
			case Noise:
			case Tempo:
			case Volume:
			case Tune:
			case Quantization:
			case Pan:
			case Vibrato:
			case Tie:
			case Question:
			case Instrument:
				EnterOuterAlt(_localctx, 1);
				{
				State = 433;
				atomics();
				}
				break;
			case STAR:
			case LoopName:
			case StopRemoteCode:
			case CallRemoteCode:
				EnterOuterAlt(_localctx, 2);
				{
				State = 434;
				logicCalls();
				}
				break;
			case HexNumber:
				EnterOuterAlt(_localctx, 3);
				{
				State = 435;
				hexNumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalSimpleLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MmlParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MmlParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopName() { return GetToken(MmlParser.LoopName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TerminalSimpleLoopContentsContext[] terminalSimpleLoopContents() {
			return GetRuleContexts<TerminalSimpleLoopContentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TerminalSimpleLoopContentsContext terminalSimpleLoopContents(int i) {
			return GetRuleContext<TerminalSimpleLoopContentsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public TerminalSimpleLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalSimpleLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterTerminalSimpleLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitTerminalSimpleLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminalSimpleLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalSimpleLoopContext terminalSimpleLoop() {
		TerminalSimpleLoopContext _localctx = new TerminalSimpleLoopContext(Context, State);
		EnterRule(_localctx, 102, RULE_terminalSimpleLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LoopName) {
				{
				State = 438;
				Match(LoopName);
				}
			}

			State = 441;
			Match(LBRACK);
			State = 445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 109910472280506560L) != 0)) {
				{
				{
				State = 442;
				terminalSimpleLoopContents();
				}
				}
				State = 447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 448;
			Match(RBRACK);
			State = 450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBERS) {
				{
				State = 449;
				Match(NUMBERS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalSimpleLoopContentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomicsContext atomics() {
			return GetRuleContext<AtomicsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoteLogicCallsContext remoteLogicCalls() {
			return GetRuleContext<RemoteLogicCallsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public TerminalSimpleLoopContentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminalSimpleLoopContents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterTerminalSimpleLoopContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitTerminalSimpleLoopContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminalSimpleLoopContents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalSimpleLoopContentsContext terminalSimpleLoopContents() {
		TerminalSimpleLoopContentsContext _localctx = new TerminalSimpleLoopContentsContext(Context, State);
		EnterRule(_localctx, 104, RULE_terminalSimpleLoopContents);
		try {
			State = 455;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
			case GT:
			case LT:
			case FSLASH:
			case Note:
			case Rest:
			case Octave:
			case Noise:
			case Tempo:
			case Volume:
			case Tune:
			case Quantization:
			case Pan:
			case Vibrato:
			case Tie:
			case Question:
			case Instrument:
				EnterOuterAlt(_localctx, 1);
				{
				State = 452;
				atomics();
				}
				break;
			case STAR:
			case StopRemoteCode:
			case CallRemoteCode:
				EnterOuterAlt(_localctx, 2);
				{
				State = 453;
				remoteLogicCalls();
				}
				break;
			case HexNumber:
				EnterOuterAlt(_localctx, 3);
				{
				State = 454;
				hexNumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoteCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RemoteCodeName() { return GetToken(MmlParser.RemoteCodeName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MmlParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MmlParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RemoteCodeContentsContext[] remoteCodeContents() {
			return GetRuleContexts<RemoteCodeContentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoteCodeContentsContext remoteCodeContents(int i) {
			return GetRuleContext<RemoteCodeContentsContext>(i);
		}
		public RemoteCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remoteCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterRemoteCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitRemoteCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoteCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoteCodeContext remoteCode() {
		RemoteCodeContext _localctx = new RemoteCodeContext(Context, State);
		EnterRule(_localctx, 106, RULE_remoteCode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			Match(RemoteCodeName);
			State = 458;
			Match(LBRACK);
			State = 462;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 36058380759990272L) != 0)) {
				{
				{
				State = 459;
				remoteCodeContents();
				}
				}
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 465;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoteCodeContentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OctaveContext octave() {
			return GetRuleContext<OctaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LowerOctaveContext lowerOctave() {
			return GetRuleContext<LowerOctaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RaiseOctaveContext raiseOctave() {
			return GetRuleContext<RaiseOctaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VolumeContext volume() {
			return GetRuleContext<VolumeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TuneContext tune() {
			return GetRuleContext<TuneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuantizationContext quantization() {
			return GetRuleContext<QuantizationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PanContext pan() {
			return GetRuleContext<PanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VibratoContext vibrato() {
			return GetRuleContext<VibratoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempoContext tempo() {
			return GetRuleContext<TempoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber() { return GetToken(MmlParser.HexNumber, 0); }
		public RemoteCodeContentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remoteCodeContents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterRemoteCodeContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitRemoteCodeContents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoteCodeContents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoteCodeContentsContext remoteCodeContents() {
		RemoteCodeContentsContext _localctx = new RemoteCodeContentsContext(Context, State);
		EnterRule(_localctx, 108, RULE_remoteCodeContents);
		try {
			State = 477;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Octave:
				EnterOuterAlt(_localctx, 1);
				{
				State = 467;
				octave();
				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 468;
				lowerOctave();
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 469;
				raiseOctave();
				}
				break;
			case Volume:
				EnterOuterAlt(_localctx, 4);
				{
				State = 470;
				volume();
				}
				break;
			case Tune:
				EnterOuterAlt(_localctx, 5);
				{
				State = 471;
				tune();
				}
				break;
			case Quantization:
				EnterOuterAlt(_localctx, 6);
				{
				State = 472;
				quantization();
				}
				break;
			case Pan:
				EnterOuterAlt(_localctx, 7);
				{
				State = 473;
				pan();
				}
				break;
			case Vibrato:
				EnterOuterAlt(_localctx, 8);
				{
				State = 474;
				vibrato();
				}
				break;
			case Tempo:
				EnterOuterAlt(_localctx, 9);
				{
				State = 475;
				tempo();
				}
				break;
			case HexNumber:
				EnterOuterAlt(_localctx, 10);
				{
				State = 476;
				Match(HexNumber);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoopName() { return GetToken(MmlParser.LoopName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public CallLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterCallLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitCallLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallLoopContext callLoop() {
		CallLoopContext _localctx = new CallLoopContext(Context, State);
		EnterRule(_localctx, 110, RULE_callLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			Match(LoopName);
			State = 481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBERS) {
				{
				State = 480;
				Match(NUMBERS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallRemoteCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CallRemoteCode() { return GetToken(MmlParser.CallRemoteCode, 0); }
		public CallRemoteCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callRemoteCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterCallRemoteCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitCallRemoteCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallRemoteCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallRemoteCodeContext callRemoteCode() {
		CallRemoteCodeContext _localctx = new CallRemoteCodeContext(Context, State);
		EnterRule(_localctx, 112, RULE_callRemoteCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			Match(CallRemoteCode);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopRemoteCodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StopRemoteCode() { return GetToken(MmlParser.StopRemoteCode, 0); }
		public StopRemoteCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopRemoteCode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterStopRemoteCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitStopRemoteCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopRemoteCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopRemoteCodeContext stopRemoteCode() {
		StopRemoteCodeContext _localctx = new StopRemoteCodeContext(Context, State);
		EnterRule(_localctx, 114, RULE_stopRemoteCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			Match(StopRemoteCode);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallPreviousLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MmlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBERS() { return GetToken(MmlParser.NUMBERS, 0); }
		public CallPreviousLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callPreviousLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterCallPreviousLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitCallPreviousLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallPreviousLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallPreviousLoopContext callPreviousLoop() {
		CallPreviousLoopContext _localctx = new CallPreviousLoopContext(Context, State);
		EnterRule(_localctx, 116, RULE_callPreviousLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487;
			Match(STAR);
			State = 489;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NUMBERS) {
				{
				State = 488;
				Match(NUMBERS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoloopCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QMARK() { return GetToken(MmlParser.QMARK, 0); }
		public NoloopCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noloopCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterNoloopCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitNoloopCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoloopCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoloopCommandContext noloopCommand() {
		NoloopCommandContext _localctx = new NoloopCommandContext(Context, State);
		EnterRule(_localctx, 118, RULE_noloopCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			Match(QMARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SampleLoadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LoadSample() { return GetToken(MmlParser.LoadSample, 0); }
		public SampleLoadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sampleLoad; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterSampleLoad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitSampleLoad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSampleLoad(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SampleLoadContext sampleLoad() {
		SampleLoadContext _localctx = new SampleLoadContext(Context, State);
		EnterRule(_localctx, 120, RULE_sampleLoad);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			Match(LoadSample);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplacementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReplacementText() { return GetToken(MmlParser.ReplacementText, 0); }
		public ReplacementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replacements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterReplacements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitReplacements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplacements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplacementsContext replacements() {
		ReplacementsContext _localctx = new ReplacementsContext(Context, State);
		EnterRule(_localctx, 122, RULE_replacements);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			Match(ReplacementText);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber() { return GetToken(MmlParser.HexNumber, 0); }
		public HexNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.EnterHexNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMmlListener typedListener = listener as IMmlListener;
			if (typedListener != null) typedListener.ExitHexNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMmlVisitor<TResult> typedVisitor = visitor as IMmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HexNumberContext hexNumber() {
		HexNumberContext _localctx = new HexNumberContext(Context, State);
		EnterRule(_localctx, 124, RULE_hexNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			Match(HexNumber);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,81,500,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,1,0,4,0,128,
		8,0,11,0,12,0,129,1,0,3,0,133,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,3,1,148,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,158,8,
		2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,5,4,167,8,4,10,4,12,4,170,9,4,1,4,5,4,173,
		8,4,10,4,12,4,176,9,4,3,4,178,8,4,1,5,1,5,1,5,5,5,183,8,5,10,5,12,5,186,
		9,5,1,5,1,5,1,6,1,6,4,6,192,8,6,11,6,12,6,193,1,6,1,6,4,6,198,8,6,11,6,
		12,6,199,1,6,1,6,4,6,204,8,6,11,6,12,6,205,3,6,208,8,6,1,7,1,7,1,7,5,7,
		213,8,7,10,7,12,7,216,9,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,3,8,230,8,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,
		12,5,12,244,8,12,10,12,12,12,247,9,12,1,12,1,12,1,12,3,12,252,8,12,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,264,8,13,1,14,1,14,1,
		14,1,14,3,14,270,8,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,5,18,280,
		8,18,10,18,12,18,283,9,18,1,19,1,19,1,20,1,20,1,20,1,20,3,20,291,8,20,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,3,21,311,8,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,
		25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,
		32,1,33,1,33,1,33,4,33,338,8,33,11,33,12,33,339,1,34,1,34,1,34,3,34,345,
		8,34,1,34,1,34,3,34,349,8,34,1,34,1,34,3,34,353,8,34,1,34,1,34,1,35,1,
		35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,3,41,371,
		8,41,1,42,1,42,3,42,375,8,42,1,43,1,43,3,43,379,8,43,1,44,1,44,1,44,3,
		44,384,8,44,1,45,1,45,5,45,388,8,45,10,45,12,45,391,9,45,1,45,1,45,3,45,
		395,8,45,1,46,1,46,1,46,1,46,3,46,401,8,46,1,47,3,47,404,8,47,1,47,1,47,
		5,47,408,8,47,10,47,12,47,411,9,47,1,47,1,47,3,47,415,8,47,1,48,1,48,1,
		48,1,48,3,48,421,8,48,1,49,1,49,5,49,425,8,49,10,49,12,49,428,9,49,1,49,
		1,49,3,49,432,8,49,1,50,1,50,1,50,3,50,437,8,50,1,51,3,51,440,8,51,1,51,
		1,51,5,51,444,8,51,10,51,12,51,447,9,51,1,51,1,51,3,51,451,8,51,1,52,1,
		52,1,52,3,52,456,8,52,1,53,1,53,1,53,5,53,461,8,53,10,53,12,53,464,9,53,
		1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,478,8,
		54,1,55,1,55,3,55,482,8,55,1,56,1,56,1,57,1,57,1,58,1,58,3,58,490,8,58,
		1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,62,0,0,63,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
		64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
		108,110,112,114,116,118,120,122,124,0,2,2,0,28,28,53,53,1,0,33,34,544,
		0,132,1,0,0,0,2,147,1,0,0,0,4,157,1,0,0,0,6,159,1,0,0,0,8,177,1,0,0,0,
		10,179,1,0,0,0,12,207,1,0,0,0,14,209,1,0,0,0,16,229,1,0,0,0,18,231,1,0,
		0,0,20,234,1,0,0,0,22,237,1,0,0,0,24,251,1,0,0,0,26,263,1,0,0,0,28,269,
		1,0,0,0,30,271,1,0,0,0,32,273,1,0,0,0,34,275,1,0,0,0,36,277,1,0,0,0,38,
		284,1,0,0,0,40,290,1,0,0,0,42,310,1,0,0,0,44,312,1,0,0,0,46,314,1,0,0,
		0,48,316,1,0,0,0,50,318,1,0,0,0,52,320,1,0,0,0,54,322,1,0,0,0,56,324,1,
		0,0,0,58,326,1,0,0,0,60,328,1,0,0,0,62,330,1,0,0,0,64,332,1,0,0,0,66,334,
		1,0,0,0,68,341,1,0,0,0,70,356,1,0,0,0,72,358,1,0,0,0,74,360,1,0,0,0,76,
		362,1,0,0,0,78,364,1,0,0,0,80,366,1,0,0,0,82,370,1,0,0,0,84,374,1,0,0,
		0,86,378,1,0,0,0,88,383,1,0,0,0,90,385,1,0,0,0,92,400,1,0,0,0,94,403,1,
		0,0,0,96,420,1,0,0,0,98,422,1,0,0,0,100,436,1,0,0,0,102,439,1,0,0,0,104,
		455,1,0,0,0,106,457,1,0,0,0,108,477,1,0,0,0,110,479,1,0,0,0,112,483,1,
		0,0,0,114,485,1,0,0,0,116,487,1,0,0,0,118,491,1,0,0,0,120,493,1,0,0,0,
		122,495,1,0,0,0,124,497,1,0,0,0,126,128,3,2,1,0,127,126,1,0,0,0,128,129,
		1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,133,1,0,0,0,131,133,5,0,0,
		1,132,127,1,0,0,0,132,131,1,0,0,0,133,1,1,0,0,0,134,148,3,4,2,0,135,148,
		3,36,18,0,136,148,3,106,53,0,137,148,3,70,35,0,138,148,3,72,36,0,139,148,
		3,74,37,0,140,148,3,122,61,0,141,148,3,118,59,0,142,148,5,32,0,0,143,148,
		3,124,62,0,144,148,3,38,19,0,145,148,3,106,53,0,146,148,3,80,40,0,147,
		134,1,0,0,0,147,135,1,0,0,0,147,136,1,0,0,0,147,137,1,0,0,0,147,138,1,
		0,0,0,147,139,1,0,0,0,147,140,1,0,0,0,147,141,1,0,0,0,147,142,1,0,0,0,
		147,143,1,0,0,0,147,144,1,0,0,0,147,145,1,0,0,0,147,146,1,0,0,0,148,3,
		1,0,0,0,149,158,3,28,14,0,150,158,3,14,7,0,151,158,3,6,3,0,152,158,3,10,
		5,0,153,158,3,20,10,0,154,158,3,18,9,0,155,158,3,22,11,0,156,158,3,24,
		12,0,157,149,1,0,0,0,157,150,1,0,0,0,157,151,1,0,0,0,157,152,1,0,0,0,157,
		153,1,0,0,0,157,154,1,0,0,0,157,155,1,0,0,0,157,156,1,0,0,0,158,5,1,0,
		0,0,159,160,5,60,0,0,160,161,5,7,0,0,161,162,3,8,4,0,162,163,5,8,0,0,163,
		7,1,0,0,0,164,168,5,79,0,0,165,167,5,32,0,0,166,165,1,0,0,0,167,170,1,
		0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,178,1,0,0,0,170,168,1,0,0,0,
		171,173,5,32,0,0,172,171,1,0,0,0,173,176,1,0,0,0,174,172,1,0,0,0,174,175,
		1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,177,164,1,0,0,0,177,174,1,0,0,
		0,178,9,1,0,0,0,179,180,5,61,0,0,180,184,5,7,0,0,181,183,3,12,6,0,182,
		181,1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,187,1,
		0,0,0,186,184,1,0,0,0,187,188,5,8,0,0,188,11,1,0,0,0,189,191,5,32,0,0,
		190,192,5,55,0,0,191,190,1,0,0,0,192,193,1,0,0,0,193,191,1,0,0,0,193,194,
		1,0,0,0,194,208,1,0,0,0,195,197,3,76,38,0,196,198,5,55,0,0,197,196,1,0,
		0,0,198,199,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,208,1,0,0,0,201,
		203,3,54,27,0,202,204,5,55,0,0,203,202,1,0,0,0,204,205,1,0,0,0,205,203,
		1,0,0,0,205,206,1,0,0,0,206,208,1,0,0,0,207,189,1,0,0,0,207,195,1,0,0,
		0,207,201,1,0,0,0,208,13,1,0,0,0,209,210,5,62,0,0,210,214,5,7,0,0,211,
		213,3,16,8,0,212,211,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,1,
		0,0,0,215,217,1,0,0,0,216,214,1,0,0,0,217,218,5,8,0,0,218,15,1,0,0,0,219,
		220,5,63,0,0,220,230,5,32,0,0,221,222,5,64,0,0,222,230,5,32,0,0,223,224,
		5,65,0,0,224,230,5,32,0,0,225,226,5,66,0,0,226,230,5,32,0,0,227,228,5,
		67,0,0,228,230,5,32,0,0,229,219,1,0,0,0,229,221,1,0,0,0,229,223,1,0,0,
		0,229,225,1,0,0,0,229,227,1,0,0,0,230,17,1,0,0,0,231,232,5,68,0,0,232,
		233,5,55,0,0,233,19,1,0,0,0,234,235,5,69,0,0,235,236,5,32,0,0,236,21,1,
		0,0,0,237,238,5,70,0,0,238,23,1,0,0,0,239,240,5,71,0,0,240,245,5,7,0,0,
		241,242,5,1,0,0,242,244,3,26,13,0,243,241,1,0,0,0,244,247,1,0,0,0,245,
		243,1,0,0,0,245,246,1,0,0,0,246,248,1,0,0,0,247,245,1,0,0,0,248,252,5,
		8,0,0,249,250,5,71,0,0,250,252,3,26,13,0,251,239,1,0,0,0,251,249,1,0,0,
		0,252,25,1,0,0,0,253,264,5,72,0,0,254,255,5,73,0,0,255,264,5,28,0,0,256,
		264,5,74,0,0,257,264,5,75,0,0,258,264,5,76,0,0,259,264,5,77,0,0,260,261,
		5,32,0,0,261,264,5,28,0,0,262,264,5,32,0,0,263,253,1,0,0,0,263,254,1,0,
		0,0,263,256,1,0,0,0,263,257,1,0,0,0,263,258,1,0,0,0,263,259,1,0,0,0,263,
		260,1,0,0,0,263,262,1,0,0,0,264,27,1,0,0,0,265,266,5,57,0,0,266,270,3,
		34,17,0,267,270,3,30,15,0,268,270,3,32,16,0,269,265,1,0,0,0,269,267,1,
		0,0,0,269,268,1,0,0,0,270,29,1,0,0,0,271,272,5,58,0,0,272,31,1,0,0,0,273,
		274,5,59,0,0,274,33,1,0,0,0,275,276,7,0,0,0,276,35,1,0,0,0,277,281,5,78,
		0,0,278,280,3,40,20,0,279,278,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,
		281,282,1,0,0,0,282,37,1,0,0,0,283,281,1,0,0,0,284,285,5,24,0,0,285,39,
		1,0,0,0,286,291,3,42,21,0,287,291,3,82,41,0,288,291,3,120,60,0,289,291,
		5,55,0,0,290,286,1,0,0,0,290,287,1,0,0,0,290,288,1,0,0,0,290,289,1,0,0,
		0,291,41,1,0,0,0,292,311,3,66,33,0,293,311,3,44,22,0,294,311,3,46,23,0,
		295,311,3,48,24,0,296,311,3,50,25,0,297,311,3,52,26,0,298,311,3,54,27,
		0,299,311,3,68,34,0,300,311,3,56,28,0,301,311,3,58,29,0,302,311,3,76,38,
		0,303,311,3,60,30,0,304,311,3,62,31,0,305,311,3,64,32,0,306,311,3,74,37,
		0,307,311,3,38,19,0,308,311,3,78,39,0,309,311,3,80,40,0,310,292,1,0,0,
		0,310,293,1,0,0,0,310,294,1,0,0,0,310,295,1,0,0,0,310,296,1,0,0,0,310,
		297,1,0,0,0,310,298,1,0,0,0,310,299,1,0,0,0,310,300,1,0,0,0,310,301,1,
		0,0,0,310,302,1,0,0,0,310,303,1,0,0,0,310,304,1,0,0,0,310,305,1,0,0,0,
		310,306,1,0,0,0,310,307,1,0,0,0,310,308,1,0,0,0,310,309,1,0,0,0,311,43,
		1,0,0,0,312,313,5,33,0,0,313,45,1,0,0,0,314,315,5,34,0,0,315,47,1,0,0,
		0,316,317,5,35,0,0,317,49,1,0,0,0,318,319,5,22,0,0,319,51,1,0,0,0,320,
		321,5,21,0,0,321,53,1,0,0,0,322,323,5,36,0,0,323,55,1,0,0,0,324,325,5,
		38,0,0,325,57,1,0,0,0,326,327,5,39,0,0,327,59,1,0,0,0,328,329,5,41,0,0,
		329,61,1,0,0,0,330,331,5,43,0,0,331,63,1,0,0,0,332,333,5,44,0,0,333,65,
		1,0,0,0,334,337,7,1,0,0,335,336,5,4,0,0,336,338,7,1,0,0,337,335,1,0,0,
		0,338,339,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,67,1,0,0,0,341,344,
		5,7,0,0,342,345,3,44,22,0,343,345,3,46,23,0,344,342,1,0,0,0,344,343,1,
		0,0,0,345,348,1,0,0,0,346,349,3,44,22,0,347,349,3,46,23,0,348,346,1,0,
		0,0,348,347,1,0,0,0,349,352,1,0,0,0,350,353,3,44,22,0,351,353,3,46,23,
		0,352,350,1,0,0,0,352,351,1,0,0,0,353,354,1,0,0,0,354,355,5,8,0,0,355,
		69,1,0,0,0,356,357,5,40,0,0,357,71,1,0,0,0,358,359,5,42,0,0,359,73,1,0,
		0,0,360,361,5,37,0,0,361,75,1,0,0,0,362,363,5,56,0,0,363,77,1,0,0,0,364,
		365,5,45,0,0,365,79,1,0,0,0,366,367,5,46,0,0,367,81,1,0,0,0,368,371,3,
		84,42,0,369,371,3,86,43,0,370,368,1,0,0,0,370,369,1,0,0,0,371,83,1,0,0,
		0,372,375,3,90,45,0,373,375,3,94,47,0,374,372,1,0,0,0,374,373,1,0,0,0,
		375,85,1,0,0,0,376,379,3,110,55,0,377,379,3,88,44,0,378,376,1,0,0,0,378,
		377,1,0,0,0,379,87,1,0,0,0,380,384,3,112,56,0,381,384,3,116,58,0,382,384,
		3,114,57,0,383,380,1,0,0,0,383,381,1,0,0,0,383,382,1,0,0,0,384,89,1,0,
		0,0,385,389,5,13,0,0,386,388,3,92,46,0,387,386,1,0,0,0,388,391,1,0,0,0,
		389,387,1,0,0,0,389,390,1,0,0,0,390,392,1,0,0,0,391,389,1,0,0,0,392,394,
		5,14,0,0,393,395,5,28,0,0,394,393,1,0,0,0,394,395,1,0,0,0,395,91,1,0,0,
		0,396,401,3,42,21,0,397,401,3,102,51,0,398,401,3,86,43,0,399,401,3,124,
		62,0,400,396,1,0,0,0,400,397,1,0,0,0,400,398,1,0,0,0,400,399,1,0,0,0,401,
		93,1,0,0,0,402,404,5,47,0,0,403,402,1,0,0,0,403,404,1,0,0,0,404,405,1,
		0,0,0,405,409,5,11,0,0,406,408,3,96,48,0,407,406,1,0,0,0,408,411,1,0,0,
		0,409,407,1,0,0,0,409,410,1,0,0,0,410,412,1,0,0,0,411,409,1,0,0,0,412,
		414,5,12,0,0,413,415,5,28,0,0,414,413,1,0,0,0,414,415,1,0,0,0,415,95,1,
		0,0,0,416,421,3,42,21,0,417,421,3,98,49,0,418,421,3,88,44,0,419,421,3,
		124,62,0,420,416,1,0,0,0,420,417,1,0,0,0,420,418,1,0,0,0,420,419,1,0,0,
		0,421,97,1,0,0,0,422,426,5,13,0,0,423,425,3,100,50,0,424,423,1,0,0,0,425,
		428,1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,429,1,0,0,0,428,426,1,
		0,0,0,429,431,5,14,0,0,430,432,5,28,0,0,431,430,1,0,0,0,431,432,1,0,0,
		0,432,99,1,0,0,0,433,437,3,42,21,0,434,437,3,86,43,0,435,437,3,124,62,
		0,436,433,1,0,0,0,436,434,1,0,0,0,436,435,1,0,0,0,437,101,1,0,0,0,438,
		440,5,47,0,0,439,438,1,0,0,0,439,440,1,0,0,0,440,441,1,0,0,0,441,445,5,
		11,0,0,442,444,3,104,52,0,443,442,1,0,0,0,444,447,1,0,0,0,445,443,1,0,
		0,0,445,446,1,0,0,0,446,448,1,0,0,0,447,445,1,0,0,0,448,450,5,12,0,0,449,
		451,5,28,0,0,450,449,1,0,0,0,450,451,1,0,0,0,451,103,1,0,0,0,452,456,3,
		42,21,0,453,456,3,88,44,0,454,456,3,124,62,0,455,452,1,0,0,0,455,453,1,
		0,0,0,455,454,1,0,0,0,456,105,1,0,0,0,457,458,5,48,0,0,458,462,5,11,0,
		0,459,461,3,108,54,0,460,459,1,0,0,0,461,464,1,0,0,0,462,460,1,0,0,0,462,
		463,1,0,0,0,463,465,1,0,0,0,464,462,1,0,0,0,465,466,5,12,0,0,466,107,1,
		0,0,0,467,478,3,48,24,0,468,478,3,50,25,0,469,478,3,52,26,0,470,478,3,
		56,28,0,471,478,3,58,29,0,472,478,3,60,30,0,473,478,3,62,31,0,474,478,
		3,64,32,0,475,478,3,74,37,0,476,478,5,55,0,0,477,467,1,0,0,0,477,468,1,
		0,0,0,477,469,1,0,0,0,477,470,1,0,0,0,477,471,1,0,0,0,477,472,1,0,0,0,
		477,473,1,0,0,0,477,474,1,0,0,0,477,475,1,0,0,0,477,476,1,0,0,0,478,109,
		1,0,0,0,479,481,5,47,0,0,480,482,5,28,0,0,481,480,1,0,0,0,481,482,1,0,
		0,0,482,111,1,0,0,0,483,484,5,50,0,0,484,113,1,0,0,0,485,486,5,49,0,0,
		486,115,1,0,0,0,487,489,5,6,0,0,488,490,5,28,0,0,489,488,1,0,0,0,489,490,
		1,0,0,0,490,117,1,0,0,0,491,492,5,25,0,0,492,119,1,0,0,0,493,494,5,52,
		0,0,494,121,1,0,0,0,495,496,5,31,0,0,496,123,1,0,0,0,497,498,5,55,0,0,
		498,125,1,0,0,0,47,129,132,147,157,168,174,177,184,193,199,205,207,214,
		229,245,251,263,269,281,290,310,339,344,348,352,370,374,378,383,389,394,
		400,403,409,414,420,426,431,436,439,445,450,455,462,477,481,489
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
