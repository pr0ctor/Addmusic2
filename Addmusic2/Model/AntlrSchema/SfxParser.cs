//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/Projects/Visual Studio/Addmusic2/Addmusic2/Addmusic2/Sfx.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class SfxParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		POUND=1, DOLLAR=2, COMMAT=3, AMPER=4, LBRACE=5, RBRACE=6, SHARP=7, FLAT=8, 
		DOT=9, TIE=10, GT=11, LT=12, COMMA=13, EQUAL=14, SEMICOLON=15, Note=16, 
		Rest=17, Octave=18, Volume=19, Tie=20, Instrument=21, Length=22, Asm=23, 
		Jsr=24, NE0=25, JsrIdentifier=26, AsmTextBlock=27, NUMBERS=28, UNUMBERS=29, 
		HexNumber=30, WHITESPACE=31, Comment=32;
	public const int
		RULE_soundEffect = 0, RULE_soundEffectElement = 1, RULE_specialDirective = 2, 
		RULE_asm = 3, RULE_jsr = 4, RULE_atomics = 5, RULE_note = 6, RULE_rest = 7, 
		RULE_octave = 8, RULE_lowerOctave = 9, RULE_raiseOctave = 10, RULE_pitchslide = 11, 
		RULE_volumeCommand = 12, RULE_defaultLength = 13, RULE_instrumentCommand = 14, 
		RULE_nakedTie = 15, RULE_hexCommands = 16, RULE_e0SfxPriority = 17, RULE_hexNumber = 18;
	public static readonly string[] ruleNames = {
		"soundEffect", "soundEffectElement", "specialDirective", "asm", "jsr", 
		"atomics", "note", "rest", "octave", "lowerOctave", "raiseOctave", "pitchslide", 
		"volumeCommand", "defaultLength", "instrumentCommand", "nakedTie", "hexCommands", 
		"e0SfxPriority", "hexNumber"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", "'$'", "'@'", "'&'", "'{'", "'}'", "'+'", "'-'", "'.'", "'^'", 
		"'>'", "'<'", "','", "'='", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "POUND", "DOLLAR", "COMMAT", "AMPER", "LBRACE", "RBRACE", "SHARP", 
		"FLAT", "DOT", "TIE", "GT", "LT", "COMMA", "EQUAL", "SEMICOLON", "Note", 
		"Rest", "Octave", "Volume", "Tie", "Instrument", "Length", "Asm", "Jsr", 
		"NE0", "JsrIdentifier", "AsmTextBlock", "NUMBERS", "UNUMBERS", "HexNumber", 
		"WHITESPACE", "Comment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sfx.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SfxParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SfxParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SfxParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SoundEffectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public E0SfxPriorityContext e0SfxPriority() {
			return GetRuleContext<E0SfxPriorityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SoundEffectElementContext[] soundEffectElement() {
			return GetRuleContexts<SoundEffectElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SoundEffectElementContext soundEffectElement(int i) {
			return GetRuleContext<SoundEffectElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SfxParser.Eof, 0); }
		public SoundEffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soundEffect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.EnterSoundEffect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.ExitSoundEffect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISfxVisitor<TResult> typedVisitor = visitor as ISfxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoundEffect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoundEffectContext soundEffect() {
		SoundEffectContext _localctx = new SoundEffectContext(Context, State);
		EnterRule(_localctx, 0, RULE_soundEffect);
		int _la;
		try {
			State = 47;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GT:
			case LT:
			case Note:
			case Rest:
			case Octave:
			case Volume:
			case Tie:
			case Instrument:
			case Length:
			case Asm:
			case Jsr:
			case NE0:
			case HexNumber:
				EnterOuterAlt(_localctx, 1);
				{
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NE0) {
					{
					State = 38;
					e0SfxPriority();
					}
				}

				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 41;
					soundEffectElement();
					}
					}
					State = 44;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1107236864L) != 0) );
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 46;
				Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SoundEffectElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecialDirectiveContext specialDirective() {
			return GetRuleContext<SpecialDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomicsContext atomics() {
			return GetRuleContext<AtomicsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexCommandsContext hexCommands() {
			return GetRuleContext<HexCommandsContext>(0);
		}
		public SoundEffectElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soundEffectElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.EnterSoundEffectElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.ExitSoundEffectElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISfxVisitor<TResult> typedVisitor = visitor as ISfxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoundEffectElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SoundEffectElementContext soundEffectElement() {
		SoundEffectElementContext _localctx = new SoundEffectElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_soundEffectElement);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Asm:
			case Jsr:
				EnterOuterAlt(_localctx, 1);
				{
				State = 49;
				specialDirective();
				}
				break;
			case GT:
			case LT:
			case Note:
			case Rest:
			case Octave:
			case Volume:
			case Tie:
			case Instrument:
			case Length:
				EnterOuterAlt(_localctx, 2);
				{
				State = 50;
				atomics();
				}
				break;
			case HexNumber:
				EnterOuterAlt(_localctx, 3);
				{
				State = 51;
				hexCommands();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AsmContext asm() {
			return GetRuleContext<AsmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsrContext jsr() {
			return GetRuleContext<JsrContext>(0);
		}
		public SpecialDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.EnterSpecialDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.ExitSpecialDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISfxVisitor<TResult> typedVisitor = visitor as ISfxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialDirectiveContext specialDirective() {
		SpecialDirectiveContext _localctx = new SpecialDirectiveContext(Context, State);
		EnterRule(_localctx, 4, RULE_specialDirective);
		try {
			State = 56;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Asm:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54;
				asm();
				}
				break;
			case Jsr:
				EnterOuterAlt(_localctx, 2);
				{
				State = 55;
				jsr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asm() { return GetToken(SfxParser.Asm, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JsrIdentifier() { return GetToken(SfxParser.JsrIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AsmTextBlock() { return GetToken(SfxParser.AsmTextBlock, 0); }
		public AsmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.EnterAsm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.ExitAsm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISfxVisitor<TResult> typedVisitor = visitor as ISfxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsmContext asm() {
		AsmContext _localctx = new AsmContext(Context, State);
		EnterRule(_localctx, 6, RULE_asm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			Match(Asm);
			State = 59;
			Match(JsrIdentifier);
			State = 60;
			Match(AsmTextBlock);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Jsr() { return GetToken(SfxParser.Jsr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JsrIdentifier() { return GetToken(SfxParser.JsrIdentifier, 0); }
		public JsrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.EnterJsr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.ExitJsr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISfxVisitor<TResult> typedVisitor = visitor as ISfxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsrContext jsr() {
		JsrContext _localctx = new JsrContext(Context, State);
		EnterRule(_localctx, 8, RULE_jsr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(Jsr);
			State = 63;
			Match(JsrIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PitchslideContext pitchslide() {
			return GetRuleContext<PitchslideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoteContext note() {
			return GetRuleContext<NoteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestContext rest() {
			return GetRuleContext<RestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OctaveContext octave() {
			return GetRuleContext<OctaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LowerOctaveContext lowerOctave() {
			return GetRuleContext<LowerOctaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RaiseOctaveContext raiseOctave() {
			return GetRuleContext<RaiseOctaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VolumeCommandContext volumeCommand() {
			return GetRuleContext<VolumeCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultLengthContext defaultLength() {
			return GetRuleContext<DefaultLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstrumentCommandContext instrumentCommand() {
			return GetRuleContext<InstrumentCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NakedTieContext nakedTie() {
			return GetRuleContext<NakedTieContext>(0);
		}
		public AtomicsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomics; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.EnterAtomics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.ExitAtomics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISfxVisitor<TResult> typedVisitor = visitor as ISfxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicsContext atomics() {
		AtomicsContext _localctx = new AtomicsContext(Context, State);
		EnterRule(_localctx, 10, RULE_atomics);
		try {
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65;
				pitchslide();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66;
				note();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 67;
				rest();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 68;
				octave();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 69;
				lowerOctave();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 70;
				raiseOctave();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 71;
				volumeCommand();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 72;
				defaultLength();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 73;
				instrumentCommand();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 74;
				nakedTie();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Note() { return GetToken(SfxParser.Note, 0); }
		public NoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_note; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.EnterNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.ExitNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISfxVisitor<TResult> typedVisitor = visitor as ISfxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoteContext note() {
		NoteContext _localctx = new NoteContext(Context, State);
		EnterRule(_localctx, 12, RULE_note);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(Note);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rest() { return GetToken(SfxParser.Rest, 0); }
		public RestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.EnterRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.ExitRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISfxVisitor<TResult> typedVisitor = visitor as ISfxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestContext rest() {
		RestContext _localctx = new RestContext(Context, State);
		EnterRule(_localctx, 14, RULE_rest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(Rest);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OctaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Octave() { return GetToken(SfxParser.Octave, 0); }
		public OctaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_octave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.EnterOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.ExitOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISfxVisitor<TResult> typedVisitor = visitor as ISfxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOctave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OctaveContext octave() {
		OctaveContext _localctx = new OctaveContext(Context, State);
		EnterRule(_localctx, 16, RULE_octave);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(Octave);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LowerOctaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(SfxParser.LT, 0); }
		public LowerOctaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lowerOctave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.EnterLowerOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.ExitLowerOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISfxVisitor<TResult> typedVisitor = visitor as ISfxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLowerOctave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LowerOctaveContext lowerOctave() {
		LowerOctaveContext _localctx = new LowerOctaveContext(Context, State);
		EnterRule(_localctx, 18, RULE_lowerOctave);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(LT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseOctaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(SfxParser.GT, 0); }
		public RaiseOctaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseOctave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.EnterRaiseOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.ExitRaiseOctave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISfxVisitor<TResult> typedVisitor = visitor as ISfxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseOctave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseOctaveContext raiseOctave() {
		RaiseOctaveContext _localctx = new RaiseOctaveContext(Context, State);
		EnterRule(_localctx, 20, RULE_raiseOctave);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PitchslideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Note() { return GetTokens(SfxParser.Note); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Note(int i) {
			return GetToken(SfxParser.Note, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Rest() { return GetTokens(SfxParser.Rest); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rest(int i) {
			return GetToken(SfxParser.Rest, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AMPER() { return GetTokens(SfxParser.AMPER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPER(int i) {
			return GetToken(SfxParser.AMPER, i);
		}
		public PitchslideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pitchslide; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.EnterPitchslide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.ExitPitchslide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISfxVisitor<TResult> typedVisitor = visitor as ISfxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPitchslide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PitchslideContext pitchslide() {
		PitchslideContext _localctx = new PitchslideContext(Context, State);
		EnterRule(_localctx, 22, RULE_pitchslide);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			_la = TokenStream.LA(1);
			if ( !(_la==Note || _la==Rest) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 88;
				Match(AMPER);
				State = 89;
				_la = TokenStream.LA(1);
				if ( !(_la==Note || _la==Rest) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AMPER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VolumeCommandContext : ParserRuleContext {
		public VolumeCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_volumeCommand; } }
	 
		public VolumeCommandContext() { }
		public virtual void CopyFrom(VolumeCommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VolumeContext : VolumeCommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Volume() { return GetToken(SfxParser.Volume, 0); }
		public VolumeContext(VolumeCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.EnterVolume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.ExitVolume(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISfxVisitor<TResult> typedVisitor = visitor as ISfxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVolume(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VolumeCommandContext volumeCommand() {
		VolumeCommandContext _localctx = new VolumeCommandContext(Context, State);
		EnterRule(_localctx, 24, RULE_volumeCommand);
		try {
			_localctx = new VolumeContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(Volume);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultLengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Length() { return GetToken(SfxParser.Length, 0); }
		public DefaultLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultLength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.EnterDefaultLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.ExitDefaultLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISfxVisitor<TResult> typedVisitor = visitor as ISfxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultLengthContext defaultLength() {
		DefaultLengthContext _localctx = new DefaultLengthContext(Context, State);
		EnterRule(_localctx, 26, RULE_defaultLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(Length);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstrumentCommandContext : ParserRuleContext {
		public InstrumentCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instrumentCommand; } }
	 
		public InstrumentCommandContext() { }
		public virtual void CopyFrom(InstrumentCommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InstrumentContext : InstrumentCommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instrument() { return GetToken(SfxParser.Instrument, 0); }
		public InstrumentContext(InstrumentCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.EnterInstrument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.ExitInstrument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISfxVisitor<TResult> typedVisitor = visitor as ISfxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstrument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstrumentCommandContext instrumentCommand() {
		InstrumentCommandContext _localctx = new InstrumentCommandContext(Context, State);
		EnterRule(_localctx, 28, RULE_instrumentCommand);
		try {
			_localctx = new InstrumentContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(Instrument);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NakedTieContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tie() { return GetToken(SfxParser.Tie, 0); }
		public NakedTieContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nakedTie; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.EnterNakedTie(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.ExitNakedTie(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISfxVisitor<TResult> typedVisitor = visitor as ISfxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNakedTie(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NakedTieContext nakedTie() {
		NakedTieContext _localctx = new NakedTieContext(Context, State);
		EnterRule(_localctx, 30, RULE_nakedTie);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(Tie);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexCommandsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		public HexCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexCommands; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.EnterHexCommands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.ExitHexCommands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISfxVisitor<TResult> typedVisitor = visitor as ISfxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HexCommandsContext hexCommands() {
		HexCommandsContext _localctx = new HexCommandsContext(Context, State);
		EnterRule(_localctx, 32, RULE_hexCommands);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			hexNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class E0SfxPriorityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE0() { return GetToken(SfxParser.NE0, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber() { return GetToken(SfxParser.HexNumber, 0); }
		public E0SfxPriorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_e0SfxPriority; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.EnterE0SfxPriority(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.ExitE0SfxPriority(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISfxVisitor<TResult> typedVisitor = visitor as ISfxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitE0SfxPriority(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public E0SfxPriorityContext e0SfxPriority() {
		E0SfxPriorityContext _localctx = new E0SfxPriorityContext(Context, State);
		EnterRule(_localctx, 34, RULE_e0SfxPriority);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(NE0);
			State = 105;
			Match(HexNumber);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber() { return GetToken(SfxParser.HexNumber, 0); }
		public HexNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.EnterHexNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISfxListener typedListener = listener as ISfxListener;
			if (typedListener != null) typedListener.ExitHexNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISfxVisitor<TResult> typedVisitor = visitor as ISfxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HexNumberContext hexNumber() {
		HexNumberContext _localctx = new HexNumberContext(Context, State);
		EnterRule(_localctx, 36, RULE_hexNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(HexNumber);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,32,110,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,3,0,40,8,0,1,0,4,0,43,8,0,
		11,0,12,0,44,1,0,3,0,48,8,0,1,1,1,1,1,1,3,1,53,8,1,1,2,1,2,3,2,57,8,2,
		1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,
		5,76,8,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,4,11,
		91,8,11,11,11,12,11,92,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,
		16,1,17,1,17,1,17,1,18,1,18,1,18,0,0,19,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,34,36,0,1,1,0,16,17,106,0,47,1,0,0,0,2,52,1,0,0,0,4,56,
		1,0,0,0,6,58,1,0,0,0,8,62,1,0,0,0,10,75,1,0,0,0,12,77,1,0,0,0,14,79,1,
		0,0,0,16,81,1,0,0,0,18,83,1,0,0,0,20,85,1,0,0,0,22,87,1,0,0,0,24,94,1,
		0,0,0,26,96,1,0,0,0,28,98,1,0,0,0,30,100,1,0,0,0,32,102,1,0,0,0,34,104,
		1,0,0,0,36,107,1,0,0,0,38,40,3,34,17,0,39,38,1,0,0,0,39,40,1,0,0,0,40,
		42,1,0,0,0,41,43,3,2,1,0,42,41,1,0,0,0,43,44,1,0,0,0,44,42,1,0,0,0,44,
		45,1,0,0,0,45,48,1,0,0,0,46,48,5,0,0,1,47,39,1,0,0,0,47,46,1,0,0,0,48,
		1,1,0,0,0,49,53,3,4,2,0,50,53,3,10,5,0,51,53,3,32,16,0,52,49,1,0,0,0,52,
		50,1,0,0,0,52,51,1,0,0,0,53,3,1,0,0,0,54,57,3,6,3,0,55,57,3,8,4,0,56,54,
		1,0,0,0,56,55,1,0,0,0,57,5,1,0,0,0,58,59,5,23,0,0,59,60,5,26,0,0,60,61,
		5,27,0,0,61,7,1,0,0,0,62,63,5,24,0,0,63,64,5,26,0,0,64,9,1,0,0,0,65,76,
		3,22,11,0,66,76,3,12,6,0,67,76,3,14,7,0,68,76,3,16,8,0,69,76,3,18,9,0,
		70,76,3,20,10,0,71,76,3,24,12,0,72,76,3,26,13,0,73,76,3,28,14,0,74,76,
		3,30,15,0,75,65,1,0,0,0,75,66,1,0,0,0,75,67,1,0,0,0,75,68,1,0,0,0,75,69,
		1,0,0,0,75,70,1,0,0,0,75,71,1,0,0,0,75,72,1,0,0,0,75,73,1,0,0,0,75,74,
		1,0,0,0,76,11,1,0,0,0,77,78,5,16,0,0,78,13,1,0,0,0,79,80,5,17,0,0,80,15,
		1,0,0,0,81,82,5,18,0,0,82,17,1,0,0,0,83,84,5,12,0,0,84,19,1,0,0,0,85,86,
		5,11,0,0,86,21,1,0,0,0,87,90,7,0,0,0,88,89,5,4,0,0,89,91,7,0,0,0,90,88,
		1,0,0,0,91,92,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,23,1,0,0,0,94,95,
		5,19,0,0,95,25,1,0,0,0,96,97,5,22,0,0,97,27,1,0,0,0,98,99,5,21,0,0,99,
		29,1,0,0,0,100,101,5,20,0,0,101,31,1,0,0,0,102,103,3,36,18,0,103,33,1,
		0,0,0,104,105,5,25,0,0,105,106,5,30,0,0,106,35,1,0,0,0,107,108,5,30,0,
		0,108,37,1,0,0,0,7,39,44,47,52,56,75,92
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
